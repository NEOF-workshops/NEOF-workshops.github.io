[
  {
    "objectID": "datasets/mgrtibbles.html",
    "href": "datasets/mgrtibbles.html",
    "title": "Mgrtibbles",
    "section": "",
    "text": "mgrtibbles is a R package containing various datasets in tibbles. They were curated into a R package by Matthew Gemmell.\nFor full information please see the mgrtibbles github page",
    "crumbs": [
      "Datasets",
      "Mgrtibbles"
    ]
  },
  {
    "objectID": "datasets/mgrtibbles.html#install-and-load",
    "href": "datasets/mgrtibbles.html#install-and-load",
    "title": "Mgrtibbles",
    "section": "Install and load",
    "text": "Install and load\nInstallation and loading instruction below:\nYou will need the remotes package installed and loaded.\n\ninstall.packages(\"remotes\")\nlibrary(remotes)\n\n\nremotes::install_github(\"m-gemmell/mgrtibbles\")\nlibrary(mgrtibbles)",
    "crumbs": [
      "Datasets",
      "Mgrtibbles"
    ]
  },
  {
    "objectID": "datasets/mgrtibbles.html#accessing-data",
    "href": "datasets/mgrtibbles.html#accessing-data",
    "title": "Mgrtibbles",
    "section": "Accessing data",
    "text": "Accessing data\nOnce you have installed and loaded the package you can access one of the various datasets as a tibble like below:\n\nmgrtibbles::mammal_sleep_tbl\n\n# A tibble: 62 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6.65e+3   5.71           NA       NA           3.3      38.6\n 2 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 3 ArcticFox        3.38e+0   0.0445         NA       NA          12.5      14  \n 4 Arcticgroundsqu… 9.2 e-1   0.0057         NA       NA          16.5      NA  \n 5 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 6 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 7 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 8 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 9 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n10 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n# ℹ 52 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Datasets",
      "Mgrtibbles"
    ]
  },
  {
    "objectID": "tidyr/pivot_wider.html",
    "href": "tidyr/pivot_wider.html",
    "title": "Pivot wider",
    "section": "",
    "text": "The function pivot_wider() widens data, converting it from long to wide.\nWhen data is widened:\nTo widen data two columns are chosen.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot wider"
    ]
  },
  {
    "objectID": "tidyr/pivot_wider.html#dataset",
    "href": "tidyr/pivot_wider.html#dataset",
    "title": "Pivot wider",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the fisheries_long_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::fisheries_long_tbl\n\n# A tibble: 14,674 × 3\n   Entity       Year Metric_tons\n   &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Afghanistan  1969         400\n 2 Afghanistan  1970         400\n 3 Afghanistan  1971         500\n 4 Afghanistan  1972         500\n 5 Afghanistan  1973         500\n 6 Afghanistan  1974         500\n 7 Afghanistan  1975         600\n 8 Afghanistan  1976         600\n 9 Afghanistan  1977         600\n10 Afghanistan  1978         600\n# ℹ 14,664 more rows",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot wider"
    ]
  },
  {
    "objectID": "tidyr/pivot_wider.html#long-to-wide",
    "href": "tidyr/pivot_wider.html#long-to-wide",
    "title": "Pivot wider",
    "section": "Long to wide",
    "text": "Long to wide\nPivot the long tibble to a wide tibble.\nThe two options provided below are:\n\nnames_from=: Column in long data to use as the widened column names.\nvalues_from=: Column in long data to use as the widened values.\n\n\nfisheries_long_tbl |&gt; tidyr::pivot_wider(names_from=Year, values_from=Metric_tons) |&gt;\n    #View first 11 columns with select\n    dplyr::select(1:11)\n\n# A tibble: 264 × 11\n   Entity  `1969` `1970` `1971` `1972` `1973` `1974` `1975` `1976` `1977` `1978`\n   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afgha…     400 4   e2 5   e2 5   e2 5   e2 5   e2 6   e2 6   e2 6   e2 6   e2\n 2 Afric… 3078461 2.48e6 2.36e6 2.63e6 2.78e6 2.74e6 2.49e6 2.20e6 2.16e6 2.12e6\n 3 Afric…  850772 9.61e5 1.13e6 1.20e6 1.20e6 1.24e6 1.28e6 1.26e6 1.29e6 1.31e6\n 4 Alban…    7000 8   e3 8   e3 8   e3 8.00e3 8.45e3 8.41e3 8.38e3 8.34e3 8.81e3\n 5 Alger…   23150 2.42e4 2.37e4 2.83e4 3.12e4 3.58e4 3.77e4 3.51e4 4.35e4 3.41e4\n 6 Ameri…       0 0      0      0      1   e2 8.2 e1 1.36e2 1.13e2 2.02e2 1.93e2\n 7 Andor…      NA 0      0      0      0      0      0      0      0      0     \n 8 Angola  425200 3.75e5 3.24e5 6.07e5 4.79e5 4.00e5 1.61e5 8.15e4 1.20e5 1.26e5\n 9 Antig…     800 9   e2 9   e2 1.2 e3 1.5 e3 1.59e3 1.60e3 1.61e3 1.82e3 1.62e3\n10 Arab …  634609 6.88e5 7.05e5 7.53e5 9.21e5 8.99e5 8.64e5 9.34e5 9.05e5 9.10e5\n# ℹ 254 more rows",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot wider"
    ]
  },
  {
    "objectID": "tidyr/replace_na.html",
    "href": "tidyr/replace_na.html",
    "title": "Replace NA",
    "section": "",
    "text": "It is common to have NAs in your data. However, sometimes instead of removing them you may want to replace them. below are three methods to carry this out.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Replace NA"
    ]
  },
  {
    "objectID": "tidyr/replace_na.html#dataset",
    "href": "tidyr/replace_na.html#dataset",
    "title": "Replace NA",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions). Additionally, we’ll subset it to:\n\nKeep the first ten rows with at least one NA.\nCOlumns species to life_span\n\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\n#Subset to only keep rows with at least one NA\nmammal_sleep_na_tbl &lt;- mgrtibbles::mammal_sleep_tbl[!complete.cases(mammal_sleep_tbl),] |&gt;\n    #Slice to keep first ten rows and select columns species to life_span\n    dplyr::slice(1:10) |&gt; dplyr::select(species:life_span)\n#View tibble\nmammal_sleep_na_tbl\n\n# A tibble: 10 × 7\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6654      5.71           NA       NA           3.3      38.6\n 2 ArcticFox           3.38   0.0445         NA       NA          12.5      14  \n 3 Arcticgroundsqu…    0.92   0.0057         NA       NA          16.5      NA  \n 4 Deserthedgehog      0.55   0.0024          7.6      2.7        10.3      NA  \n 5 Donkey            187.     0.419          NA       NA           3.1      40  \n 6 Genet               1.41   0.0175          4.8      1.3         6.1      34  \n 7 Giantarmadillo     60      0.081          12        6.1        18.1       7  \n 8 Giraffe           529      0.68           NA        0.3        NA        28  \n 9 Gorilla           207      0.406          NA       NA          12        39.3\n10 Graywolf           36.3    0.120          NA       NA          13        16.2",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Replace NA"
    ]
  },
  {
    "objectID": "tidyr/replace_na.html#replace-with-a-value",
    "href": "tidyr/replace_na.html#replace-with-a-value",
    "title": "Replace NA",
    "section": "Replace with a value",
    "text": "Replace with a value\nReplace NAs in specified columns with tidyr::replace_na().\nWhen used with a tibble/data.frame the function needs to be provided with a list. The list contains the column names and the replacement value.\n\nOne column\nReplaces NAs in the dreaming column with 0.\n\nmammal_sleep_na_tbl |&gt;\n    tidyr::replace_na(list(dreaming=0))\n\n# A tibble: 10 × 7\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6654      5.71           NA        0           3.3      38.6\n 2 ArcticFox           3.38   0.0445         NA        0          12.5      14  \n 3 Arcticgroundsqu…    0.92   0.0057         NA        0          16.5      NA  \n 4 Deserthedgehog      0.55   0.0024          7.6      2.7        10.3      NA  \n 5 Donkey            187.     0.419          NA        0           3.1      40  \n 6 Genet               1.41   0.0175          4.8      1.3         6.1      34  \n 7 Giantarmadillo     60      0.081          12        6.1        18.1       7  \n 8 Giraffe           529      0.68           NA        0.3        NA        28  \n 9 Gorilla           207      0.406          NA        0          12        39.3\n10 Graywolf           36.3    0.120          NA        0          13        16.2\n\n\n\n\nMultiple columns\nReplaces:\n\nNAs in the dreaming column with 0.\nNAs in the life_span column with 1.\n\n\nmammal_sleep_na_tbl |&gt;\n    tidyr::replace_na(list(dreaming=0, life_span=1))\n\n# A tibble: 10 × 7\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6654      5.71           NA        0           3.3      38.6\n 2 ArcticFox           3.38   0.0445         NA        0          12.5      14  \n 3 Arcticgroundsqu…    0.92   0.0057         NA        0          16.5       1  \n 4 Deserthedgehog      0.55   0.0024          7.6      2.7        10.3       1  \n 5 Donkey            187.     0.419          NA        0           3.1      40  \n 6 Genet               1.41   0.0175          4.8      1.3         6.1      34  \n 7 Giantarmadillo     60      0.081          12        6.1        18.1       7  \n 8 Giraffe           529      0.68           NA        0.3        NA        28  \n 9 Gorilla           207      0.406          NA        0          12        39.3\n10 Graywolf           36.3    0.120          NA        0          13        16.2\n\n\n\n\nVector\nthe replace_na() function can be used with vectors. In this case the function only needs to value to be replace NAs with.\n\nmammal_sleep_na_tbl |&gt;\n    #Pull out non_dreaming column as a vector\n    dplyr::pull(non_dreaming) |&gt;\n    #Replace NAs with 0\n    tidyr::replace_na(0)\n\n [1]  0.0  0.0  0.0  7.6  0.0  4.8 12.0  0.0  0.0  0.0",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Replace NA"
    ]
  },
  {
    "objectID": "tidyr/replace_na.html#replace-with-other-column",
    "href": "tidyr/replace_na.html#replace-with-other-column",
    "title": "Replace NA",
    "section": "Replace with other column",
    "text": "Replace with other column\nNAs can be replaced with the corresponding value in another column. This carried out with the following functions:\n\ndplyr::mutate: Mutate columns to create new columns based on existing ones, modify existing columns, and delete columns.\ndplyr::coalesce: Finds the first non-missing value at each point.\n\n\nmammal_sleep_na_tbl |&gt;\n    dplyr::mutate(dreaming = dplyr::coalesce(dreaming, total_sleep))\n\n# A tibble: 10 × 7\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6654      5.71           NA        3.3         3.3      38.6\n 2 ArcticFox           3.38   0.0445         NA       12.5        12.5      14  \n 3 Arcticgroundsqu…    0.92   0.0057         NA       16.5        16.5      NA  \n 4 Deserthedgehog      0.55   0.0024          7.6      2.7        10.3      NA  \n 5 Donkey            187.     0.419          NA        3.1         3.1      40  \n 6 Genet               1.41   0.0175          4.8      1.3         6.1      34  \n 7 Giantarmadillo     60      0.081          12        6.1        18.1       7  \n 8 Giraffe           529      0.68           NA        0.3        NA        28  \n 9 Gorilla           207      0.406          NA       12          12        39.3\n10 Graywolf           36.3    0.120          NA       13          13        16.2",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Replace NA"
    ]
  },
  {
    "objectID": "tidyr/replace_na.html#replace-all-nas",
    "href": "tidyr/replace_na.html#replace-all-nas",
    "title": "Replace NA",
    "section": "Replace all NAs",
    "text": "Replace all NAs\nAll NAs can be replaced with a value using base R’s is.na() function.\n\nmammal_sleep_na_tbl[is.na(mammal_sleep_na_tbl)] &lt;- 0\nmammal_sleep_na_tbl\n\n# A tibble: 10 × 7\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6654      5.71            0        0           3.3      38.6\n 2 ArcticFox           3.38   0.0445          0        0          12.5      14  \n 3 Arcticgroundsqu…    0.92   0.0057          0        0          16.5       0  \n 4 Deserthedgehog      0.55   0.0024          7.6      2.7        10.3       0  \n 5 Donkey            187.     0.419           0        0           3.1      40  \n 6 Genet               1.41   0.0175          4.8      1.3         6.1      34  \n 7 Giantarmadillo     60      0.081          12        6.1        18.1       7  \n 8 Giraffe           529      0.68            0        0.3         0        28  \n 9 Gorilla           207      0.406           0        0          12        39.3\n10 Graywolf           36.3    0.120           0        0          13        16.2",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Replace NA"
    ]
  },
  {
    "objectID": "tidyr/separate_wider.html",
    "href": "tidyr/separate_wider.html",
    "title": "Separate wider",
    "section": "",
    "text": "The separate_wider_delim() function splits a string column into multiple columns by a delimiter.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Separate wider"
    ]
  },
  {
    "objectID": "tidyr/separate_wider.html#dataset",
    "href": "tidyr/separate_wider.html#dataset",
    "title": "Separate wider",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the crop_and_soil_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::crop_and_soil_tbl |&gt;\n    #View first four columns with select\n    dplyr::select(1:4)\n\n# A tibble: 8,000 × 4\n   Soil_type Crop_type Fertiliser Temperature_celsius_kelvin\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;                     \n 1 Sandy     Maize     Urea       26_-247                   \n 2 Loamy     Sugarcane DAP        29_-244                   \n 3 Black     Cotton    14-35-14   34_-239                   \n 4 Red       Tobacco   28-28      32_-241                   \n 5 Clayey    Paddy     Urea       28_-245                   \n 6 Sandy     Barley    17-17-17   26_-247                   \n 7 Red       Cotton    20-20      25_-248                   \n 8 Loamy     Wheat     Urea       33_-240                   \n 9 Sandy     Millets   28-28      30_-243                   \n10 Black     Oil seeds 14-35-14   29_-244                   \n# ℹ 7,990 more rows",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Separate wider"
    ]
  },
  {
    "objectID": "tidyr/separate_wider.html#separate-a-column",
    "href": "tidyr/separate_wider.html#separate-a-column",
    "title": "Separate wider",
    "section": "Separate a column",
    "text": "Separate a column\nSplit the column Temperature_celsius_kelvin into 2 columns by the delimiter ““. This will produce a Temp_celsius column and a -Temp_kelvin__ column.\n\ncrop_and_soil_tbl |&gt;\n    #Select first four columns\n    dplyr::select(1:4) |&gt;\n    #Separate wider\n    tidyr::separate_wider_delim(Temperature_celsius_kelvin, delim=\"_\",\n    names = c(\"Temp_celsius\", \"Temp_kelvin\")) |&gt;\n    #Mutate across the two columns to convert them to numeric columns\n    dplyr::mutate(dplyr::across(Temp_celsius:Temp_kelvin, as.numeric))\n\n# A tibble: 8,000 × 5\n   Soil_type Crop_type Fertiliser Temp_celsius Temp_kelvin\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Sandy     Maize     Urea                 26        -247\n 2 Loamy     Sugarcane DAP                  29        -244\n 3 Black     Cotton    14-35-14             34        -239\n 4 Red       Tobacco   28-28                32        -241\n 5 Clayey    Paddy     Urea                 28        -245\n 6 Sandy     Barley    17-17-17             26        -247\n 7 Red       Cotton    20-20                25        -248\n 8 Loamy     Wheat     Urea                 33        -240\n 9 Sandy     Millets   28-28                30        -243\n10 Black     Oil seeds 14-35-14             29        -244\n# ℹ 7,990 more rows",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Separate wider"
    ]
  },
  {
    "objectID": "tidyr/unite.html",
    "href": "tidyr/unite.html",
    "title": "Unite",
    "section": "",
    "text": "The unite() function combines/pastes multiple string/character columns into one. This can be useful when combing multiple metadata columns into one for analyses/statistics/plotting purposes.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Unite"
    ]
  },
  {
    "objectID": "tidyr/unite.html#dataset",
    "href": "tidyr/unite.html#dataset",
    "title": "Unite",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the crop_and_soil_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::crop_and_soil_tbl |&gt;\n    #Select all but the fourth column\n    dplyr::select(-4)\n\n# A tibble: 8,000 × 8\n   Soil_type Crop_type Fertiliser Humidity Moisture Nitrogen Potassium\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Sandy     Maize     Urea             52       38       37         0\n 2 Loamy     Sugarcane DAP              52       45       12         0\n 3 Black     Cotton    14-35-14         65       62        7         9\n 4 Red       Tobacco   28-28            62       34       22         0\n 5 Clayey    Paddy     Urea             54       46       35         0\n 6 Sandy     Barley    17-17-17         52       35       12        10\n 7 Red       Cotton    20-20            50       64        9         0\n 8 Loamy     Wheat     Urea             64       50       41         0\n 9 Sandy     Millets   28-28            60       42       21         0\n10 Black     Oil seeds 14-35-14         58       33        9         7\n# ℹ 7,990 more rows\n# ℹ 1 more variable: Phosphorous &lt;dbl&gt;",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Unite"
    ]
  },
  {
    "objectID": "tidyr/unite.html#unite-columns",
    "href": "tidyr/unite.html#unite-columns",
    "title": "Unite",
    "section": "Unite columns",
    "text": "Unite columns\nUnite 2 columns into one. This will remove the columns to be united.\nThe two options below are:\n\nThe name of the new united column (Crop_fertiliser).\nThe columns to unite (Crop_type:Fertiliser).\n\n\ncrop_and_soil_tbl |&gt;\n    #Select all but the fourth column\n    dplyr::select(-4) |&gt;\n    #Unite the Crop and fertiliser columns\n    tidyr::unite(\"Crop_Fertiliser\", Crop_type:Fertiliser)\n\n# A tibble: 8,000 × 7\n   Soil_type Crop_Fertiliser    Humidity Moisture Nitrogen Potassium Phosphorous\n   &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Sandy     Maize_Urea               52       38       37         0           0\n 2 Loamy     Sugarcane_DAP            52       45       12         0          36\n 3 Black     Cotton_14-35-14          65       62        7         9          30\n 4 Red       Tobacco_28-28            62       34       22         0          20\n 5 Clayey    Paddy_Urea               54       46       35         0           0\n 6 Sandy     Barley_17-17-17          52       35       12        10          13\n 7 Red       Cotton_20-20             50       64        9         0          10\n 8 Loamy     Wheat_Urea               64       50       41         0           0\n 9 Sandy     Millets_28-28            60       42       21         0          18\n10 Black     Oil seeds_14-35-14       58       33        9         7          30\n# ℹ 7,990 more rows",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Unite"
    ]
  },
  {
    "objectID": "tidyr/unite.html#further-unite-options",
    "href": "tidyr/unite.html#further-unite-options",
    "title": "Unite",
    "section": "Further unite options",
    "text": "Further unite options\nWith tidyr::unite() you can:\n\nChoose specific columns and their order in the united column with a string vector of the column names.\nChoose the delimiter/separator for the strings in the united column (sep=).\nRetain the original columns with the option remove=FALSE.\n\n\ncrop_and_soil_tbl |&gt;\n    #Select all but the fourth column\n    dplyr::select(-4) |&gt;\n    #Unite columns\n    tidyr::unite(\n        #United column name\n        \"Crop.Soil.Fertiliser\",\n        #Columns to unite\n        c(\"Crop_type\",\"Soil_type\",\"Fertiliser\"), \n        #Separator for stings in united column\n        sep=\".\", \n        #Do not remove the original columns to be united\n        remove=FALSE\n        )\n\n# A tibble: 8,000 × 9\n   Crop.Soil.Fertiliser     Soil_type Crop_type Fertiliser Humidity Moisture\n   &lt;chr&gt;                    &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1 Maize.Sandy.Urea         Sandy     Maize     Urea             52       38\n 2 Sugarcane.Loamy.DAP      Loamy     Sugarcane DAP              52       45\n 3 Cotton.Black.14-35-14    Black     Cotton    14-35-14         65       62\n 4 Tobacco.Red.28-28        Red       Tobacco   28-28            62       34\n 5 Paddy.Clayey.Urea        Clayey    Paddy     Urea             54       46\n 6 Barley.Sandy.17-17-17    Sandy     Barley    17-17-17         52       35\n 7 Cotton.Red.20-20         Red       Cotton    20-20            50       64\n 8 Wheat.Loamy.Urea         Loamy     Wheat     Urea             64       50\n 9 Millets.Sandy.28-28      Sandy     Millets   28-28            60       42\n10 Oil seeds.Black.14-35-14 Black     Oil seeds 14-35-14         58       33\n# ℹ 7,990 more rows\n# ℹ 3 more variables: Nitrogen &lt;dbl&gt;, Potassium &lt;dbl&gt;, Phosphorous &lt;dbl&gt;",
    "crumbs": [
      "Tidyr",
      "Character vectors",
      "Unite"
    ]
  },
  {
    "objectID": "forcats/forcats.html",
    "href": "forcats/forcats.html",
    "title": "Forcats",
    "section": "",
    "text": "forcats homepage",
    "crumbs": [
      "Forcats"
    ]
  },
  {
    "objectID": "readr/readr.html#overview",
    "href": "readr/readr.html#overview",
    "title": "Readr",
    "section": "Overview",
    "text": "Overview\nReadr is primarily used to read in rectangular data from a delimited file into R as a tibble or write data to a file.\nRectangular data generally refers to tables.\nDelimited data means that the columns/fields are delimited/separated by a character. Common delimiting characters include spaces (), commas (,), and tabs (\\t).\nreadr homepage",
    "crumbs": [
      "Readr"
    ]
  },
  {
    "objectID": "readr/readr.html#data",
    "href": "readr/readr.html#data",
    "title": "Readr",
    "section": "Data",
    "text": "Data\nRather than downloading files to then read in to R, we will use the URL of files uploaded to this website.\nIf you are interested in information and/or downloading the data you can view the following page: Data files",
    "crumbs": [
      "Readr"
    ]
  },
  {
    "objectID": "readr/readr.html#sections",
    "href": "readr/readr.html#sections",
    "title": "Readr",
    "section": "Sections",
    "text": "Sections\nThe sections of readr are summarised below.\n\nRead\n\n\n  \n\n\nThe readr::read_delim() function reads in delimited rectangular data from a file to a tibble.\nTopics covered are:\n\nRead_delim(): Reading in data with readr::read_delim() and specifying the delimiter with delim=. Common delimiters are comma (,), tab (\\t), and space ().\nColumn types: Specifying the data types (double, integer, character, factor, logical etc.) of the columns when reading in data with readr::read_delim(). Particularly important when you want integer or factor columns.\nMisc read options: Three miscellaneous options for readr::read_delim().\n\nid=: Adds an ID column containing the file path.\nskip=: Skips a specified number of lines from the top of the file.\nn_max=: Specify the max number of lines/rows to read into a tibble.\n\n\nTidyverse reference page\n\n\nWrite\n\n\n  \n\n\nThe readr::write_delim() writes tibbles and other table data to files.",
    "crumbs": [
      "Readr"
    ]
  },
  {
    "objectID": "readr/write.html",
    "href": "readr/write.html",
    "title": "Write",
    "section": "",
    "text": "Although there are specific functions for some delimiters this page will show you how to write out data with any delimiter using readr::write_delim() and the delim= option.\nThe most common types of delimiters for rectangular data files are:\nAdditionally, non-standard delimiters can be specified. Tilde (~), Colon (:), Semi-colon (;), Pipe (|) are commonly used as non-standard delimiters.",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/write.html#data",
    "href": "readr/write.html#data",
    "title": "Write",
    "section": "Data",
    "text": "Data\nWe’ll write the first five lines of all_plant_details.csv to various files with different delimiters.\nFor convenience read in the data, slice it and assign it to a variable called plant_detail_slice_tbl.\n\nplant_detail_slice_tbl &lt;- readr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\",\n    delim = \",\", show_col_types = FALSE) |&gt;\n    dplyr::slice(1:5)",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/write.html#comma-delimited",
    "href": "readr/write.html#comma-delimited",
    "title": "Write",
    "section": "Comma delimited",
    "text": "Comma delimited\nTo write a data to a file with comma (,) delimiters you can use the option delim = \",\".\n\nWrite comma delimited file\nWrite the variable plant_detail_slice_tbl to a comma delimited file called all_plant_slice.csv.\n\nreadr::write_delim(plant_detail_slice_tbl, \"plant_detail_slice.csv\", delim = \",\")\n\n\n\nComma delimited file contents\nPrint the file contents of all_plant_slice.txt.\n\nreadLines(\"plant_detail_slice.csv\")\n\n[1] \"id,common_name,seeds,drought_tolerant,salt_tolerant,thorny,invasive,tropical,indoor,flowers,cones,fruits,edible_fruit,leaf,edible_leaf,cuisine,medicinal,poisonous_to_humans,poisonous_to_pets,sunlight_part_sun_part_shade,sunlight_full_shade,sunlight_deep_shade,sunlight_part_shade,sunlight_full_sun_only_if_soil_kept_moist,sunlight_full_sun,sunlight_filtered_shade,care_level_encoded,maintenance_encoded,watering_encoded,growth_rate_encoded,cycle_perennial,cycle_herbaceous_perennial,cycle_annual\"\n[2] \"425,flowering-maple,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,2,0,2,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426,flowering-maple,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427,flowering-maple,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428,flowering-maple,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,2,1,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434,Jacob's coat,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,2,0,2,0,1,0,0\"",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/write.html#tab-delimited",
    "href": "readr/write.html#tab-delimited",
    "title": "Write",
    "section": "Tab delimited",
    "text": "Tab delimited\nTo write a data to a file with comma (\\t) delimiters you can use the option delim = \"\\t\".\n\nWrite tab delimited file\nWrite the variable plant_detail_slice_tbl to a tab delimited file called all_plant_slice.tsv.\n\nreadr::write_delim(plant_detail_slice_tbl, \"plant_detail_slice.tsv\", delim = \"\\t\")\n\n\n\nTab delimited file contents\nPrint the file contents of all_plant_slice.tsv.\nIf you were to open the file in a text editor it would most likely represent the \\t characters as tab space.\n\nreadLines(\"plant_detail_slice.tsv\")\n\n[1] \"id\\tcommon_name\\tseeds\\tdrought_tolerant\\tsalt_tolerant\\tthorny\\tinvasive\\ttropical\\tindoor\\tflowers\\tcones\\tfruits\\tedible_fruit\\tleaf\\tedible_leaf\\tcuisine\\tmedicinal\\tpoisonous_to_humans\\tpoisonous_to_pets\\tsunlight_part_sun_part_shade\\tsunlight_full_shade\\tsunlight_deep_shade\\tsunlight_part_shade\\tsunlight_full_sun_only_if_soil_kept_moist\\tsunlight_full_sun\\tsunlight_filtered_shade\\tcare_level_encoded\\tmaintenance_encoded\\twatering_encoded\\tgrowth_rate_encoded\\tcycle_perennial\\tcycle_herbaceous_perennial\\tcycle_annual\"\n[2] \"425\\tflowering-maple\\t0\\t1\\t0\\t1\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t2\\t0\\t2\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426\\tflowering-maple\\t0\\t1\\t0\\t0\\t0\\t0\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427\\tflowering-maple\\t0\\t1\\t0\\t0\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428\\tflowering-maple\\t0\\t1\\t1\\t0\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t2\\t1\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434\\tJacob's coat\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t2\\t0\\t2\\t0\\t1\\t0\\t0\"",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/write.html#space-delimited",
    "href": "readr/write.html#space-delimited",
    "title": "Write",
    "section": "Space delimited",
    "text": "Space delimited\nBy default readr::write_delim() will use a space as the delimiter character. Therefore you do not need to provide the delim= option.\n\nWrite space delimited file\nWrite the variable plant_detail_slice_tbl to a space delimited file called all_plant_slice.txt.\n\nreadr::write_delim(plant_detail_slice_tbl, \"plant_detail_slice.txt\")\n\n\n\nSpace delimited file contents\nPrint the file contents of all_plant_slice.txt.\nYou will notice the 6th line has \"Jacob’s coat\". As this value had a space the \\\" are used to indicate that Jacob’s coat is the value within one field.\n\nreadLines(\"plant_detail_slice.txt\")\n\n[1] \"id common_name seeds drought_tolerant salt_tolerant thorny invasive tropical indoor flowers cones fruits edible_fruit leaf edible_leaf cuisine medicinal poisonous_to_humans poisonous_to_pets sunlight_part_sun_part_shade sunlight_full_shade sunlight_deep_shade sunlight_part_shade sunlight_full_sun_only_if_soil_kept_moist sunlight_full_sun sunlight_filtered_shade care_level_encoded maintenance_encoded watering_encoded growth_rate_encoded cycle_perennial cycle_herbaceous_perennial cycle_annual\"\n[2] \"425 flowering-maple 0 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 2 0 2 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426 flowering-maple 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427 flowering-maple 0 1 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428 flowering-maple 0 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 2 1 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434 \\\"Jacob's coat\\\" 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 2 0 2 0 1 0 0\"",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/write.html#non-standard-delimiters",
    "href": "readr/write.html#non-standard-delimiters",
    "title": "Write",
    "section": "Non-standard delimiters",
    "text": "Non-standard delimiters\nYou can use many other characters as delimiters when writing files. This can be useful if your data contains the three common delimiters (comm, tab, and space).\nThe most common non-standard delimiters are:\n\nTilde (~)\nColon (:)\nSemi-colon (;)\nPipe (|)\n\n\nWrite non-standard delimited file\nWrite the variable plant_detail_slice_tbl to a pipe (|) delimited file called all_plant_slice.pipe_delimit.text.\n\nreadr::write_delim(plant_detail_slice_tbl, \"plant_detail_slice.pipe_delimit.text\", delim = \"|\")\n\n\n\nNon-standard delimited file contents\nPrint the file contents of all_plant_slice.pipe_delimit.text.\n\nreadLines(\"plant_detail_slice.pipe_delimit.text\")\n\n[1] \"id|common_name|seeds|drought_tolerant|salt_tolerant|thorny|invasive|tropical|indoor|flowers|cones|fruits|edible_fruit|leaf|edible_leaf|cuisine|medicinal|poisonous_to_humans|poisonous_to_pets|sunlight_part_sun_part_shade|sunlight_full_shade|sunlight_deep_shade|sunlight_part_shade|sunlight_full_sun_only_if_soil_kept_moist|sunlight_full_sun|sunlight_filtered_shade|care_level_encoded|maintenance_encoded|watering_encoded|growth_rate_encoded|cycle_perennial|cycle_herbaceous_perennial|cycle_annual\"\n[2] \"425|flowering-maple|0|1|0|1|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|1|0|1|0|2|0|2|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426|flowering-maple|0|1|0|0|0|0|1|1|0|0|0|1|0|0|0|0|0|0|0|0|1|0|1|0|1|0|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427|flowering-maple|0|1|0|0|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|1|0|1|0|1|0|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428|flowering-maple|0|1|1|0|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|0|0|1|0|2|1|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434|Jacob's coat|0|0|0|0|0|0|1|1|0|0|0|1|0|0|0|0|0|0|0|0|1|0|1|0|2|0|2|0|1|0|0\"",
    "crumbs": [
      "Readr",
      "Write"
    ]
  },
  {
    "objectID": "readr/cheatsheets.html",
    "href": "readr/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source\n\n\n\n\n\n\nTEST",
    "crumbs": [
      "Readr",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "tibble/tibble.html#overview",
    "href": "tibble/tibble.html#overview",
    "title": "Tibble",
    "section": "Overview",
    "text": "Overview\nA tibble (tbl) is a reimagining of the data.frame (df) object. They are described as data.frames that are:\n\nLazy: They don’t change variable names and they partial matching does not work.\nSurly: They complain more such as when a variable does not exist.\n\nOne important note is that tibbles don’t have row names.\nAlthough tibbles have advantages compared to data.frames they are not always more suited to the task than data.frames. However, tibbles are generally always preferred over data.frames when using tidyverse packages.\nTibble homepage",
    "crumbs": [
      "Tibble"
    ]
  },
  {
    "objectID": "tibble/tibble.html#sections",
    "href": "tibble/tibble.html#sections",
    "title": "Tibble",
    "section": "Sections",
    "text": "Sections\nThe sections in this book are:\n\nCreating tibbles: Creating tibbles with code, data.frame coercion, and reading in from files.\nStructure: Demonstrates the sturcture/format of a tibble.\nSubsetting: Subsetting tibbles and the difference between using $ and [].\nPrinting or viewing: Unique features of viewing tibbles.\nAdding rows and columns: How to add new rows/columns and bind tibbles together.",
    "crumbs": [
      "Tibble"
    ]
  },
  {
    "objectID": "tibble/tibble.html#tibble-example",
    "href": "tibble/tibble.html#tibble-example",
    "title": "Tibble",
    "section": "Tibble example",
    "text": "Tibble example\nBelow is an example of:\n\nCreating a basic tibble\nPrinting the tibble\n\n\n#Create a tibble\ntbl &lt;- tibble::tibble(Day = c(\"Mon\", \"Tue\", \"Wed\"),\n              Hawks = c(3,7,2),\n              Pigeons = c(52,21,61),\n              Starlings = c(1,2,1))\n#Print tibble\ntbl\n\n# A tibble: 3 × 4\n  Day   Hawks Pigeons Starlings\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Mon       3      52         1\n2 Tue       7      21         2\n3 Wed       2      61         1",
    "crumbs": [
      "Tibble"
    ]
  },
  {
    "objectID": "tibble/subsetting.html",
    "href": "tibble/subsetting.html",
    "title": "Subsetting",
    "section": "",
    "text": "There are various ways to subset a tibble. This sections shows the various methods with examples.\nTidyverse’s tibble subsetting webpage",
    "crumbs": [
      "Tibble",
      "Subsetting"
    ]
  },
  {
    "objectID": "tibble/subsetting.html#load-data",
    "href": "tibble/subsetting.html#load-data",
    "title": "Subsetting",
    "section": "Load data",
    "text": "Load data\nThe examples in this section use the pie_crab data from the lterdatasampler package (includes install instructions).\nLoad package\n\nlibrary(\"lterdatasampler\")\n\nCreate a tibble from a subset of the pie_crab data.\n\npie_crab_tbl &lt;- tibble::as_tibble(lterdatasampler::pie_crab[1:10,1:7])\npie_crab_tbl\n\n# A tibble: 10 × 7\n   date       latitude site   size air_temp air_temp_sd water_temp\n   &lt;date&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n 1 2016-07-24       30 GTM    12.4     21.8        6.39       24.5\n 2 2016-07-24       30 GTM    14.2     21.8        6.39       24.5\n 3 2016-07-24       30 GTM    14.5     21.8        6.39       24.5\n 4 2016-07-24       30 GTM    12.9     21.8        6.39       24.5\n 5 2016-07-24       30 GTM    12.4     21.8        6.39       24.5\n 6 2016-07-24       30 GTM    13.0     21.8        6.39       24.5\n 7 2016-07-24       30 GTM    10.3     21.8        6.39       24.5\n 8 2016-07-24       30 GTM    11.2     21.8        6.39       24.5\n 9 2016-07-24       30 GTM    12.7     21.8        6.39       24.5\n10 2016-07-24       30 GTM    14.6     21.8        6.39       24.5",
    "crumbs": [
      "Tibble",
      "Subsetting"
    ]
  },
  {
    "objectID": "tibble/subsetting.html#one-column-with",
    "href": "tibble/subsetting.html#one-column-with",
    "title": "Subsetting",
    "section": "One column with $",
    "text": "One column with $\nSubsetting a column using $ and a column name will produce a vector.\n\npie_crab_tbl$site\n\n [1] \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\"\n\nstr(pie_crab_tbl$site)\n\n chr [1:10] \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\" \"GTM\"",
    "crumbs": [
      "Tibble",
      "Subsetting"
    ]
  },
  {
    "objectID": "tibble/subsetting.html#rows-and-columns-with",
    "href": "tibble/subsetting.html#rows-and-columns-with",
    "title": "Subsetting",
    "section": "Rows and columns with [,]",
    "text": "Rows and columns with [,]\nSubsetting a tibble with [] will always produce a tibble.\nThis is different from a data.frame where you may extract a scalar, vector, or data.frame.\n\nLoad data.frame\nCreate a data.frame from the pie_crab_tbl.\n\npie_crab_df &lt;- as.data.frame(pie_crab_tbl)\npie_crab_df\n\n         date latitude site  size air_temp air_temp_sd water_temp\n1  2016-07-24       30  GTM 12.43   21.792       6.391     24.502\n2  2016-07-24       30  GTM 14.18   21.792       6.391     24.502\n3  2016-07-24       30  GTM 14.52   21.792       6.391     24.502\n4  2016-07-24       30  GTM 12.94   21.792       6.391     24.502\n5  2016-07-24       30  GTM 12.45   21.792       6.391     24.502\n6  2016-07-24       30  GTM 12.99   21.792       6.391     24.502\n7  2016-07-24       30  GTM 10.32   21.792       6.391     24.502\n8  2016-07-24       30  GTM 11.19   21.792       6.391     24.502\n9  2016-07-24       30  GTM 12.68   21.792       6.391     24.502\n10 2016-07-24       30  GTM 14.55   21.792       6.391     24.502\n\n\n\n\nExtracting a value\nSubsetting one value from a data.frame leads to a scalar\n\npie_crab_df[1,1]\n\n[1] \"2016-07-24\"\n\nstr(pie_crab_df[1,1])\n\n Date[1:1], format: \"2016-07-24\"\n\n\nSubsetting one value from a tibble leads to a tibble\n\npie_crab_tbl[1,1]\n\n# A tibble: 1 × 1\n  date      \n  &lt;date&gt;    \n1 2016-07-24\n\n\n\n\nExtracting a row\nSubsetting a row from a data.frame leads to a data.frame\n\npie_crab_df[1,]\n\n        date latitude site  size air_temp air_temp_sd water_temp\n1 2016-07-24       30  GTM 12.43   21.792       6.391     24.502\n\nstr(pie_crab_df[1,])\n\n'data.frame':   1 obs. of  7 variables:\n $ date       : Date, format: \"2016-07-24\"\n $ latitude   : num 30\n $ site       : chr \"GTM\"\n $ size       : num 12.4\n $ air_temp   : num 21.8\n $ air_temp_sd: num 6.39\n $ water_temp : num 24.5\n\n\nSubsetting a row from a tibble leads to a tibble\n\npie_crab_tbl[1,]\n\n# A tibble: 1 × 7\n  date       latitude site   size air_temp air_temp_sd water_temp\n  &lt;date&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1 2016-07-24       30 GTM    12.4     21.8        6.39       24.5\n\n\n\n\nExtracting a column\nSubsetting a column from a data.frame leads to a vector\n\npie_crab_df[,1]\n\n [1] \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\"\n [6] \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\"\n\nstr(pie_crab_df[,1])\n\n Date[1:10], format: \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" \"2016-07-24\" ...\n\n\nSubsetting a column from a tibble leads to a tibble\n\npie_crab_tbl[,1]\n\n# A tibble: 10 × 1\n   date      \n   &lt;date&gt;    \n 1 2016-07-24\n 2 2016-07-24\n 3 2016-07-24\n 4 2016-07-24\n 5 2016-07-24\n 6 2016-07-24\n 7 2016-07-24\n 8 2016-07-24\n 9 2016-07-24\n10 2016-07-24\n\n\n\n\nExtracting a combo of columns and rows\nSubsetting rows and columns together from a data.frame leads to a data.frame\n\npie_crab_df[1:3,c(\"date\",\"air_temp\",\"size\")]\n\n        date air_temp  size\n1 2016-07-24   21.792 12.43\n2 2016-07-24   21.792 14.18\n3 2016-07-24   21.792 14.52\n\nstr(pie_crab_df[1:3,c(\"date\",\"air_temp\",\"size\")])\n\n'data.frame':   3 obs. of  3 variables:\n $ date    : Date, format: \"2016-07-24\" \"2016-07-24\" ...\n $ air_temp: num  21.8 21.8 21.8\n $ size    : num  12.4 14.2 14.5\n\n\nSubsetting rows and columns together from a tibble leads to a tibble\n\npie_crab_tbl[1:3,c(\"date\",\"air_temp\",\"size\")]\n\n# A tibble: 3 × 3\n  date       air_temp  size\n  &lt;date&gt;        &lt;dbl&gt; &lt;dbl&gt;\n1 2016-07-24     21.8  12.4\n2 2016-07-24     21.8  14.2\n3 2016-07-24     21.8  14.5",
    "crumbs": [
      "Tibble",
      "Subsetting"
    ]
  },
  {
    "objectID": "tibble/subsetting.html#dplyr",
    "href": "tibble/subsetting.html#dplyr",
    "title": "Subsetting",
    "section": "Dplyr",
    "text": "Dplyr\n\n\n  \n\n\nThere are also many ways to subset a tibble with dplyr.\ndplyr page",
    "crumbs": [
      "Tibble",
      "Subsetting"
    ]
  },
  {
    "objectID": "tibble/creating_tibbles.html",
    "href": "tibble/creating_tibbles.html",
    "title": "Creating tibbles",
    "section": "",
    "text": "There are various ways to create tibbles. Below are three methods:",
    "crumbs": [
      "Tibble",
      "Creating tibbles"
    ]
  },
  {
    "objectID": "tibble/creating_tibbles.html#code-to-tibble",
    "href": "tibble/creating_tibbles.html#code-to-tibble",
    "title": "Creating tibbles",
    "section": "Code to tibble",
    "text": "Code to tibble\nWhen creating a tibble through code you provide the tibble::tibble() function with vectors of identical length. Each vector will become a column.\n\n#Vectors to be used as columns\nDay &lt;- c(\"Mon\", \"Tue\", \"Wed\")\nMonth &lt;- rep(\"January\", 3)\nHawks &lt;- c(3,7,2)\nPigeons &lt;- c(52,21,61)\nStarlings &lt;- c(1,2,1)\n#Create a tibble\ntbl &lt;- tibble::tibble(Day, Month, Hawks, Pigeons, Starlings)\n#View tibble\n#Note that the column names are the same as the vector names\ntbl\n\n# A tibble: 3 × 5\n  Day   Month   Hawks Pigeons Starlings\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Mon   January     3      52         1\n2 Tue   January     7      21         2\n3 Wed   January     2      61         1",
    "crumbs": [
      "Tibble",
      "Creating tibbles"
    ]
  },
  {
    "objectID": "tibble/creating_tibbles.html#data.frame-to-tibble",
    "href": "tibble/creating_tibbles.html#data.frame-to-tibble",
    "title": "Creating tibbles",
    "section": "data.frame to tibble",
    "text": "data.frame to tibble\nLet’s load in the built-in iris data frame and convert it to a tibble.\n\n#Head of iris data.frame\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n#Coerce to tibble\niris_tbl &lt;- tibble::as_tibble(iris)\n#View iris tibble\niris_tbl\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\nNote: The iris dataset is built-in to base R. You can see all the pre-loaded datasets in R with data()",
    "crumbs": [
      "Tibble",
      "Creating tibbles"
    ]
  },
  {
    "objectID": "tibble/creating_tibbles.html#file-to-tibble",
    "href": "tibble/creating_tibbles.html#file-to-tibble",
    "title": "Creating tibbles",
    "section": "File to tibble",
    "text": "File to tibble\nWe can use readr’s function read_csv() to read in a file as a tibble.\nMore information: readr\nEnsure you have the following file downloaded:\nall_plants_details.csv download\n\nhouse_plants_tbl &lt;- readr::read_csv(file = \"all_plant_details.csv\")\nhouse_plants_tbl\n\n\n\nRows: 155 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 155 × 33\n      id common_name        seeds drought_tolerant salt_tolerant thorny invasive\n   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n 1   425 flowering-maple        0                1             0      1        0\n 2   426 flowering-maple        0                1             0      0        0\n 3   427 flowering-maple        0                1             0      0        0\n 4   428 flowering-maple        0                1             1      0        0\n 5   434 Jacob's coat           0                0             0      0        0\n 6   502 hot water plant        0                0             0      0        0\n 7   540 desert rose            0                1             1      1        0\n 8   543 maidenhair fern        0                0             0      0        0\n 9   546 delta maidenhair …     0                1             0      0        0\n10   549 urn plant              1                1             1      0        0\n# ℹ 145 more rows\n# ℹ 26 more variables: tropical &lt;dbl&gt;, indoor &lt;dbl&gt;, flowers &lt;dbl&gt;,\n#   cones &lt;dbl&gt;, fruits &lt;dbl&gt;, edible_fruit &lt;dbl&gt;, leaf &lt;dbl&gt;,\n#   edible_leaf &lt;dbl&gt;, cuisine &lt;dbl&gt;, medicinal &lt;dbl&gt;,\n#   poisonous_to_humans &lt;dbl&gt;, poisonous_to_pets &lt;dbl&gt;,\n#   sunlight_part_sun_part_shade &lt;dbl&gt;, sunlight_full_shade &lt;dbl&gt;,\n#   sunlight_deep_shade &lt;dbl&gt;, sunlight_part_shade &lt;dbl&gt;, …",
    "crumbs": [
      "Tibble",
      "Creating tibbles"
    ]
  },
  {
    "objectID": "ggplot2/layers.html",
    "href": "ggplot2/layers.html",
    "title": "Layers",
    "section": "",
    "text": "Layers",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Layers"
    ]
  },
  {
    "objectID": "ggplot2/cheatsheets.html",
    "href": "ggplot2/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Ggplot2",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "ggplot2/ggplot2.html#overview",
    "href": "ggplot2/ggplot2.html#overview",
    "title": "Ggplot2",
    "section": "Overview",
    "text": "Overview\nGgplot2 is the visualisation package of Tidyverse. It utilises the grammar of graphics (the gg in ggplot2) to create plots/figures in a layered/compartmentalised fashion.\nThere are multiple parts of a ggplot2 figure including:\n\nThe ggplot2 object that contains the aesthetics\nThe aesthetics: This is the data and what they are mapped to (x axis, y-axis, colour etc.)\nThe geom layers: This is how the aesthetics are visualised (bar chart, boxplot, histogram etc.)\nThe guides: The text and other information on the axes abd legends (labels, titles, etc.)\nFacetting: Splitting of data to multiple plots (e.g. side by side box plots displaying different metrics)\n\nggplot2 homepage\nThis website aims to quickly cover the most commonly used ggplot2 functions and uses. Therefore there are a lot more ggplot2 functions than those covered here. Please check the below link for the full list.\nFull ggplot2 reference page",
    "crumbs": [
      "Ggplot2"
    ]
  },
  {
    "objectID": "ggplot2/ggplot2.html#sections",
    "href": "ggplot2/ggplot2.html#sections",
    "title": "Ggplot2",
    "section": "Sections",
    "text": "Sections\nThere are various sections for ggplot2. These are summarised below.\n\nAnatomy\nCreating a basic plot with ggplot2. In essence the introduction to ggplot2 usage.\n\nBasic plot: Creation of a basic plot with ggplot2\nGgplot object: Details about the creation of a ggplot2 object.\n\nInput data: The required input format data for ggplot2.\nAesthetics: What they are, the different types, and their usage.\n\nLayers: What layers are and how to add them to a ggplot2 object.\n\n\n\nOutput\nHow to save the output of ggplot2 objects.\n\nggsave(): Save a ggplot object/figure to a static image file.\npathcwork: Combing multiple gpglot2 objects into the same graphic/image. (https://patchwork.data-imaginist.com/)\nggplotly(): Convert a ggplot2 object to an interactive plotly object and save it as an HTML file.\n\n\n\nGeoms\nThere are many different geoms (i.e. types of plots). This website will cover a few of the most commonly used ones.\n\ngeom_bar(): Bar chart.\ngeom_histogram(): histogram.\ngeom_line(): Line graph.\ngeom_point(): Scatter plot.\ngeom_boxplot(): Box and whisker plot.\n\n\n\nCustomisation\n\nLabels: Modifying labels on the axes, legend, and other plot labels.\nScale values: How to modify the scale of the x and y axis (e.g. plot values as log10 values or square root values)\nColour scales: How to set the colours for aesthetics.\nFacetting: Creation of multiple of the same type of plot by subsetting the visualised data by one or two metadata categories.\nAbline: Adding a straight line to a plot and its corresponding y=mx+c equation.\nCoordinate systems: Modify how the x and y aesthetics combine.",
    "crumbs": [
      "Ggplot2"
    ]
  },
  {
    "objectID": "stringr/cheatsheets.html",
    "href": "stringr/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Stringr",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "purrr/cheatsheets.html",
    "href": "purrr/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Purrr",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NEOF Tidyverse",
    "section": "",
    "text": "This is a resource for the R Tidyverse suite of packages. It is intended as a quick one-stop reference for the various tidyverse packages and their functions, also known as a cookbook.\nThis website does not go into great details rather it provides:\nThis webpage is split into sections for each of the main packages in tidyverse. These are:",
    "crumbs": [
      "Overview",
      "NEOF Tidyverse"
    ]
  },
  {
    "objectID": "index.html#reading-order",
    "href": "index.html#reading-order",
    "title": "NEOF Tidyverse",
    "section": "Reading order",
    "text": "Reading order\nIf you are starting out with Tidyverse I recommend reading through the website in the above order. The above sections can be grouped into the following chapters:\n\nFundamental Tidyverse: tibble, dplyr, and readr.\nPlot generation: tidyr & ggplot2.\nMiscellaneous: stringr, forcats, purrr, and lubridate.",
    "crumbs": [
      "Overview",
      "NEOF Tidyverse"
    ]
  },
  {
    "objectID": "index.html#package-names",
    "href": "index.html#package-names",
    "title": "NEOF Tidyverse",
    "section": "Package names",
    "text": "Package names\nTo keep consistent we will include the package name of each function used in code. This is carried out like below.\nNote: Don’t run the below command\n\n#Use as_tibble function from tibble package\ntibble::as_tibble()",
    "crumbs": [
      "Overview",
      "NEOF Tidyverse"
    ]
  },
  {
    "objectID": "index.html#installation-loading",
    "href": "index.html#installation-loading",
    "title": "NEOF Tidyverse",
    "section": "Installation & loading",
    "text": "Installation & loading\nEnsure you have tidyverse installed and loaded before running commands within the rest of these materials.\nYou can install all the tidyverse packages with the following command:\n\ninstall.packages(\"tidyverse\")\n\nOnce installed you can load the package suite:\n\nlibrary(\"tidyverse\")",
    "crumbs": [
      "Overview",
      "NEOF Tidyverse"
    ]
  },
  {
    "objectID": "index.html#external-links",
    "href": "index.html#external-links",
    "title": "NEOF Tidyverse",
    "section": "External links",
    "text": "External links\n\nTidyverse homepage\nCheatsheets\nR for Data Science (2e): If you want a more structured course this is a good place to start.\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.",
    "crumbs": [
      "Overview",
      "NEOF Tidyverse"
    ]
  },
  {
    "objectID": "dplyr/distinct.html",
    "href": "dplyr/distinct.html",
    "title": "Distinct",
    "section": "",
    "text": "The dplyr::distinct() function extracts unique/distinct rows from a tibble.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Distinct"
    ]
  },
  {
    "objectID": "dplyr/distinct.html#dataset",
    "href": "dplyr/distinct.html#dataset",
    "title": "Distinct",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load and subset the knz_bison data from the lterdatasampler package (hyperlink includes install instructions). This time we will ensure to duplicate rows.\n\n#Load package\nlibrary(\"lterdatasampler\")\n#Subset of knz_bison tibble for demonstration\nbison_tbl &lt;- lterdatasampler::knz_bison |&gt;\n    #Convert to tibble\n    tibble::as_tibble() |&gt;\n    #Slice rows to get 1:5 duplicated once\n    dplyr::slice(c(1,1,2,2,3,3,4,4,5,5))\nbison_tbl\n\n# A tibble: 10 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 813         F                    890\n 2 CBH01         1994        11       8 813         F                    890\n 3 CBH01         1994        11       8 834         F                   1074\n 4 CBH01         1994        11       8 834         F                   1074\n 5 CBH01         1994        11       8 B-301       F                   1060\n 6 CBH01         1994        11       8 B-301       F                   1060\n 7 CBH01         1994        11       8 B-402       F                    989\n 8 CBH01         1994        11       8 B-402       F                    989\n 9 CBH01         1994        11       8 B-403       F                   1062\n10 CBH01         1994        11       8 B-403       F                   1062\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Distinct"
    ]
  },
  {
    "objectID": "dplyr/distinct.html#extract-unique-rows",
    "href": "dplyr/distinct.html#extract-unique-rows",
    "title": "Distinct",
    "section": "Extract unique rows",
    "text": "Extract unique rows\nExtract the unique rows.\n\ndplyr::distinct(bison_tbl)\n\n# A tibble: 5 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         1994        11       8 813         F                    890\n2 CBH01         1994        11       8 834         F                   1074\n3 CBH01         1994        11       8 B-301       F                   1060\n4 CBH01         1994        11       8 B-402       F                    989\n5 CBH01         1994        11       8 B-403       F                   1062\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Distinct"
    ]
  },
  {
    "objectID": "dplyr/bind_tibbles.html",
    "href": "dplyr/bind_tibbles.html",
    "title": "Bind tibbles",
    "section": "",
    "text": "Tibbles can be bound together to create a new tibble with:\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Bind tibbles"
    ]
  },
  {
    "objectID": "dplyr/bind_tibbles.html#create-example-tibbles",
    "href": "dplyr/bind_tibbles.html#create-example-tibbles",
    "title": "Bind tibbles",
    "section": "Create example tibbles",
    "text": "Create example tibbles\nBefore demonstrating various examples we will create a few tibbles.\n\nnum_tbl &lt;- tibble::tibble(x = 1:3, y = 4:6, z = 7:9)\nnum_tbl_2 &lt;- tibble::tibble(aa = 11:13, ab = 14:16, ac = 17:19)\nnum_tbl_3 &lt;- tibble::tibble(x = 4:6, y = 7:9, z = 10:12)",
    "crumbs": [
      "Dplyr",
      "Bind tibbles"
    ]
  },
  {
    "objectID": "dplyr/bind_tibbles.html#bind-by-columns",
    "href": "dplyr/bind_tibbles.html#bind-by-columns",
    "title": "Bind tibbles",
    "section": "Bind by columns",
    "text": "Bind by columns\n\n\n\nBind 2 or more tibbles by columns. In other words you will end up with more columns and the same amount of rows.\nWe will bind the two following tibbles by columns.\nNote that the two tibbles must have the same amount of rows. Additionally, they should have completely unique column names compared to each other.\n\nnum_tbl\n\n# A tibble: 3 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7\n2     2     5     8\n3     3     6     9\n\n\n\nnum_tbl_2\n\n# A tibble: 3 × 3\n     aa    ab    ac\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1    11    14    17\n2    12    15    18\n3    13    16    19\n\n\nColumn bind\n\nnum_tbl_col_bound &lt;- dplyr::bind_cols(num_tbl, num_tbl_2)\nnum_tbl_col_bound\n\n# A tibble: 3 × 6\n      x     y     z    aa    ab    ac\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7    11    14    17\n2     2     5     8    12    15    18\n3     3     6     9    13    16    19",
    "crumbs": [
      "Dplyr",
      "Bind tibbles"
    ]
  },
  {
    "objectID": "dplyr/bind_tibbles.html#bind-by-rows",
    "href": "dplyr/bind_tibbles.html#bind-by-rows",
    "title": "Bind tibbles",
    "section": "Bind by rows",
    "text": "Bind by rows\n\n\n\nBind 2 or more tibbles by rows with dplyr::bind_rows(). In other words you will end up with more rows and the same amount of columns.\nWe will bind the two following tibbles by rows.\nNote that the two tibbles must have the same amount of columns. Additionally, they should have the same column names.\n\nnum_tbl\n\n# A tibble: 3 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7\n2     2     5     8\n3     3     6     9\n\n\n\nnum_tbl_3\n\n# A tibble: 3 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     4     7    10\n2     5     8    11\n3     6     9    12\n\n\nRow bind\n\nnum_tbl_row_bound &lt;- dplyr::bind_rows(num_tbl, num_tbl_3)\nnum_tbl_row_bound\n\n# A tibble: 6 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7\n2     2     5     8\n3     3     6     9\n4     4     7    10\n5     5     8    11\n6     6     9    12",
    "crumbs": [
      "Dplyr",
      "Bind tibbles"
    ]
  },
  {
    "objectID": "dplyr/pipes.html",
    "href": "dplyr/pipes.html",
    "title": "Pipes",
    "section": "",
    "text": "The preferred method when using dplyr and other tidyverse package functions is to use pipes.\nThe tidyverse pipe symbol is |&gt; (historically it was %&gt;%).\nPipes allow you to more easily combine multiple functions together with a logical flow. A big advantage of pipes is that they are generally easier to read compared to nesting functions within each other.\nThis page will give a brief introduction to pipes using various functions that are covered in other pages of this section. Other pages will demonstrate further examples of pipes.",
    "crumbs": [
      "Dplyr",
      "Pipes"
    ]
  },
  {
    "objectID": "dplyr/pipes.html#dataset",
    "href": "dplyr/pipes.html#dataset",
    "title": "Pipes",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the hbr_maples data from the lterdatasampler package (hyperlink includes install instructions).\nNote: When piping, the first variable of the post pipe function is the piped data/object.\n\n#Load package\nlibrary(\"lterdatasampler\")\n#hbr_maples tibble for demonstration\nmaples_tbl &lt;- tibble::as_tibble(lterdatasampler::hbr_maples)\nmaples_tbl\n\n# A tibble: 359 × 11\n    year watershed elevation transect sample stem_length leaf1area leaf2area\n   &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n 2  2003 Reference Low       R1       2            114       14.6      15.3 \n 3  2003 Reference Low       R1       3             83.5     12.5       9.73\n 4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n 5  2003 Reference Low       R1       5             72.1      6.84      5.48\n 6  2003 Reference Low       R1       6             77.7      9.66      7.64\n 7  2003 Reference Low       R1       7             85.5      8.82      9.23\n 8  2003 Reference Low       R1       8             81.6      5.83      6.18\n 9  2003 Reference Low       R1       9             92.9      8.11      7.13\n10  2003 Reference Low       R1       10            59.6      3.02      3.44\n# ℹ 349 more rows\n# ℹ 3 more variables: leaf_dry_mass &lt;dbl&gt;, stem_dry_mass &lt;dbl&gt;,\n#   corrected_leaf_area &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Pipes"
    ]
  },
  {
    "objectID": "dplyr/pipes.html#one-step-pipe",
    "href": "dplyr/pipes.html#one-step-pipe",
    "title": "Pipes",
    "section": "One step pipe",
    "text": "One step pipe\nBelow is a one step pipe command. In it we pipe our tibble maples_tbl into the function slice() to extract rows 1:5.\n\nmaples_tbl |&gt; dplyr::slice(1:5)\n\n# A tibble: 5 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n# ℹ 3 more variables: leaf_dry_mass &lt;dbl&gt;, stem_dry_mass &lt;dbl&gt;,\n#   corrected_leaf_area &lt;dbl&gt;\n\n\nThe above command acts the same as the below.\n\ndplyr::slice(maples_tbl,1:5)\n\n# A tibble: 5 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n# ℹ 3 more variables: leaf_dry_mass &lt;dbl&gt;, stem_dry_mass &lt;dbl&gt;,\n#   corrected_leaf_area &lt;dbl&gt;\n\n\nTo assign the output of piped function you can utilise the assignment operator as usual.\n\nmaples_subset_tbl &lt;- maples_tbl |&gt; dplyr::slice(1:7)\nmaples_subset_tbl\n\n# A tibble: 7 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n6  2003 Reference Low       R1       6             77.7      9.66      7.64\n7  2003 Reference Low       R1       7             85.5      8.82      9.23\n# ℹ 3 more variables: leaf_dry_mass &lt;dbl&gt;, stem_dry_mass &lt;dbl&gt;,\n#   corrected_leaf_area &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Pipes"
    ]
  },
  {
    "objectID": "dplyr/pipes.html#multi-step-pipe",
    "href": "dplyr/pipes.html#multi-step-pipe",
    "title": "Pipes",
    "section": "Multi step pipe",
    "text": "Multi step pipe\nPipes are great when you need to use multiple functions on one object.\nIn the below case we:\n\nExtract rows 1 to 1000 with dplyr::slice()\nThen filter the 1000 rows so we only retain observations/rows where the elevation column value is equal to “Low” with dplyr::filter()\nSelect columns leaf1area and leaf2area with dplyr::select()\nSummarise the resulting tibble with summary()\n\nNote: Pipes are not only limited to tidyverse functions.\n\nmaples_tbl |&gt; \n    #Extract indexes 1 to 1000\n    dplyr::slice(1:1000) |&gt;\n    #Extract only low elevation samples\n    dplyr::filter(elevation == \"Low\") |&gt;\n    #Select the columns leaf1area and leaf2area\n    dplyr::select(c(leaf1area,leaf2area)) |&gt;\n    #Summarise tibble\n    summary()\n\n   leaf1area        leaf2area     \n Min.   : 2.480   Min.   : 3.444  \n 1st Qu.: 9.308   1st Qu.: 9.548  \n Median :12.110   Median :11.891  \n Mean   :12.239   Mean   :12.305  \n 3rd Qu.:15.405   3rd Qu.:15.588  \n Max.   :26.198   Max.   :24.235  \n\n\nLess visually clear method with nested functions.\n\nsummary(dplyr::select(dplyr::filter(dplyr::slice(maples_tbl,1:1000),elevation==\"Low\"),c(leaf1area,leaf2area)))\n\n   leaf1area        leaf2area     \n Min.   : 2.480   Min.   : 3.444  \n 1st Qu.: 9.308   1st Qu.: 9.548  \n Median :12.110   Median :11.891  \n Mean   :12.239   Mean   :12.305  \n 3rd Qu.:15.405   3rd Qu.:15.588  \n Max.   :26.198   Max.   :24.235",
    "crumbs": [
      "Dplyr",
      "Pipes"
    ]
  },
  {
    "objectID": "dplyr/cheatsheets.html",
    "href": "dplyr/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Dplyr",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "dplyr/filter.html",
    "href": "dplyr/filter.html",
    "title": "Filter",
    "section": "",
    "text": "The dplyr::filter() function can be used to extract rows that meet a certain condition.\nThis can be a useful method to:\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#dataset",
    "href": "dplyr/filter.html#dataset",
    "title": "Filter",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the knz_bison data from the lterdatasampler package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"lterdatasampler\")\n#knz_bison tibble for demonstration\nbison_tbl &lt;- lterdatasampler::knz_bison |&gt;\n    #Convert to tibble\n    tibble::as_tibble()\nbison_tbl\n\n# A tibble: 8,325 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 813         F                    890\n 2 CBH01         1994        11       8 834         F                   1074\n 3 CBH01         1994        11       8 B-301       F                   1060\n 4 CBH01         1994        11       8 B-402       F                    989\n 5 CBH01         1994        11       8 B-403       F                   1062\n 6 CBH01         1994        11       8 B-502       F                    978\n 7 CBH01         1994        11       8 B-503       F                   1068\n 8 CBH01         1994        11       8 B-504       F                   1024\n 9 CBH01         1994        11       8 B-601       F                    978\n10 CBH01         1994        11       8 B-602       F                   1188\n# ℹ 8,315 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#numeric-columns",
    "href": "dplyr/filter.html#numeric-columns",
    "title": "Filter",
    "section": "Numeric columns",
    "text": "Numeric columns\nFilter the tibble to only contain rows/observations from the year 2000 and onwards (&gt;2000).\n\nbison_tbl |&gt; dplyr::filter(rec_year &gt; 2000)\n\n# A tibble: 6,939 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         2001        11      14 A1          F                    824\n 2 CBH01         2001        11      14 A11         F                   1030\n 3 CBH01         2001        11      14 A12         F                    984\n 4 CBH01         2001        11      14 A13         F                    986\n 5 CBH01         2001        11      14 A14         F                    978\n 6 CBH01         2001        11      14 A15         F                   1052\n 7 CBH01         2001        11      14 A16         F                   1010\n 8 CBH01         2001        11      14 A17         F                    992\n 9 CBH01         2001        11      14 A18         F                    960\n10 CBH01         2001        11      14 A19         F                    960\n# ℹ 6,929 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#string-columns",
    "href": "dplyr/filter.html#string-columns",
    "title": "Filter",
    "section": "String columns",
    "text": "String columns\nFilter the tibble to only contain male observations.\n\nbison_tbl |&gt; dplyr::filter(animal_sex == \"M\")\n\n# A tibble: 3,040 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 910         M                    982\n 2 CBH01         1994        11       8 91C         M                   1020\n 3 CBH01         1994        11       8 91F         M                   1050\n 4 CBH01         1994        11       8 91H         M                   1037\n 5 CBH01         1994        11       8 91J         M                   1104\n 6 CBH01         1994        11       8 91K         M                   1306\n 7 CBH01         1994        11       8 91L         M                   1122\n 8 CBH01         1994        11       8 91M         M                   1136\n 9 CBH01         1994        11       8 91P         M                    996\n10 CBH01         1994        11       8 91W         M                    954\n# ℹ 3,030 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#multiple-columns",
    "href": "dplyr/filter.html#multiple-columns",
    "title": "Filter",
    "section": "Multiple columns",
    "text": "Multiple columns\nYou can filter based on multiple columns with logical operators.\nThe 2 main R logical operators are:\n\n&: and (ampersand symbol)\n|: or (pipe symbol)\n\nExtract females that have a weight greater or equal to 1000 pounds.\n\nbison_tbl |&gt; dplyr::filter(animal_sex == \"F\" & animal_weight &gt;= 1000)\n\n# A tibble: 1,215 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 834         F                   1074\n 2 CBH01         1994        11       8 B-301       F                   1060\n 3 CBH01         1994        11       8 B-403       F                   1062\n 4 CBH01         1994        11       8 B-503       F                   1068\n 5 CBH01         1994        11       8 B-504       F                   1024\n 6 CBH01         1994        11       8 B-602       F                   1188\n 7 CBH01         1994        11       8 B-701       F                   1030\n 8 CBH01         1994        11       8 B-704       F                   1030\n 9 CBH01         1994        11       8 B-706       F                   1108\n10 CBH01         1994        11       8 884         F                   1046\n# ℹ 1,205 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;\n\n\nExtract males or samples with a weight less than 900 pounds.\n\nbison_tbl |&gt; dplyr::filter(animal_sex == \"M\" | animal_weight &lt; 900)\n\n# A tibble: 5,982 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 813         F                    890\n 2 CBH01         1994        11       8 B-905       F                    828\n 3 CBH01         1994        11       8 B-909       F                    812\n 4 CBH01         1994        11       8 W-008       F                    884\n 5 CBH01         1994        11       8 910         M                    982\n 6 CBH01         1994        11       8 91C         M                   1020\n 7 CBH01         1994        11       8 91F         M                   1050\n 8 CBH01         1994        11       8 91H         M                   1037\n 9 CBH01         1994        11       8 91J         M                   1104\n10 CBH01         1994        11       8 91K         M                   1306\n# ℹ 5,972 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#pipes",
    "href": "dplyr/filter.html#pipes",
    "title": "Filter",
    "section": "Pipes",
    "text": "Pipes\nYou can use pipes for finer control of multiple comparisons.\nThe below command carries out the following filtering steps in order:\n\nExtract females.\nExtract observations with animal weight between 900 and 1100.\nExtract samples from the year 2000.\n\n\nbison_tbl |&gt; \n    #Filter to retain females\n    dplyr::filter(animal_sex == \"F\") |&gt;\n    #Filter to retain samples with animal_weight between 900 and 1100\n    dplyr::filter(animal_weight &gt; 900 & animal_weight &lt; 1000) |&gt;\n    #Retain samples from year 2000\n    dplyr::filter(rec_year == 2000)\n\n# A tibble: 39 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         2000        11      16 A11         F                    976\n 2 CBH01         2000        11      16 A14         F                    930\n 3 CBH01         2000        11      16 A16         F                    952\n 4 CBH01         2000        11      16 A17         F                    964\n 5 CBH01         2000        11      16 A18         F                    904\n 6 CBH01         2000        11      16 A2          F                    910\n 7 CBH01         2000        11      16 A22         F                    992\n 8 CBH01         2000        11      16 A27         F                    970\n 9 CBH01         2000        11      16 A28         F                    902\n10 CBH01         2000        11      16 A6          F                    992\n# ℹ 29 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/filter.html#na-removal",
    "href": "dplyr/filter.html#na-removal",
    "title": "Filter",
    "section": "NA removal",
    "text": "NA removal\nFor removal of NAs please see the tidyr drop NA page.",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Filter"
    ]
  },
  {
    "objectID": "dplyr/pull.html",
    "href": "dplyr/pull.html",
    "title": "Pull",
    "section": "",
    "text": "The function dplyr::pull() pull a single column as a vector. This is useful if you need to pipe (|&gt;) a column as a vector into another function.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Pull"
    ]
  },
  {
    "objectID": "dplyr/pull.html#dataset",
    "href": "dplyr/pull.html#dataset",
    "title": "Pull",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::mammal_sleep_tbl\n\n# A tibble: 62 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6.65e+3   5.71           NA       NA           3.3      38.6\n 2 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 3 ArcticFox        3.38e+0   0.0445         NA       NA          12.5      14  \n 4 Arcticgroundsqu… 9.2 e-1   0.0057         NA       NA          16.5      NA  \n 5 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 6 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 7 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 8 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 9 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n10 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n# ℹ 52 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Pull"
    ]
  },
  {
    "objectID": "dplyr/pull.html#a-single-column-to-a-vector",
    "href": "dplyr/pull.html#a-single-column-to-a-vector",
    "title": "Pull",
    "section": "A single column to a vector",
    "text": "A single column to a vector\nPull the column “species” to a vector.\n\nmammal_sleep_tbl |&gt; dplyr::pull(species)\n\n [1] \"Africanelephant\"         \"Africangiantpouchedrat\" \n [3] \"ArcticFox\"               \"Arcticgroundsquirrel\"   \n [5] \"Asianelephant\"           \"Baboon\"                 \n [7] \"Bigbrownbat\"             \"Braziliantapir\"         \n [9] \"Cat\"                     \"Chimpanzee\"             \n[11] \"Chinchilla\"              \"Cow\"                    \n[13] \"Deserthedgehog\"          \"Donkey\"                 \n[15] \"EasternAmericanmole\"     \"Echidna\"                \n[17] \"Europeanhedgehog\"        \"Galago\"                 \n[19] \"Genet\"                   \"Giantarmadillo\"         \n[21] \"Giraffe\"                 \"Goat\"                   \n[23] \"Goldenhamster\"           \"Gorilla\"                \n[25] \"Grayseal\"                \"Graywolf\"               \n[27] \"Groundsquirrel\"          \"Guineapig\"              \n[29] \"Horse\"                   \"Jaguar\"                 \n[31] \"Kangaroo\"                \"Lessershort-tailedshrew\"\n[33] \"Littlebrownbat\"          \"Man\"                    \n[35] \"Molerat\"                 \"Mountainbeaver\"         \n[37] \"Mouse\"                   \"Muskshrew\"              \n[39] \"NAmericanopossum\"        \"Nine-bandedarmadillo\"   \n[41] \"Okapi\"                   \"Owlmonkey\"              \n[43] \"Patasmonkey\"             \"Phanlanger\"             \n[45] \"Pig\"                     \"Rabbit\"                 \n[47] \"Raccoon\"                 \"Rat\"                    \n[49] \"Redfox\"                  \"Rhesusmonkey\"           \n[51] \"Rockhyrax(Heterob)\"      \"Rockhyrax(Procaviahab)\" \n[53] \"Roedeer\"                 \"Sheep\"                  \n[55] \"Slowloris\"               \"Starnosedmole\"          \n[57] \"Tenrec\"                  \"Treehyrax\"              \n[59] \"Treeshrew\"               \"Vervet\"                 \n[61] \"Wateropossum\"            \"Yellow-belliedmarmot\"   \n\n\nPull the column “total_sleep” to a vector and calculate the mean value.\nNote: Requires dplyr::filter(!is.na(total_sleep)) as if any NAs are passed to mean() the result will be NA.\n\nmammal_sleep_tbl |&gt; dplyr::filter(!is.na(total_sleep)) |&gt; dplyr::pull(total_sleep) |&gt; mean()\n\n[1] 10.53276",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Pull"
    ]
  },
  {
    "objectID": "dplyr/slice.html",
    "href": "dplyr/slice.html",
    "title": "Slice",
    "section": "",
    "text": "The dplyr:slice() function can be used to subset row.\nTheir are multiple slice commands:\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Slice"
    ]
  },
  {
    "objectID": "dplyr/slice.html#dataset",
    "href": "dplyr/slice.html#dataset",
    "title": "Slice",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the knz_bison data from the lterdatasampler package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"lterdatasampler\")\n#knz_bison tibble for demonstration\nbison_tbl &lt;- lterdatasampler::knz_bison |&gt;\n    #Convert to tibble\n    tibble::as_tibble()\nbison_tbl\n\n# A tibble: 8,325 × 8\n   data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n 1 CBH01         1994        11       8 813         F                    890\n 2 CBH01         1994        11       8 834         F                   1074\n 3 CBH01         1994        11       8 B-301       F                   1060\n 4 CBH01         1994        11       8 B-402       F                    989\n 5 CBH01         1994        11       8 B-403       F                   1062\n 6 CBH01         1994        11       8 B-502       F                    978\n 7 CBH01         1994        11       8 B-503       F                   1068\n 8 CBH01         1994        11       8 B-504       F                   1024\n 9 CBH01         1994        11       8 B-601       F                    978\n10 CBH01         1994        11       8 B-602       F                   1188\n# ℹ 8,315 more rows\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Slice"
    ]
  },
  {
    "objectID": "dplyr/slice.html#slice",
    "href": "dplyr/slice.html#slice",
    "title": "Slice",
    "section": "Slice",
    "text": "Slice\nThe base slice() function is incredibly similar to normal indexing of a tibble/data.frame. Its main advantage is that it can be more easily used with pipes.\nExtract rows 1 to 5.\n\nbison_tbl |&gt; dplyr::slice(1:5)\n\n# A tibble: 5 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         1994        11       8 813         F                    890\n2 CBH01         1994        11       8 834         F                   1074\n3 CBH01         1994        11       8 B-301       F                   1060\n4 CBH01         1994        11       8 B-402       F                    989\n5 CBH01         1994        11       8 B-403       F                   1062\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Slice"
    ]
  },
  {
    "objectID": "dplyr/slice.html#head-and-tail",
    "href": "dplyr/slice.html#head-and-tail",
    "title": "Slice",
    "section": "Head and tail",
    "text": "Head and tail\nExtract the first 6 rows.\n\nbison_tbl |&gt; dplyr::slice_head(n=6)\n\n# A tibble: 6 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         1994        11       8 813         F                    890\n2 CBH01         1994        11       8 834         F                   1074\n3 CBH01         1994        11       8 B-301       F                   1060\n4 CBH01         1994        11       8 B-402       F                    989\n5 CBH01         1994        11       8 B-403       F                   1062\n6 CBH01         1994        11       8 B-502       F                    978\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;\n\n\nExtract the last 4 rows.\n\nbison_tbl |&gt; dplyr::slice_tail(n=4)\n\n# A tibble: 4 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         2020        10      29 P-080       F                    330\n2 CBH01         2020        10      29 P-081       M                    350\n3 CBH01         2020        10      29 P-082       F                    265\n4 CBH01         2020        10      29 P-083       M                    370\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Slice"
    ]
  },
  {
    "objectID": "dplyr/slice.html#max-and-min",
    "href": "dplyr/slice.html#max-and-min",
    "title": "Slice",
    "section": "Max and min",
    "text": "Max and min\nExtract the 3 observations with the highest animal_weight.\n\nbison_tbl |&gt; dplyr::slice_max(animal_weight, n=3)\n\n# A tibble: 3 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         2006        11       6 W-927       M                   2050\n2 CBH01         2005        11       7 W-927       M                   1894\n3 CBH01         1995        11       6 114         M                   1892\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;\n\n\nExtract the 9 observations with the lowest animal_weight.\n\nbison_tbl |&gt; dplyr::slice_min(animal_weight, n=9)\n\n# A tibble: 9 × 8\n  data_code rec_year rec_month rec_day animal_code animal_sex animal_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n1 CBH01         2003        11      13 Y-3100      F                     90\n2 CBH01         2003        11      13 Y-3101      M                    100\n3 CBH01         1997        10      31 W-706       F                    112\n4 CBH01         1996        10      25 W-617       F                    118\n5 CBH01         2019        10      24 O-9104      F                    120\n6 CBH01         2004        11      18 Y-432       F                    126\n7 CBH01         1994        11       8 W-437       F                    132\n8 CBH01         2004        11      18 Y-417       F                    134\n9 CBH01         2006        11       6 Y-646       M                    134\n# ℹ 1 more variable: animal_yob &lt;dbl&gt;",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Slice"
    ]
  },
  {
    "objectID": "dplyr/relocate.html",
    "href": "dplyr/relocate.html",
    "title": "Relocate",
    "section": "",
    "text": "The function dplyr::relocate() can change the order of columns.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#dataset",
    "href": "dplyr/relocate.html#dataset",
    "title": "Relocate",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions). For easier viewing we’ll subset it so it only has 5 rows.\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmammal_sleep_tbl&lt;- mgrtibbles::mammal_sleep_tbl |&gt; \n    #Slice to extract rows 1:5\n    dplyr::slice(1:5)\nmammal_sleep_tbl\n\n# A tibble: 5 × 11\n  species body_wt brain_wt non_dreaming dreaming total_sleep life_span gestation\n  &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa… 6654      5.71           NA       NA           3.3      38.6       645\n2 Africa…    1      0.0066          6.3      2           8.3       4.5        42\n3 Arctic…    3.38   0.0445         NA       NA          12.5      14          60\n4 Arctic…    0.92   0.0057         NA       NA          16.5      NA          25\n5 Asiane… 2547      4.60            2.1      1.8         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#relocate-to-first-column",
    "href": "dplyr/relocate.html#relocate-to-first-column",
    "title": "Relocate",
    "section": "Relocate to first column",
    "text": "Relocate to first column\nRelocating a column to the first column is the default behaviour of dplyr::relocate()\nRelocate column “body_wt” to first column.\n\nmammal_sleep_tbl |&gt; dplyr::relocate(body_wt)\n\n# A tibble: 5 × 11\n  body_wt species brain_wt non_dreaming dreaming total_sleep life_span gestation\n    &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 6654    Africa…   5.71           NA       NA           3.3      38.6       645\n2    1    Africa…   0.0066          6.3      2           8.3       4.5        42\n3    3.38 Arctic…   0.0445         NA       NA          12.5      14          60\n4    0.92 Arctic…   0.0057         NA       NA          16.5      NA          25\n5 2547    Asiane…   4.60            2.1      1.8         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#relocate-after-another-column",
    "href": "dplyr/relocate.html#relocate-after-another-column",
    "title": "Relocate",
    "section": "Relocate after another column",
    "text": "Relocate after another column\nRelocate the body_wt column after the brain_wt column with the .after= option.\n\nmammal_sleep_tbl |&gt; dplyr::relocate(body_wt, .after=brain_wt)\n\n# A tibble: 5 × 11\n  species brain_wt body_wt non_dreaming dreaming total_sleep life_span gestation\n  &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa…   5.71   6654            NA       NA           3.3      38.6       645\n2 Africa…   0.0066    1             6.3      2           8.3       4.5        42\n3 Arctic…   0.0445    3.38         NA       NA          12.5      14          60\n4 Arctic…   0.0057    0.92         NA       NA          16.5      NA          25\n5 Asiane…   4.60   2547             2.1      1.8         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#relocate-before-another-column",
    "href": "dplyr/relocate.html#relocate-before-another-column",
    "title": "Relocate",
    "section": "Relocate before another column",
    "text": "Relocate before another column\nRelocate the dreaming column before the non_dreaming column with the .before= option.\n\nmammal_sleep_tbl |&gt; dplyr::relocate(dreaming, .before=non_dreaming)\n\n# A tibble: 5 × 11\n  species body_wt brain_wt dreaming non_dreaming total_sleep life_span gestation\n  &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa… 6654      5.71       NA           NA           3.3      38.6       645\n2 Africa…    1      0.0066      2            6.3         8.3       4.5        42\n3 Arctic…    3.38   0.0445     NA           NA          12.5      14          60\n4 Arctic…    0.92   0.0057     NA           NA          16.5      NA          25\n5 Asiane… 2547      4.60        1.8          2.1         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#relocate-a-column-to-the-last-column",
    "href": "dplyr/relocate.html#relocate-a-column-to-the-last-column",
    "title": "Relocate",
    "section": "Relocate a column to the last column",
    "text": "Relocate a column to the last column\nUse the last_col() helper function as the .after() option to move the predation column to the last column.\n\nmammal_sleep_tbl |&gt; \n    #Select columns predation to danger\n    dplyr::select(predation:danger) |&gt;\n    #Relocate predation to last column\n    dplyr::relocate(predation, .after=last_col())\n\n# A tibble: 5 × 3\n  exposure danger predation\n  &lt;fct&gt;    &lt;fct&gt;  &lt;fct&gt;    \n1 5        3      3        \n2 1        3      3        \n3 1        1      1        \n4 2        3      5        \n5 5        4      3",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "dplyr/relocate.html#relocate-all-columns-of-a-certain-data-type",
    "href": "dplyr/relocate.html#relocate-all-columns-of-a-certain-data-type",
    "title": "Relocate",
    "section": "Relocate all columns of a certain data type",
    "text": "Relocate all columns of a certain data type\nRelocate all numeric (integer and floats) columns to start of tibble. This utilises the where() function.\n\nmammal_sleep_tbl |&gt; dplyr::relocate(where(is.numeric))\n\n# A tibble: 5 × 11\n  body_wt brain_wt non_dreaming dreaming total_sleep life_span gestation species\n    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 6654      5.71           NA       NA           3.3      38.6       645 Africa…\n2    1      0.0066          6.3      2           8.3       4.5        42 Africa…\n3    3.38   0.0445         NA       NA          12.5      14          60 Arctic…\n4    0.92   0.0057         NA       NA          16.5      NA          25 Arctic…\n5 2547      4.60            2.1      1.8         3.9      69         624 Asiane…\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;\n\n\nRelocate all factor columns after the species column.\n\nmammal_sleep_tbl |&gt; dplyr::relocate(where(is.factor), .after=species)\n\n# A tibble: 5 × 11\n  species       predation exposure danger body_wt brain_wt non_dreaming dreaming\n  &lt;chr&gt;         &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n1 Africaneleph… 3         5        3      6654      5.71           NA       NA  \n2 Africangiant… 3         1        3         1      0.0066          6.3      2  \n3 ArcticFox     1         1        1         3.38   0.0445         NA       NA  \n4 Arcticground… 5         2        3         0.92   0.0057         NA       NA  \n5 Asianelephant 3         5        4      2547      4.60            2.1      1.8\n# ℹ 3 more variables: total_sleep &lt;dbl&gt;, life_span &lt;dbl&gt;, gestation &lt;dbl&gt;\n\n\nRelocate all character (string) columns to the end.\n\nmammal_sleep_tbl |&gt; \n    #Relocate string columns to end\n    dplyr::relocate(where(is.character), .after=last_col()) |&gt;\n    #Select last five columns\n    dplyr::select(last_col(4):last_col())\n\n# A tibble: 5 × 5\n  gestation predation exposure danger species               \n      &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;  &lt;chr&gt;                 \n1       645 3         5        3      Africanelephant       \n2        42 3         1        3      Africangiantpouchedrat\n3        60 1         1        1      ArcticFox             \n4        25 5         2        3      Arcticgroundsquirrel  \n5       624 3         5        4      Asianelephant",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Relocate"
    ]
  },
  {
    "objectID": "lubridate/lubridate.html",
    "href": "lubridate/lubridate.html",
    "title": "Lubridate",
    "section": "",
    "text": "Lubridate is a useful package to manipulate the date class.\nlubridate homepage\nMG ONCE YOU ADD INFO ABOUT DATE CLASS ADD LINK TO IT IN /tibble/structure.qmd",
    "crumbs": [
      "Lubridate"
    ]
  },
  {
    "objectID": "lubridate/cheatsheets.html",
    "href": "lubridate/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Lubridate",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "dplyr/group_by.html",
    "href": "dplyr/group_by.html",
    "title": "Group by",
    "section": "",
    "text": "The function group_by() converts a tibble into a grouped tbl. The grouping is based on one or more specified columns/variables.\nThis allows you to carry out various functions in a groupwise manner. These functions are covered in other pages in this section.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Group by"
    ]
  },
  {
    "objectID": "dplyr/group_by.html#dataset",
    "href": "dplyr/group_by.html#dataset",
    "title": "Group by",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the amphibian_div_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#amphibian_div_tbl tibble for demonstration\nmgrtibbles::amphibian_div_tbl\n\n# A tibble: 138 × 15\n   Species                  IUCN.Red.List.Status iucn_2cat Order   Family  Genus\n   &lt;chr&gt;                    &lt;fct&gt;                &lt;fct&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;\n 1 Acris blanchardi         &lt;NA&gt;                 &lt;NA&gt;      Anura   Hylidae Acris\n 2 Acris crepitans          Least Concern (LC)   LC        Anura   Hylidae Acris\n 3 Acris gryllus            Least Concern (LC)   LC        Anura   Hylidae Acris\n 4 Ambystoma barbouri       Near Threatened (NT) nonLC     Caudata Ambyst… Amby…\n 5 Ambystoma jeffersonianum Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 6 Ambystoma laterale       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 7 Ambystoma macrodactylum  Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 8 Ambystoma maculatum      Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 9 Ambystoma texanum        Least Concern (LC)   LC        Caudata Ambyst… Amby…\n10 Ambystoma tigrinum       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n# ℹ 128 more rows\n# ℹ 9 more variables: Age_at_maturity_min_y &lt;dbl&gt;, Age_at_maturity_max_y &lt;dbl&gt;,\n#   Body_size_mm &lt;dbl&gt;, Longevity_max_y &lt;dbl&gt;, Litter_size_min_n &lt;dbl&gt;,\n#   Litter_size_max_n &lt;dbl&gt;, Offspring_size_min_mm &lt;dbl&gt;,\n#   Offspring_size_max_mm &lt;fct&gt;, Development &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Group by"
    ]
  },
  {
    "objectID": "dplyr/group_by.html#one-variablecolumn",
    "href": "dplyr/group_by.html#one-variablecolumn",
    "title": "Group by",
    "section": "One variable/column",
    "text": "One variable/column\nGroup by one variable/column.\nThe grouped tibble’s second top line of info states the grouping and the number of different items in the group ([]).\n\namphibian_div_tbl |&gt; dplyr::group_by(IUCN.Red.List.Status)\n\n# A tibble: 138 × 15\n# Groups:   IUCN.Red.List.Status [7]\n   Species                  IUCN.Red.List.Status iucn_2cat Order   Family  Genus\n   &lt;chr&gt;                    &lt;fct&gt;                &lt;fct&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;\n 1 Acris blanchardi         &lt;NA&gt;                 &lt;NA&gt;      Anura   Hylidae Acris\n 2 Acris crepitans          Least Concern (LC)   LC        Anura   Hylidae Acris\n 3 Acris gryllus            Least Concern (LC)   LC        Anura   Hylidae Acris\n 4 Ambystoma barbouri       Near Threatened (NT) nonLC     Caudata Ambyst… Amby…\n 5 Ambystoma jeffersonianum Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 6 Ambystoma laterale       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 7 Ambystoma macrodactylum  Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 8 Ambystoma maculatum      Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 9 Ambystoma texanum        Least Concern (LC)   LC        Caudata Ambyst… Amby…\n10 Ambystoma tigrinum       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n# ℹ 128 more rows\n# ℹ 9 more variables: Age_at_maturity_min_y &lt;dbl&gt;, Age_at_maturity_max_y &lt;dbl&gt;,\n#   Body_size_mm &lt;dbl&gt;, Longevity_max_y &lt;dbl&gt;, Litter_size_min_n &lt;dbl&gt;,\n#   Litter_size_max_n &lt;dbl&gt;, Offspring_size_min_mm &lt;dbl&gt;,\n#   Offspring_size_max_mm &lt;fct&gt;, Development &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Group by"
    ]
  },
  {
    "objectID": "dplyr/group_by.html#multiple-variablescolumns-into-one-group",
    "href": "dplyr/group_by.html#multiple-variablescolumns-into-one-group",
    "title": "Group by",
    "section": "Multiple variables/columns into one group",
    "text": "Multiple variables/columns into one group\nGroup using multiple columns.\n\namphibian_dv_lineage_group_tbl &lt;- amphibian_div_tbl |&gt; dplyr::group_by(Order, Family, Genus)\namphibian_dv_lineage_group_tbl\n\n# A tibble: 138 × 15\n# Groups:   Order, Family, Genus [26]\n   Species                  IUCN.Red.List.Status iucn_2cat Order   Family  Genus\n   &lt;chr&gt;                    &lt;fct&gt;                &lt;fct&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;\n 1 Acris blanchardi         &lt;NA&gt;                 &lt;NA&gt;      Anura   Hylidae Acris\n 2 Acris crepitans          Least Concern (LC)   LC        Anura   Hylidae Acris\n 3 Acris gryllus            Least Concern (LC)   LC        Anura   Hylidae Acris\n 4 Ambystoma barbouri       Near Threatened (NT) nonLC     Caudata Ambyst… Amby…\n 5 Ambystoma jeffersonianum Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 6 Ambystoma laterale       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 7 Ambystoma macrodactylum  Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 8 Ambystoma maculatum      Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 9 Ambystoma texanum        Least Concern (LC)   LC        Caudata Ambyst… Amby…\n10 Ambystoma tigrinum       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n# ℹ 128 more rows\n# ℹ 9 more variables: Age_at_maturity_min_y &lt;dbl&gt;, Age_at_maturity_max_y &lt;dbl&gt;,\n#   Body_size_mm &lt;dbl&gt;, Longevity_max_y &lt;dbl&gt;, Litter_size_min_n &lt;dbl&gt;,\n#   Litter_size_max_n &lt;dbl&gt;, Offspring_size_min_mm &lt;dbl&gt;,\n#   Offspring_size_max_mm &lt;fct&gt;, Development &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Group by"
    ]
  },
  {
    "objectID": "dplyr/group_by.html#ungroup",
    "href": "dplyr/group_by.html#ungroup",
    "title": "Group by",
    "section": "Ungroup",
    "text": "Ungroup\nIf required you can remove the grouping from a tibble with dplyr::ungroup().\n\namphibian_dv_lineage_group_tbl |&gt; dplyr::ungroup()\n\n# A tibble: 138 × 15\n   Species                  IUCN.Red.List.Status iucn_2cat Order   Family  Genus\n   &lt;chr&gt;                    &lt;fct&gt;                &lt;fct&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;\n 1 Acris blanchardi         &lt;NA&gt;                 &lt;NA&gt;      Anura   Hylidae Acris\n 2 Acris crepitans          Least Concern (LC)   LC        Anura   Hylidae Acris\n 3 Acris gryllus            Least Concern (LC)   LC        Anura   Hylidae Acris\n 4 Ambystoma barbouri       Near Threatened (NT) nonLC     Caudata Ambyst… Amby…\n 5 Ambystoma jeffersonianum Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 6 Ambystoma laterale       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 7 Ambystoma macrodactylum  Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 8 Ambystoma maculatum      Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 9 Ambystoma texanum        Least Concern (LC)   LC        Caudata Ambyst… Amby…\n10 Ambystoma tigrinum       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n# ℹ 128 more rows\n# ℹ 9 more variables: Age_at_maturity_min_y &lt;dbl&gt;, Age_at_maturity_max_y &lt;dbl&gt;,\n#   Body_size_mm &lt;dbl&gt;, Longevity_max_y &lt;dbl&gt;, Litter_size_min_n &lt;dbl&gt;,\n#   Litter_size_max_n &lt;dbl&gt;, Offspring_size_min_mm &lt;dbl&gt;,\n#   Offspring_size_max_mm &lt;fct&gt;, Development &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Group by"
    ]
  },
  {
    "objectID": "dplyr/dplyr.html#overview",
    "href": "dplyr/dplyr.html#overview",
    "title": "Dplyr",
    "section": "Overview",
    "text": "Overview\nDplyr is the main data manipulation package for tibbles in tidyverse.\nDplyr is described as a “grammar of data manipulation” using verbs as the name of its various functions.\ndplyr homepage\nThis website aims to quickly cover the most commonly used dplyr functions and uses. Therefore there are a lot more dplyr functions than those covered here. Please check the below link for the full list.\nFull dplyr reference page",
    "crumbs": [
      "Dplyr"
    ]
  },
  {
    "objectID": "dplyr/dplyr.html#sections",
    "href": "dplyr/dplyr.html#sections",
    "title": "Dplyr",
    "section": "Sections",
    "text": "Sections\nThere are many sections for dplyr. These are summarised below.\n\nPipes\n\n\n  \n\n\nPipes (|&gt;) are a vital part of creating efficient and clear code with tidyverse. Pipes allow you to chain/pipe functions together. It can be used for all functions not just those from tidyverse.\n\n\nRows\n\n\n  \n\n\n  \n\n\n  \n\n\n  \n\n\nThere four main verbs (i.e. functions) to manipulate rows. These are:\n\narrange(): Arrange the rows of a tibble. Can be used to reorder the rows based on the values of a column.\ndistinct(): Extracts unique/distinct rows from a tibble.\nfilter(): Extract rows by filtering with conditions. This can be used to pick rows of certain groups, filter based on numeric sizes, and more.\nslice(): A set of methods to choose a slice of rows based on index positions, top and bottom observations, and min and max values based on a specific column. This is especially useful for piping (|&gt;).\n\n\n\nColumns\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  \n\n\n  \n\n\n  \n\n\nThere six main verbs (i.e. functions) to manipulate columns. These are:\n\nglimpse(): Print a tibble in a transposed manner. Useful for seeing the data types of all the columns.\nmutate(): Mutate columns to create new columns based on existing ones, modify existing columns, and delete columns.\npull(): Pull out a single column from a tibble, resulting in a vector.\nrelocate(): Relocate columns. You can relocate columns to the start or end, and you can move them after or before specified columns.\nrename(): Rename columns in a tibble.\nselect(): Select specific columns of a tibble. Can be used with a variety of helper functions such as starts_with(), ends_with(), contains(), and matches().\n\nIf you would like to carry out one of the column functions with multiple columns you can look at the official documentation for the following functions:\n\nacross(): Operate on multiple columns simultaneously.\npick(): Select a subset of columns.\n\n\n\nGrouping\n\n\n  \n\n\n  \n\n\n  \n\n\nTibbles can be grouped by a specific variable/column or multiple variables/columns. This allows for group wise calculations.\n\ngroup_by(): Converts a tibble to a grouped tibble.\ncount(): Counts the number of instances of each unique value for the grouping in a tibble.\nsummarise(): Produces a tibble with summary information on the group members in a grouped tibble.\n\nVarious functions can be used to calculate various summary information including n(), mean(), median(), sd(), IQR(), first(), last(), and nth().\n\n\n\n\nBind tibbles\n\n\n  \n\n\n  \n\n\nTibbles can be combined/bound together with the following functions:\n\nbind_cols(): Bind 2 tibbles by columns (i.e. bind the tibbles side by side). The two tibbles must have the same number of rows.\nbind_row(): Bind 2 tibbles by rows (i.e. bind one tibble on top of the other ). The two tibbles must have the same column types and names.",
    "crumbs": [
      "Dplyr"
    ]
  },
  {
    "objectID": "dplyr/glimpse.html",
    "href": "dplyr/glimpse.html",
    "title": "Glimpse",
    "section": "",
    "text": "The function dplyr::glimpse() allows you to print tibbles in a transposed manner. This will allow you to view all the columns with their data type and some of the first values.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Glimpse"
    ]
  },
  {
    "objectID": "dplyr/glimpse.html#dataset",
    "href": "dplyr/glimpse.html#dataset",
    "title": "Glimpse",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the and_vertebrates data from the lterdatasampler package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"lterdatasampler\")\n#and_vertebrates tibble for demonstration\nand_vertebrates_tbl &lt;- tibble::as_tibble(lterdatasampler::and_vertebrates)\nand_vertebrates_tbl\n\n# A tibble: 32,209 × 16\n    year sitecode section reach  pass unitnum unittype vert_index pitnumber\n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1  1987 MACKCC-L CC      L         1       1 R                 1        NA\n 2  1987 MACKCC-L CC      L         1       1 R                 2        NA\n 3  1987 MACKCC-L CC      L         1       1 R                 3        NA\n 4  1987 MACKCC-L CC      L         1       1 R                 4        NA\n 5  1987 MACKCC-L CC      L         1       1 R                 5        NA\n 6  1987 MACKCC-L CC      L         1       1 R                 6        NA\n 7  1987 MACKCC-L CC      L         1       1 R                 7        NA\n 8  1987 MACKCC-L CC      L         1       1 R                 8        NA\n 9  1987 MACKCC-L CC      L         1       1 R                 9        NA\n10  1987 MACKCC-L CC      L         1       1 R                10        NA\n# ℹ 32,199 more rows\n# ℹ 7 more variables: species &lt;chr&gt;, length_1_mm &lt;dbl&gt;, length_2_mm &lt;dbl&gt;,\n#   weight_g &lt;dbl&gt;, clip &lt;chr&gt;, sampledate &lt;date&gt;, notes &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Glimpse"
    ]
  },
  {
    "objectID": "dplyr/glimpse.html#glimpse",
    "href": "dplyr/glimpse.html#glimpse",
    "title": "Glimpse",
    "section": "Glimpse",
    "text": "Glimpse\nGlimpse the tibble. This allows you to preview all the columns.\n\nand_vertebrates_tbl |&gt; dplyr::glimpse()\n\nRows: 32,209\nColumns: 16\n$ year        &lt;dbl&gt; 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987…\n$ sitecode    &lt;chr&gt; \"MACKCC-L\", \"MACKCC-L\", \"MACKCC-L\", \"MACKCC-L\", \"MACKCC-L\"…\n$ section     &lt;chr&gt; \"CC\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\"…\n$ reach       &lt;chr&gt; \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"…\n$ pass        &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ unitnum     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2…\n$ unittype    &lt;chr&gt; \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\"…\n$ vert_index  &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, …\n$ pitnumber   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ species     &lt;chr&gt; \"Cutthroat trout\", \"Cutthroat trout\", \"Cutthroat trout\", \"…\n$ length_1_mm &lt;dbl&gt; 58, 61, 89, 58, 93, 86, 107, 131, 103, 117, 100, 127, 99, …\n$ length_2_mm &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ weight_g    &lt;dbl&gt; 1.75, 1.95, 5.60, 2.15, 6.90, 5.90, 10.50, 20.60, 9.55, 13…\n$ clip        &lt;chr&gt; \"NONE\", \"NONE\", \"NONE\", \"NONE\", \"NONE\", \"NONE\", \"NONE\", \"N…\n$ sampledate  &lt;date&gt; 1987-10-07, 1987-10-07, 1987-10-07, 1987-10-07, 1987-10-0…\n$ notes       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Glimpse"
    ]
  },
  {
    "objectID": "dplyr/count.html",
    "href": "dplyr/count.html",
    "title": "Count",
    "section": "",
    "text": "The function count() counts the number of each unique value within one or more variables.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Count"
    ]
  },
  {
    "objectID": "dplyr/count.html#dataset",
    "href": "dplyr/count.html#dataset",
    "title": "Count",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the amphibian_div_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#amphibian_div_tbl tibble for demonstration\nmgrtibbles::amphibian_div_tbl\n\n# A tibble: 138 × 15\n   Species                  IUCN.Red.List.Status iucn_2cat Order   Family  Genus\n   &lt;chr&gt;                    &lt;fct&gt;                &lt;fct&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;\n 1 Acris blanchardi         &lt;NA&gt;                 &lt;NA&gt;      Anura   Hylidae Acris\n 2 Acris crepitans          Least Concern (LC)   LC        Anura   Hylidae Acris\n 3 Acris gryllus            Least Concern (LC)   LC        Anura   Hylidae Acris\n 4 Ambystoma barbouri       Near Threatened (NT) nonLC     Caudata Ambyst… Amby…\n 5 Ambystoma jeffersonianum Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 6 Ambystoma laterale       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 7 Ambystoma macrodactylum  Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 8 Ambystoma maculatum      Least Concern (LC)   LC        Caudata Ambyst… Amby…\n 9 Ambystoma texanum        Least Concern (LC)   LC        Caudata Ambyst… Amby…\n10 Ambystoma tigrinum       Least Concern (LC)   LC        Caudata Ambyst… Amby…\n# ℹ 128 more rows\n# ℹ 9 more variables: Age_at_maturity_min_y &lt;dbl&gt;, Age_at_maturity_max_y &lt;dbl&gt;,\n#   Body_size_mm &lt;dbl&gt;, Longevity_max_y &lt;dbl&gt;, Litter_size_min_n &lt;dbl&gt;,\n#   Litter_size_max_n &lt;dbl&gt;, Offspring_size_min_mm &lt;dbl&gt;,\n#   Offspring_size_max_mm &lt;fct&gt;, Development &lt;chr&gt;",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Count"
    ]
  },
  {
    "objectID": "dplyr/count.html#one-variablecolumn",
    "href": "dplyr/count.html#one-variablecolumn",
    "title": "Count",
    "section": "One variable/column",
    "text": "One variable/column\nThe count() function will count the number of each unique value within one or more variables.\n\namphibian_div_tbl |&gt; dplyr::count(IUCN.Red.List.Status)\n\n# A tibble: 7 × 2\n  IUCN.Red.List.Status                 n\n  &lt;fct&gt;                            &lt;int&gt;\n1 Least Concern (LC)                  94\n2 Near Threatened (NT)                12\n3 Data Deficient (DD)                  8\n4 Vulnerable (VU)                     18\n5 Endangered (EN)                      4\n6 Least Concern (LC) - Provisional     1\n7 &lt;NA&gt;                                 1\n\n\nThe count() function works on grouped tibbles, counting the unique values within the group.\n\namphibian_div_tbl |&gt; \n    #Group by IUCN.Red.List.Status\n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    #Count will count grouped info\n    dplyr::count()\n\n# A tibble: 7 × 2\n# Groups:   IUCN.Red.List.Status [7]\n  IUCN.Red.List.Status                 n\n  &lt;fct&gt;                            &lt;int&gt;\n1 Least Concern (LC)                  94\n2 Near Threatened (NT)                12\n3 Data Deficient (DD)                  8\n4 Vulnerable (VU)                     18\n5 Endangered (EN)                      4\n6 Least Concern (LC) - Provisional     1\n7 &lt;NA&gt;                                 1",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Count"
    ]
  },
  {
    "objectID": "dplyr/count.html#multiple-variablescolumns",
    "href": "dplyr/count.html#multiple-variablescolumns",
    "title": "Count",
    "section": "Multiple variables/columns",
    "text": "Multiple variables/columns\nIt also works when specifying multiple variables/columns to use together.\n\namphibian_div_tbl |&gt; dplyr::count(Order, Family, Genus)\n\n# A tibble: 26 × 4\n   Order   Family         Genus          n\n   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;      &lt;int&gt;\n 1 Anura   Ascaphidae     Ascaphus       2\n 2 Anura   Bufonidae      Anaxyrus       4\n 3 Anura   Bufonidae      Incilius       1\n 4 Anura   Hylidae        Acris          3\n 5 Anura   Hylidae        Hyla           7\n 6 Anura   Hylidae        Pseudacris     6\n 7 Anura   Ranidae        Rana          14\n 8 Anura   Scaphiopodidae Spea           2\n 9 Caudata Ambystomatidae Ambystoma      7\n10 Caudata Amphiumidae    Amphiuma       3\n# ℹ 16 more rows",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Count"
    ]
  },
  {
    "objectID": "dplyr/rename.html",
    "href": "dplyr/rename.html",
    "title": "Rename",
    "section": "",
    "text": "The function dplyr::rename() allows you to rename column names in a tibble.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Rename"
    ]
  },
  {
    "objectID": "dplyr/rename.html#dataset",
    "href": "dplyr/rename.html#dataset",
    "title": "Rename",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions). For easier viewing we’ll subset it so it only has 5 rows.\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmammal_sleep_tbl&lt;- mgrtibbles::mammal_sleep_tbl |&gt; dplyr::slice(1:5)\nmammal_sleep_tbl\n\n# A tibble: 5 × 11\n  species body_wt brain_wt non_dreaming dreaming total_sleep life_span gestation\n  &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa… 6654      5.71           NA       NA           3.3      38.6       645\n2 Africa…    1      0.0066          6.3      2           8.3       4.5        42\n3 Arctic…    3.38   0.0445         NA       NA          12.5      14          60\n4 Arctic…    0.92   0.0057         NA       NA          16.5      NA          25\n5 Asiane… 2547      4.60            2.1      1.8         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Rename"
    ]
  },
  {
    "objectID": "dplyr/arrange.html",
    "href": "dplyr/arrange.html",
    "title": "Arrange",
    "section": "",
    "text": "The dplyr::arrange() function allows you to arrange the rows of a tibble.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Arrange"
    ]
  },
  {
    "objectID": "dplyr/arrange.html#dataset",
    "href": "dplyr/arrange.html#dataset",
    "title": "Arrange",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load and subset the knz_bison data from the lterdatasampler package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"lterdatasampler\")\n#Subset of knz_bison tibble for demonstration\nbison_tbl &lt;- lterdatasampler::knz_bison |&gt;\n    #Convert to tibble\n    tibble::as_tibble() |&gt;\n    #Slice to choose rows by index\n    dplyr::slice(c(1,2,911,145,146,179,181,34,35)) |&gt;\n    #Select to choose columns based on column names\n    dplyr::select(c(data_code,rec_year,animal_sex))\nbison_tbl\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1994 F         \n2 CBH01         1994 F         \n3 CBH01         1999 F         \n4 CBH01         1995 M         \n5 CBH01         1995 F         \n6 CBH01         1995 M         \n7 CBH01         1995 M         \n8 CBH01         1994 M         \n9 CBH01         1994 M",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Arrange"
    ]
  },
  {
    "objectID": "dplyr/arrange.html#numeric-columns",
    "href": "dplyr/arrange.html#numeric-columns",
    "title": "Arrange",
    "section": "Numeric columns",
    "text": "Numeric columns\nArrange the tibble by rec_year:\n\nbison_tbl |&gt; dplyr::arrange(rec_year)\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1994 F         \n2 CBH01         1994 F         \n3 CBH01         1994 M         \n4 CBH01         1994 M         \n5 CBH01         1995 M         \n6 CBH01         1995 F         \n7 CBH01         1995 M         \n8 CBH01         1995 M         \n9 CBH01         1999 F         \n\n\ndplyr::arrange() will arrange the rows by the selected column in ascending fashion (lowest to highest). You can use the desc() function on columns you wan’t to be ordered in descending fashion.\nArrange the tibble by rec_year in descending fashion:\n\nbison_tbl |&gt; dplyr::arrange(desc(rec_year))\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1999 F         \n2 CBH01         1995 M         \n3 CBH01         1995 F         \n4 CBH01         1995 M         \n5 CBH01         1995 M         \n6 CBH01         1994 F         \n7 CBH01         1994 F         \n8 CBH01         1994 M         \n9 CBH01         1994 M",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Arrange"
    ]
  },
  {
    "objectID": "dplyr/arrange.html#string-columns",
    "href": "dplyr/arrange.html#string-columns",
    "title": "Arrange",
    "section": "String columns",
    "text": "String columns\nStrings are order by alphabetical order.\nDefault is from A-Z (ascending).\n\nbison_tbl |&gt; dplyr::arrange(animal_sex)\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1994 F         \n2 CBH01         1994 F         \n3 CBH01         1999 F         \n4 CBH01         1995 F         \n5 CBH01         1995 M         \n6 CBH01         1995 M         \n7 CBH01         1995 M         \n8 CBH01         1994 M         \n9 CBH01         1994 M         \n\n\nSet it to descending will order it from Z-A.\n\nbison_tbl |&gt; dplyr::arrange(desc(animal_sex))\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1995 M         \n2 CBH01         1995 M         \n3 CBH01         1995 M         \n4 CBH01         1994 M         \n5 CBH01         1994 M         \n6 CBH01         1994 F         \n7 CBH01         1994 F         \n8 CBH01         1999 F         \n9 CBH01         1995 F",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Arrange"
    ]
  },
  {
    "objectID": "dplyr/arrange.html#multiple-columns",
    "href": "dplyr/arrange.html#multiple-columns",
    "title": "Arrange",
    "section": "Multiple columns",
    "text": "Multiple columns\nMultiple columns can be used to arrange a tibble.\nThe priority of ordering is based on the order of the columns, from high to low priority.\n\nbison_tbl |&gt; dplyr::arrange(rec_year, animal_sex)\n\n# A tibble: 9 × 3\n  data_code rec_year animal_sex\n  &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;     \n1 CBH01         1994 F         \n2 CBH01         1994 F         \n3 CBH01         1994 M         \n4 CBH01         1994 M         \n5 CBH01         1995 F         \n6 CBH01         1995 M         \n7 CBH01         1995 M         \n8 CBH01         1995 M         \n9 CBH01         1999 F",
    "crumbs": [
      "Dplyr",
      "Rows",
      "Arrange"
    ]
  },
  {
    "objectID": "dplyr/summarise.html",
    "href": "dplyr/summarise.html",
    "title": "Summarise",
    "section": "",
    "text": "The function summarise() allows you to get a summary of the unique values within a grouped tibble. It will produce a __tibble_ of the summarised information.\nVarious helper functions can be used to get specific info including:\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#dataset",
    "href": "dplyr/summarise.html#dataset",
    "title": "Summarise",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the amphibian_div_tbl data from the mgrtibbles package (hyperlink includes install instructions).\nWe’ll remove any rows with NAs as NAs cause mean and other other calculations to return NA.\n\n#Load package\nlibrary(\"mgrtibbles\")\n#amphibian_div_tbl tibble for demonstration\namphibian_div_tbl &lt;- mgrtibbles::amphibian_div_tbl |&gt; na.omit()",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#summarise",
    "href": "dplyr/summarise.html#summarise",
    "title": "Summarise",
    "section": "Summarise",
    "text": "Summarise\nThe default of summarise() is to produce a tibble of unique group values.\n\namphibian_div_tbl |&gt; \n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    dplyr::summarise()\n\n# A tibble: 5 × 1\n  IUCN.Red.List.Status            \n  &lt;fct&gt;                           \n1 Least Concern (LC)              \n2 Near Threatened (NT)            \n3 Vulnerable (VU)                 \n4 Endangered (EN)                 \n5 Least Concern (LC) - Provisional",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#count",
    "href": "dplyr/summarise.html#count",
    "title": "Summarise",
    "section": "Count",
    "text": "Count\nThe counts of each unique value can be added with n().\nNotice that the new column’s name is specified before the = sign. This is the same as the count() function.\n\namphibian_div_tbl |&gt; \n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    dplyr::summarise(n = n())\n\n# A tibble: 5 × 2\n  IUCN.Red.List.Status                 n\n  &lt;fct&gt;                            &lt;int&gt;\n1 Least Concern (LC)                  55\n2 Near Threatened (NT)                 5\n3 Vulnerable (VU)                      3\n4 Endangered (EN)                      1\n5 Least Concern (LC) - Provisional     1",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#mean-and-median",
    "href": "dplyr/summarise.html#mean-and-median",
    "title": "Summarise",
    "section": "Mean and median",
    "text": "Mean and median\nThe mean() function can be used to calculate the mean of groups and specified columns/variables.\n\namphibian_div_tbl |&gt;\n    #Group by IUCN.Red.List.Status\n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    #Summarise\n    dplyr::summarise(n = n(), \n                    mean_body_size = mean(Body_size_mm), \n                    mean_max_litter_size = mean(Litter_size_max_n))\n\n# A tibble: 5 × 4\n  IUCN.Red.List.Status                 n mean_body_size mean_max_litter_size\n  &lt;fct&gt;                            &lt;int&gt;          &lt;dbl&gt;                &lt;dbl&gt;\n1 Least Concern (LC)                  55           173.                2570.\n2 Near Threatened (NT)                 5           114.                 369.\n3 Vulnerable (VU)                      3           133                   19 \n4 Endangered (EN)                      1            87                  350 \n5 Least Concern (LC) - Provisional     1            48                 1012 \n\n\nThe median() function calculates medians.\n\namphibian_div_tbl |&gt;\n    #Group by IUCN.Red.List.Status\n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    #Summarise\n    dplyr::summarise(n = n(), \n                    mean_body_size = mean(Body_size_mm),\n                    median_body_size = median(Body_size_mm))\n\n# A tibble: 5 × 4\n  IUCN.Red.List.Status                 n mean_body_size median_body_size\n  &lt;fct&gt;                            &lt;int&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1 Least Concern (LC)                  55           173.              127\n2 Near Threatened (NT)                 5           114.              111\n3 Vulnerable (VU)                      3           133               170\n4 Endangered (EN)                      1            87                87\n5 Least Concern (LC) - Provisional     1            48                48",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#standard-deviation-and-iqr",
    "href": "dplyr/summarise.html#standard-deviation-and-iqr",
    "title": "Summarise",
    "section": "Standard deviation and IQR",
    "text": "Standard deviation and IQR\nThe sd() and IQR() function calculate standard deviation and inter quartile range (upper quartile - lower quartile).\nNote NAs are provided for standard deviation and 0 for IQR if there is only one value in the group.\n\namphibian_div_tbl |&gt;\n    #Group by IUCN.Red.List.Status\n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    #Summarise\n    dplyr::summarise(n = n(),\n                    sd_body_size = sd(Body_size_mm),\n                    iqr_body_size = IQR(Body_size_mm),\n                    )\n\n# A tibble: 5 × 4\n  IUCN.Red.List.Status                 n sd_body_size iqr_body_size\n  &lt;fct&gt;                            &lt;int&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n1 Least Concern (LC)                  55        200.           94.5\n2 Near Threatened (NT)                 5         51.7          83  \n3 Vulnerable (VU)                      3         71.1          63.5\n4 Endangered (EN)                      1         NA             0  \n5 Least Concern (LC) - Provisional     1         NA             0",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/summarise.html#first-last-and-nth-values",
    "href": "dplyr/summarise.html#first-last-and-nth-values",
    "title": "Summarise",
    "section": "First, last and nth values",
    "text": "First, last and nth values\nThe first, last, and nth value can be extracted with the function first(), last(), and nth().\nNote NAs are provided for nth() as there is only one value. first() and last() work as the single value is the first and last value.\n\namphibian_div_tbl |&gt;\n    #Group by IUCN.Red.List.Status\n    dplyr::group_by(IUCN.Red.List.Status) |&gt;\n    #Summarise\n    dplyr::summarise(n = n(),\n                    first_body_size = first(Body_size_mm),\n                    last_body_size = last(Body_size_mm),\n                    second_body_size = nth(Body_size_mm, 2)\n                    )\n\n# A tibble: 5 × 5\n  IUCN.Red.List.Status         n first_body_size last_body_size second_body_size\n  &lt;fct&gt;                    &lt;int&gt;           &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1 Least Concern (LC)          55              38            197               33\n2 Near Threatened (NT)         5              51             76              111\n3 Vulnerable (VU)              3              51            170              178\n4 Endangered (EN)              1              87             87               NA\n5 Least Concern (LC) - Pr…     1              48             48               NA",
    "crumbs": [
      "Dplyr",
      "Grouping",
      "Summarise"
    ]
  },
  {
    "objectID": "dplyr/select.html",
    "href": "dplyr/select.html",
    "title": "Select",
    "section": "",
    "text": "The function dplyr::select() allows you to select columns from a tibble. There are many different ways to do this with various helper functions.\nWhen subsetting with dplyr::select() the resulting object will always be a tibble.\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#dataset",
    "href": "dplyr/select.html#dataset",
    "title": "Select",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions). For easier viewing we’ll subset it so it only has 5 rows.\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmammal_sleep_tbl&lt;- mgrtibbles::mammal_sleep_tbl |&gt; dplyr::slice(1:5)\nmammal_sleep_tbl\n\n# A tibble: 5 × 11\n  species body_wt brain_wt non_dreaming dreaming total_sleep life_span gestation\n  &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa… 6654      5.71           NA       NA           3.3      38.6       645\n2 Africa…    1      0.0066          6.3      2           8.3       4.5        42\n3 Arctic…    3.38   0.0445         NA       NA          12.5      14          60\n4 Arctic…    0.92   0.0057         NA       NA          16.5      NA          25\n5 Asiane… 2547      4.60            2.1      1.8         3.9      69         624\n# ℹ 3 more variables: predation &lt;fct&gt;, exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#one-column",
    "href": "dplyr/select.html#one-column",
    "title": "Select",
    "section": "One column",
    "text": "One column\nSelect one column\n\nmammal_sleep_tbl |&gt; dplyr::select(dreaming)\n\n# A tibble: 5 × 1\n  dreaming\n     &lt;dbl&gt;\n1     NA  \n2      2  \n3     NA  \n4     NA  \n5      1.8",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#multiple-columns",
    "href": "dplyr/select.html#multiple-columns",
    "title": "Select",
    "section": "Multiple columns",
    "text": "Multiple columns\nSelect multiple columns individually.\n\nmammal_sleep_tbl |&gt; dplyr::select(species,dreaming,gestation)\n\n# A tibble: 5 × 3\n  species                dreaming gestation\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africanelephant            NA         645\n2 Africangiantpouchedrat      2          42\n3 ArcticFox                  NA          60\n4 Arcticgroundsquirrel       NA          25\n5 Asianelephant               1.8       624",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#consecutive-range-of-columns",
    "href": "dplyr/select.html#consecutive-range-of-columns",
    "title": "Select",
    "section": "Consecutive range of columns",
    "text": "Consecutive range of columns\nSelect a consecutive range of columns using the first and last column names of the range.\n\nmammal_sleep_tbl |&gt; dplyr::select(dreaming:gestation)\n\n# A tibble: 5 × 4\n  dreaming total_sleep life_span gestation\n     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     NA           3.3      38.6       645\n2      2           8.3       4.5        42\n3     NA          12.5      14          60\n4     NA          16.5      NA          25\n5      1.8         3.9      69         624",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#numeric-indexes",
    "href": "dplyr/select.html#numeric-indexes",
    "title": "Select",
    "section": "Numeric indexes",
    "text": "Numeric indexes\nNumeric indexes can be used for column selection.\nSelect the first column.\n\nmammal_sleep_tbl |&gt; dplyr::select(1)\n\n# A tibble: 5 × 1\n  species               \n  &lt;chr&gt;                 \n1 Africanelephant       \n2 Africangiantpouchedrat\n3 ArcticFox             \n4 Arcticgroundsquirrel  \n5 Asianelephant         \n\n\nSelect columns 3:5.\n\nmammal_sleep_tbl |&gt; dplyr::select(3:5)\n\n# A tibble: 5 × 3\n  brain_wt non_dreaming dreaming\n     &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n1   5.71           NA       NA  \n2   0.0066          6.3      2  \n3   0.0445         NA       NA  \n4   0.0057         NA       NA  \n5   4.60            2.1      1.8\n\n\nSelect columns 4, 7,and 2.\n\nmammal_sleep_tbl |&gt; dplyr::select(c(4,7,2))\n\n# A tibble: 5 × 3\n  non_dreaming life_span body_wt\n         &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1         NA        38.6 6654   \n2          6.3       4.5    1   \n3         NA        14      3.38\n4         NA        NA      0.92\n5          2.1      69   2547   \n\n\nSelect all but the 6th column.\n\nmammal_sleep_tbl |&gt; dplyr::select(-6)\n\n# A tibble: 5 × 10\n  species   body_wt brain_wt non_dreaming dreaming life_span gestation predation\n  &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;    \n1 Africane… 6654      5.71           NA       NA        38.6       645 3        \n2 Africang…    1      0.0066          6.3      2         4.5        42 3        \n3 ArcticFox    3.38   0.0445         NA       NA        14          60 1        \n4 Arcticgr…    0.92   0.0057         NA       NA        NA          25 5        \n5 Asianele… 2547      4.60            2.1      1.8      69         624 3        \n# ℹ 2 more variables: exposure &lt;fct&gt;, danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#last-column",
    "href": "dplyr/select.html#last-column",
    "title": "Select",
    "section": "Last column",
    "text": "Last column\nSelect the last column with last_col() helper function.\n\nmammal_sleep_tbl |&gt; dplyr::select(last_col())\n\n# A tibble: 5 × 1\n  danger\n  &lt;fct&gt; \n1 3     \n2 3     \n3 1     \n4 3     \n5 4     \n\n\nSelect the fourth last column (i.e. 3 spaces from the last column).\n\nmammal_sleep_tbl |&gt; dplyr::select(last_col(3))\n\n# A tibble: 5 × 1\n  gestation\n      &lt;dbl&gt;\n1       645\n2        42\n3        60\n4        25\n5       624\n\n\nSelect the last 3 columns.\n\nmammal_sleep_tbl |&gt; dplyr::select(last_col(2):last_col())\n\n# A tibble: 5 × 3\n  predation exposure danger\n  &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt; \n1 3         5        3     \n2 3         1        3     \n3 1         1        1     \n4 5         2        3     \n5 3         5        4",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#starts-with",
    "href": "dplyr/select.html#starts-with",
    "title": "Select",
    "section": "Starts with",
    "text": "Starts with\nSelect columns using a prefix of the column names to extract with the starts_with() helper function.\n\nmammal_sleep_tbl |&gt; dplyr::select(starts_with(\"b\"))\n\n# A tibble: 5 × 2\n  body_wt brain_wt\n    &lt;dbl&gt;    &lt;dbl&gt;\n1 6654      5.71  \n2    1      0.0066\n3    3.38   0.0445\n4    0.92   0.0057\n5 2547      4.60",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#ends-with",
    "href": "dplyr/select.html#ends-with",
    "title": "Select",
    "section": "Ends with",
    "text": "Ends with\nSelect columns using a prefix of the column names to extract with the ends_with() helper function.\n\nmammal_sleep_tbl |&gt; dplyr::select(ends_with(\"dreaming\"))\n\n# A tibble: 5 × 2\n  non_dreaming dreaming\n         &lt;dbl&gt;    &lt;dbl&gt;\n1         NA       NA  \n2          6.3      2  \n3         NA       NA  \n4         NA       NA  \n5          2.1      1.8",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#contains",
    "href": "dplyr/select.html#contains",
    "title": "Select",
    "section": "Contains",
    "text": "Contains\nSelect columns using a string the column names will contain with the contains() helper function.\n\nmammal_sleep_tbl |&gt; dplyr::select(contains(\"in\"))\n\n# A tibble: 5 × 3\n  brain_wt non_dreaming dreaming\n     &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n1   5.71           NA       NA  \n2   0.0066          6.3      2  \n3   0.0445         NA       NA  \n4   0.0057         NA       NA  \n5   4.60            2.1      1.8",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#matches",
    "href": "dplyr/select.html#matches",
    "title": "Select",
    "section": "Matches",
    "text": "Matches\nThe matches() function is similar to the above contains() function but it can be used to select with regular expressions.\nIn the below example we use [] to mean one of the letters within them. In other words [eu]r means “er” or “ur”.\n\nmammal_sleep_tbl |&gt; dplyr::select(matches(\"[eu]r\"))\n\n# A tibble: 5 × 2\n  exposure danger\n  &lt;fct&gt;    &lt;fct&gt; \n1 5        3     \n2 1        3     \n3 1        1     \n4 2        3     \n5 5        4     \n\n\nAnother example where s[lp] mean “sl” or “sp”.\n\nmammal_sleep_tbl |&gt; dplyr::select(matches(\"s[lp]\"))\n\n# A tibble: 5 × 3\n  species                total_sleep life_span\n  &lt;chr&gt;                        &lt;dbl&gt;     &lt;dbl&gt;\n1 Africanelephant                3.3      38.6\n2 Africangiantpouchedrat         8.3       4.5\n3 ArcticFox                     12.5      14  \n4 Arcticgroundsquirrel          16.5      NA  \n5 Asianelephant                  3.9      69",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/select.html#combine-with-c",
    "href": "dplyr/select.html#combine-with-c",
    "title": "Select",
    "section": "Combine with c()",
    "text": "Combine with c()\nYou can combine many of the methods above with c().\nSelect the species column and the last three columns.\n\nmammal_sleep_tbl |&gt; dplyr::select(\n    c(species,last_col(2):last_col())\n)\n\n# A tibble: 5 × 4\n  species                predation exposure danger\n  &lt;chr&gt;                  &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt; \n1 Africanelephant        3         5        3     \n2 Africangiantpouchedrat 3         1        3     \n3 ArcticFox              1         1        1     \n4 Arcticgroundsquirrel   5         2        3     \n5 Asianelephant          3         5        4     \n\n\nSelect the species column, the columns containing dreaming, and the 6th to 7th columns.\n\nmammal_sleep_tbl |&gt; dplyr::select(\n    c(species, contains(\"dreaming\"),6:7)\n)\n\n# A tibble: 5 × 5\n  species                non_dreaming dreaming total_sleep life_span\n  &lt;chr&gt;                         &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 Africanelephant                NA       NA           3.3      38.6\n2 Africangiantpouchedrat          6.3      2           8.3       4.5\n3 ArcticFox                      NA       NA          12.5      14  \n4 Arcticgroundsquirrel           NA       NA          16.5      NA  \n5 Asianelephant                   2.1      1.8         3.9      69",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Select"
    ]
  },
  {
    "objectID": "dplyr/mutate.html",
    "href": "dplyr/mutate.html",
    "title": "Mutate",
    "section": "",
    "text": "The function dplyr::mutate() allows you to:\nTidyverse reference page",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Mutate"
    ]
  },
  {
    "objectID": "dplyr/mutate.html#dataset",
    "href": "dplyr/mutate.html#dataset",
    "title": "Mutate",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::mammal_sleep_tbl\n\n# A tibble: 62 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6.65e+3   5.71           NA       NA           3.3      38.6\n 2 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 3 ArcticFox        3.38e+0   0.0445         NA       NA          12.5      14  \n 4 Arcticgroundsqu… 9.2 e-1   0.0057         NA       NA          16.5      NA  \n 5 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 6 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 7 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 8 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 9 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n10 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n# ℹ 52 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Mutate"
    ]
  },
  {
    "objectID": "dplyr/mutate.html#create-new-column",
    "href": "dplyr/mutate.html#create-new-column",
    "title": "Mutate",
    "section": "Create new column",
    "text": "Create new column\nCreate a column of brain and body weight ratio.\n\nmammal_sleep_tbl |&gt;\n    #Select columns of interest\n    dplyr::select(species, body_wt, brain_wt) |&gt;\n    #Calculate and add brain_body_wt_ratio column\n    dplyr::mutate(brain_body_wt_ratio = brain_wt/(body_wt*1000))\n\n# A tibble: 62 × 4\n   species                 body_wt brain_wt brain_body_wt_ratio\n   &lt;chr&gt;                     &lt;dbl&gt;    &lt;dbl&gt;               &lt;dbl&gt;\n 1 Africanelephant        6654       5.71           0.000000858\n 2 Africangiantpouchedrat    1       0.0066         0.0000066  \n 3 ArcticFox                 3.38    0.0445         0.0000131  \n 4 Arcticgroundsquirrel      0.92    0.0057         0.00000620 \n 5 Asianelephant          2547       4.60           0.00000181 \n 6 Baboon                   10.6     0.180          0.0000170  \n 7 Bigbrownbat               0.023   0.0003         0.0000130  \n 8 Braziliantapir          160       0.169          0.00000106 \n 9 Cat                       3.3     0.0256         0.00000776 \n10 Chimpanzee               52.2     0.44           0.00000844 \n# ℹ 52 more rows\n\n\nCreate a column for life time sleep\n\nmammal_sleep_tbl |&gt;\n    #Select columns of interest\n    dplyr::select(species, total_sleep, life_span) |&gt;\n    #Calculate and add total_life_sleep column\n    dplyr::mutate(total_life_sleep = (life_span*365.25) * total_sleep)\n\n# A tibble: 62 × 4\n   species                total_sleep life_span total_life_sleep\n   &lt;chr&gt;                        &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n 1 Africanelephant                3.3      38.6           46526.\n 2 Africangiantpouchedrat         8.3       4.5           13642.\n 3 ArcticFox                     12.5      14             63919.\n 4 Arcticgroundsquirrel          16.5      NA                NA \n 5 Asianelephant                  3.9      69             98289.\n 6 Baboon                         9.8      27             96645.\n 7 Bigbrownbat                   19.7      19            136713.\n 8 Braziliantapir                 6.2      30.4           68842.\n 9 Cat                           14.5      28            148292.\n10 Chimpanzee                     9.7      50            177146.\n# ℹ 52 more rows",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Mutate"
    ]
  },
  {
    "objectID": "dplyr/mutate.html#na-filling",
    "href": "dplyr/mutate.html#na-filling",
    "title": "Mutate",
    "section": "NA filling",
    "text": "NA filling\nFor NA filling/editing please see the tidyr NA filling page.",
    "crumbs": [
      "Dplyr",
      "Columns",
      "Mutate"
    ]
  },
  {
    "objectID": "purrr/purrr.html",
    "href": "purrr/purrr.html",
    "title": "Purrr",
    "section": "",
    "text": "purr homepage",
    "crumbs": [
      "Purrr"
    ]
  },
  {
    "objectID": "stringr/stringr.html",
    "href": "stringr/stringr.html",
    "title": "Stringr",
    "section": "",
    "text": "test\nreadr homepage",
    "crumbs": [
      "Stringr"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html",
    "href": "ggplot2/basic_plot.html",
    "title": "Basic plot",
    "section": "",
    "text": "In this page we will create a simple scatter/dot plot with ggplot2. This will demonstrate the basic anatomy of ggplot2 code.\n\n\nFor demonstration we’ll load the crab_age_pred_tbl data from the mgrtibbles package (hyperlink includes install instructions). Additionally, we’ll slice out the first 200 rows and select the columns we will utilise in the plot for a clear demonstration.\n\ncrab_age_weight_tbl &lt;- mgrtibbles::crab_age_pred_tbl |&gt;\n    dplyr::slice(1:200) |&gt;\n    dplyr::select(Weight, Age)\ncrab_age_weight_tbl\n\n# A tibble: 200 × 2\n   Weight   Age\n    &lt;dbl&gt; &lt;dbl&gt;\n 1  24.6      9\n 2   5.40     6\n 3   7.95     6\n 4  13.5     10\n 5   6.90     6\n 6  28.7      8\n 7  17.7     15\n 8  23.6     10\n 9  42.2     13\n10   6.80     7\n# ℹ 190 more rows\n\n\n\n\n\nLet’s create a simple dot/scatter plot of crab age against weight.\nOne of the useful features of a ggplot object is that you can assign it to a variable name (scatter_plot &lt;-). This allows you to edit it, save it to a file, and display it. These features are covered in further pages.\n\n#Create ggplot2 object and set the aesthetics\nscatter_plot &lt;- ggplot2::ggplot(data=crab_age_weight_tbl, mapping=aes(x=Age, y = Weight)) +\n    #Set plot as a dot/scatter plot \n    ggplot2::geom_point() +\n    #Add title to plot\n    labs(title=\"Crab age against weight scatter plot\")\n#Display plot\nscatter_plot\n\n\n\n\n\n\n\n\nWe have three lines, each with a function, for our ggplot2 code. They are described below.\n\n\n\nTo create a ggplot object we use the function ggplot2::ggplot() and provide it with 2 different parts.\nThe first part is the data (data=crab_age_weight_tbl). Data for ggplot() needs to be long formatted so each column can be assigned to an aesthetic.\nThe second part is the aesthetic mapping information (mapping=aes(x=Age, y = Weight)). This maps the information/values in our data’s columns to the different aesthetics in our plot (e.g. axes). One important note is that you do not need to use quotes when referring to column names in the aes() brackets.\nMore information: Ggplot object\n\n\n\nComponents can be added to the base ggplot object (ggplot2:ggplot()) with the + icon. Similar to piping (|&gt;) this allows you to start simple and then build up more complex code to create sophisticated plots.\nThere are many components with most being layers.\nMore information: Layers\n\n\n\nParameter names (e.g. data=) do not always need to be specified as long as you provide them in the order the function expects. We do not need to provide ggplot2::ggplot() with the parmaeter names,data= and mapping=, as long as we provide the data first and the mapping second.\nSince the data= parameter is first we can pipe our data/tibble/data.frame to our ggplot2::ggplot() function. This is useful if you want to carry out some data manipulation unique to the plot you will create.\n\nscatter_plot &lt;- crab_age_weight_tbl |&gt;\n    #Filter to keep crabs with an age up to 15 years\n    dplyr::filter(Age &lt;= 15) |&gt;\n    #Create ggplot2 object and set the aesthetics\n    ggplot2::ggplot(aes(x=Age, y = Weight)) +\n        #Set plot as a dot/scatter plot \n        ggplot2::geom_point() +\n        #Add title to plot\n        labs(title=\"Crab age against weight scatter plot (15 years or younger)\")\nscatter_plot",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html#dataset",
    "href": "ggplot2/basic_plot.html#dataset",
    "title": "Basic plot",
    "section": "",
    "text": "For demonstration we’ll load the crab_age_pred_tbl data from the mgrtibbles package (hyperlink includes install instructions). Additionally, we’ll slice out the first 200 rows and select the columns we will utilise in the plot for a clear demonstration.\n\ncrab_age_weight_tbl &lt;- mgrtibbles::crab_age_pred_tbl |&gt;\n    dplyr::slice(1:200) |&gt;\n    dplyr::select(Weight, Age)\ncrab_age_weight_tbl\n\n# A tibble: 200 × 2\n   Weight   Age\n    &lt;dbl&gt; &lt;dbl&gt;\n 1  24.6      9\n 2   5.40     6\n 3   7.95     6\n 4  13.5     10\n 5   6.90     6\n 6  28.7      8\n 7  17.7     15\n 8  23.6     10\n 9  42.2     13\n10   6.80     7\n# ℹ 190 more rows",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html#plot",
    "href": "ggplot2/basic_plot.html#plot",
    "title": "Basic plot",
    "section": "",
    "text": "Let’s create a simple dot/scatter plot of crab age against weight.\nOne of the useful features of a ggplot object is that you can assign it to a variable name (scatter_plot &lt;-). This allows you to edit it, save it to a file, and display it. These features are covered in further pages.\n\n#Create ggplot2 object and set the aesthetics\nscatter_plot &lt;- ggplot2::ggplot(data=crab_age_weight_tbl, mapping=aes(x=Age, y = Weight)) +\n    #Set plot as a dot/scatter plot \n    ggplot2::geom_point() +\n    #Add title to plot\n    labs(title=\"Crab age against weight scatter plot\")\n#Display plot\nscatter_plot\n\n\n\n\n\n\n\n\nWe have three lines, each with a function, for our ggplot2 code. They are described below.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html#ggplot-object-creation",
    "href": "ggplot2/basic_plot.html#ggplot-object-creation",
    "title": "Basic plot",
    "section": "",
    "text": "To create a ggplot object we use the function ggplot2::ggplot() and provide it with 2 different parts.\nThe first part is the data (data=crab_age_weight_tbl). Data for ggplot() needs to be long formatted so each column can be assigned to an aesthetic.\nThe second part is the aesthetic mapping information (mapping=aes(x=Age, y = Weight)). This maps the information/values in our data’s columns to the different aesthetics in our plot (e.g. axes). One important note is that you do not need to use quotes when referring to column names in the aes() brackets.\nMore information: Ggplot object",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html#components",
    "href": "ggplot2/basic_plot.html#components",
    "title": "Basic plot",
    "section": "",
    "text": "Components can be added to the base ggplot object (ggplot2:ggplot()) with the + icon. Similar to piping (|&gt;) this allows you to start simple and then build up more complex code to create sophisticated plots.\nThere are many components with most being layers.\nMore information: Layers",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/basic_plot.html#parameter-names-piping",
    "href": "ggplot2/basic_plot.html#parameter-names-piping",
    "title": "Basic plot",
    "section": "",
    "text": "Parameter names (e.g. data=) do not always need to be specified as long as you provide them in the order the function expects. We do not need to provide ggplot2::ggplot() with the parmaeter names,data= and mapping=, as long as we provide the data first and the mapping second.\nSince the data= parameter is first we can pipe our data/tibble/data.frame to our ggplot2::ggplot() function. This is useful if you want to carry out some data manipulation unique to the plot you will create.\n\nscatter_plot &lt;- crab_age_weight_tbl |&gt;\n    #Filter to keep crabs with an age up to 15 years\n    dplyr::filter(Age &lt;= 15) |&gt;\n    #Create ggplot2 object and set the aesthetics\n    ggplot2::ggplot(aes(x=Age, y = Weight)) +\n        #Set plot as a dot/scatter plot \n        ggplot2::geom_point() +\n        #Add title to plot\n        labs(title=\"Crab age against weight scatter plot (15 years or younger)\")\nscatter_plot",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Basic plot"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html",
    "href": "ggplot2/input_data.html",
    "title": "Input data",
    "section": "",
    "text": "When creating a ggplot2 object two pieces of information are vital:\n\nInput data: A tibble/data.frame in a long format.\nAesthetics: Specifies which columns of the input data are used for the different parts of the plot.\n\nThis page describes the input data whilst the next describes aesthetics.\n\n\nWhen using the tidyverse we are primarily working with tidy/long data. This is by design.\n\n\nThere is a definite learning curve to using tidy/long data. We humans have used messy/wide data for most of our education and so tend to find it more intuitive. The purpose of tidy/long data is to:\n\nMake data manipulation and analysis more consistent\nReduce the overall time spent on cleaning and preparing data\n\nThere are many ways to have data formatted in a wide/messy format but only a few ways to have data in a long/tidy format.\n\n\n\nAlthough hard to give a specific definition, tidy/long data have the three following features:\n\nEach variable is a column; each column is a variable\nEach observation is a row; each row is an observation\nEach value is a cell; each cell is a single value\n\nIn essence you never want column names to be values, rather having those values inhabit the cells of a column/variable. For example, instead of 10 columns of ten different years (1990, 1991, 1993, etc) where the cell values are the fish metric ton values you would have:\n\nA column/variable called “Year” containing the years as values\nA column/variable called “Metric_tons” containing the fish metric ton values\nEach “Year” value and corresponding “Metric_tons” value would be one observation/row\n\nThe below tibble shows a small slice of this tidy/long tibble.\n\n\n# A tibble: 5 × 2\n   Year Metric_tons\n  &lt;dbl&gt;       &lt;dbl&gt;\n1  1969         400\n2  1970         400\n3  1971         500\n4  1972         500\n5  1973         500\n\n\nTo go from wide/messy to long/tidy you can use the function tidyr::pivot_longer().\n\n\n\nIf long/tidy data is so great why do we still use wide/messy data?\nAlthough long data is very useful in R it is not as human readable as wide/messy data. When learning maths, stats etc., or displaying tables it is better/easier to use wide data. In other words:\n\nMessy humans like messy data. Tidy computers like tidy data.\n\nMatthew R. Gemmell\n\n\nLinks with more information:\n\nTidyr tidy data info\nStructure of a tibble\n\n\n\n\n\nBelow are two examples of tidy/long data.\n\n\nMany common plots require a tibble where all the continuous/numerical values are in one column whilst the other columns contain categorical data (i.e. metadata). An example includes a box plot of weight (kg) against age ranges (teen, adult etc.).\nThe below code blocks creates an example tibble and a box plot with the data.\nNote: set.seed() is used to have consistent randomness for the rep() function. It is good practice to set the seed to its normal operation afterwards with set.seed(NULL).\n\n#Create tibble\nset.seed(6836)\nage_range &lt;- rep(c(\"teen\",\"adult\", \"Middle age adult\", \"Senior adult\"), 25)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nweight_age_tbl &lt;- tibble::tibble(weight, age_range)\nset.seed(NULL)\n#Display top of tibble\nhead(weight_age_tbl)\n\n# A tibble: 6 × 2\n  weight age_range       \n   &lt;int&gt; &lt;chr&gt;           \n1    194 teen            \n2    190 adult           \n3    159 Middle age adult\n4    171 Senior adult    \n5    162 teen            \n6    167 adult           \n\n\n\n#Histogram plot\nggplot2::ggplot(weight_age_tbl, aes(x=age_range,y=weight)) +\n    ggplot2::geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe format of columns in your long tibble is highly dependant on your specific data and the type of plots you will create. For example, you may have a scatterplot comparing 2 continuous measues from 2 different columns (e.g. height vs weight). In this case each row would contain the height and weight of one individual.\nThe below code blocks creates an example tibble and a scatter plot with the data.\n\n#Create tibble\nset.seed(6836)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nheight &lt;- sample(50:130, size = 100, replace=TRUE)\nset.seed(NULL)\nweight_height_tbl &lt;- tibble::tibble(weight, height)\n#Display top of tibble\nhead(weight_height_tbl)\n\n# A tibble: 6 × 2\n  weight height\n   &lt;int&gt;  &lt;int&gt;\n1    194    116\n2    190     90\n3    159    130\n4    171    127\n5    162     78\n6    167     58\n\n\n\n#Scatterplot\nggplot2::ggplot(weight_height_tbl, aes(x=weight,y=height)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\nIn this case there seems to be no linear correlation but that is because we randomly created the dataset in a very niave manner.\n\n\n\n\nThe above is a very brief intro to the input data of ggplot2. We could show more here but it is better/easier to demonstrate with more examples as we introduce more topics.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#one-continuous-column",
    "href": "ggplot2/input_data.html#one-continuous-column",
    "title": "Input data",
    "section": "",
    "text": "Many common plots require a tibble where all the continuous/numerical values are in one column whilst the other columns contain categorical data (i.e. metadata). An example includes a box plot of weight (kg) against age ranges (teen, adult etc.).\nThe below code blocks creates an example tibble and a box plot with the data.\nNote: set.seed() is used to have consistent randomness for the rep() function. It is good practice to set the seed to its normal operation afterwards with set.seed(NULL).\n\n#Create tibble\nset.seed(6836)\nage_range &lt;- rep(c(\"teen\",\"adult\", \"Middle age adult\", \"Senior adult\"), 25)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nweight_age_tbl &lt;- tibble::tibble(weight, age_range)\nset.seed(NULL)\n#Display top of tibble\nhead(weight_age_tbl)\n\n# A tibble: 6 × 2\n  weight age_range       \n   &lt;int&gt; &lt;chr&gt;           \n1    194 teen            \n2    190 adult           \n3    159 Middle age adult\n4    171 Senior adult    \n5    162 teen            \n6    167 adult           \n\n\n\n#Histogram plot\nggplot2::ggplot(weight_age_tbl, aes(x=age_range,y=weight)) +\n    ggplot2::geom_boxplot()",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#multiple-continuous-columns",
    "href": "ggplot2/input_data.html#multiple-continuous-columns",
    "title": "Input data",
    "section": "",
    "text": "The format of columns in your long tibble is highly dependant on your specific data and the type of plots you will create. For example, you may have a scatterplot comparing 2 continuous measues from 2 different columns (e.g. height vs weight). In this case each row would contain the height and weight of one individual.\nThe below code blocks creates an example tibble and a scatter plot with the data.\n\n#Create tibble\nset.seed(6836)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nheight &lt;- sample(50:130, size = 100, replace=TRUE)\nset.seed(NULL)\nweight_height_tbl &lt;- tibble::tibble(weight, height)\n#Display top of tibble\nhead(weight_height_tbl)\n\n# A tibble: 6 × 2\n  weight height\n   &lt;int&gt;  &lt;int&gt;\n1    194    116\n2    190     90\n3    159    130\n4    171    127\n5    162     78\n6    167     58\n\n\n\n#Scatterplot\nggplot2::ggplot(weight_height_tbl, aes(x=weight,y=height)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\nIn this case there seems to be no linear correlation but that is because we randomly created the dataset in a very niave manner.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#the-surface",
    "href": "ggplot2/input_data.html#the-surface",
    "title": "Input data",
    "section": "",
    "text": "The above is a very brief intro to the input data of ggplot2. We could show more here but it is better/easier to demonstrate with more examples as we introduce more topics.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/aesthetics.html",
    "href": "ggplot2/aesthetics.html",
    "title": "Aesthetics",
    "section": "",
    "text": "When creating a ggplot2 object two pieces of information are vital:\n\nInput data: A tibble/data.frame in a long format.\nAesthetics: Specifies which columns of the input data are used for the different parts of the plot.\n\nThis page shows different aesthetics and their uses whilst the previous page described the input data.\n\n\nThe most important aesthetics are:\n\nx: X-axis (continuos or categorical).\ny: Y-axis (continuos or categorical).\nshape: The shape of points (categorical). There are 20 different shapes.\ncolour: The colour of objects (continuos or categorical). If used for points this is the stroke colour (i.e. outside line).\nfill: The fill colour of objects (continuos or categorical).\nsize: The size of shapes (continuos).\nlinetype: The type of the lines (categorical). There are 6 different line types. These include solid, dashed, dotted etc.\nlinewidth: The width of the lines (continuos).\n\nAs you can see there are a lot of aesthetic options. Which you use will depends on your data and how you want to visualise it. Below are a few examples of using the various aesthetics.\nFull list: Ggplot2 aesthetic specifications.\nWe’ll create a few scatterplots, chaging the appearance of the points for different reasons.\n\n\n\nFor demonstration we’ll load the crop_and_soil_tbl data from the mgrtibbles package (hyperlink includes install instructions). This contains:\n\nThree categorical columns: Soil_type, Crop_type, and Fertilisier.\nFive continuos column: Humidity, Moisture, Nitrogen, Potassium, and Phosphorus.\nA combine column: The Temperature_clesius_kelvin column contains the celsius and kelvin values. This will be split into 2 columns.\n\n\ncrop_and_soil_tbl &lt;- mgrtibbles::crop_and_soil_tbl |&gt; \n    #Separate wider\n    tidyr::separate_wider_delim(Temperature_celsius_kelvin, delim=\"_\",\n    names = c(\"Temp_celsius\", \"Temp_kelvin\")) |&gt;\n    #Mutate across the two columns to convert them to numeric columns\n    dplyr::mutate(dplyr::across(Temp_celsius:Temp_kelvin, as.numeric)) |&gt;\n    #Slice first 200 rows\n    slice(1:50)\n#Glimpse tibble\ncrop_and_soil_tbl |&gt; dplyr::glimpse()\n\nRows: 50\nColumns: 10\n$ Soil_type    &lt;chr&gt; \"Sandy\", \"Loamy\", \"Black\", \"Red\", \"Clayey\", \"Sandy\", \"Red…\n$ Crop_type    &lt;chr&gt; \"Maize\", \"Sugarcane\", \"Cotton\", \"Tobacco\", \"Paddy\", \"Barl…\n$ Fertiliser   &lt;chr&gt; \"Urea\", \"DAP\", \"14-35-14\", \"28-28\", \"Urea\", \"17-17-17\", \"…\n$ Temp_celsius &lt;dbl&gt; 26, 29, 34, 32, 28, 26, 25, 33, 30, 29, 27, 31, 25, 32, 2…\n$ Temp_kelvin  &lt;dbl&gt; -247, -244, -239, -241, -245, -247, -248, -240, -243, -24…\n$ Humidity     &lt;dbl&gt; 52, 52, 65, 62, 54, 52, 50, 64, 60, 58, 54, 62, 50, 62, 5…\n$ Moisture     &lt;dbl&gt; 38, 45, 62, 34, 46, 35, 64, 50, 42, 33, 28, 48, 65, 41, 3…\n$ Nitrogen     &lt;dbl&gt; 37, 12, 7, 22, 35, 12, 9, 41, 21, 9, 13, 14, 36, 24, 14, …\n$ Potassium    &lt;dbl&gt; 0, 0, 9, 0, 0, 10, 0, 0, 0, 7, 0, 15, 0, 0, 0, 13, 0, 0, …\n$ Phosphorous  &lt;dbl&gt; 0, 36, 30, 20, 0, 13, 10, 0, 18, 30, 40, 12, 0, 22, 41, 1…\n\n\n\n\nWe’ll create a scatterplot for Humidity (x) against Moisture (y). On top of the x and y aesthetics we’ll set the shape to the Crop_type and the colour to the Soil_type to include categorical data in our plot.\n\ncrop_and_soil_tbl |&gt;\nggplot2::ggplot(aes(x = Humidity, y = Moisture, \n                colour = Crop_type, shape = Soil_type)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\nYou’ll notice corresponding legends appear which is handy.\n\n\n\nRather than mapping categorical values to extra aesthetics we can mapp continuous values.\nCreate a reate a scatterplot for Humidity (x) against Moisture (y). Additonally map:\n\nTemp_celsius to color.\nNitrogen to size.\n\n\ncrop_and_soil_tbl |&gt;\nggplot2::ggplot(aes(x = Humidity, y = Moisture, \n                color = Temp_celsius, size = Nitrogen)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\nThere are many considerations when choosing which aesthetics to use including:\n\nHow many different aesthetics can be used before the plot is too noisy.\nSome aesthetics can only be used for continuous or categorical whilst others can be used for both.\nHow many categorical gorupings can be effectively used for an aesthetic. Although you could use 100 colours for 100 groups, the colours will be very hard to differentiate between.\nShould you be using colour blind friendly palettes?\n\nSome of these will be touched upon in this website. However, if you want more theory and examples I woudl recommend",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Aesthetics"
    ]
  },
  {
    "objectID": "ggplot2/aesthetics.html#aesthetics-1",
    "href": "ggplot2/aesthetics.html#aesthetics-1",
    "title": "Aesthetics",
    "section": "",
    "text": "The most important aesthetics are:\n\nx: X-axis (continuos or categorical).\ny: Y-axis (continuos or categorical).\nshape: The shape of points (categorical). There are 20 different shapes.\ncolour: The colour of objects (continuos or categorical). If used for points this is the stroke colour (i.e. outside line).\nfill: The fill colour of objects (continuos or categorical).\nsize: The size of shapes (continuos).\nlinetype: The type of the lines (categorical). There are 6 different line types. These include solid, dashed, dotted etc.\nlinewidth: The width of the lines (continuos).\n\nAs you can see there are a lot of aesthetic options. Which you use will depends on your data and how you want to visualise it. Below are a few examples of using the various aesthetics.\nFull list: Ggplot2 aesthetic specifications.\nWe’ll create a few scatterplots, chaging the appearance of the points for different reasons.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Aesthetics"
    ]
  },
  {
    "objectID": "ggplot2/aesthetics.html#dataset",
    "href": "ggplot2/aesthetics.html#dataset",
    "title": "Aesthetics",
    "section": "",
    "text": "For demonstration we’ll load the crop_and_soil_tbl data from the mgrtibbles package (hyperlink includes install instructions). This contains:\n\nThree categorical columns: Soil_type, Crop_type, and Fertilisier.\nFive continuos column: Humidity, Moisture, Nitrogen, Potassium, and Phosphorus.\nA combine column: The Temperature_clesius_kelvin column contains the celsius and kelvin values. This will be split into 2 columns.\n\n\ncrop_and_soil_tbl &lt;- mgrtibbles::crop_and_soil_tbl |&gt; \n    #Separate wider\n    tidyr::separate_wider_delim(Temperature_celsius_kelvin, delim=\"_\",\n    names = c(\"Temp_celsius\", \"Temp_kelvin\")) |&gt;\n    #Mutate across the two columns to convert them to numeric columns\n    dplyr::mutate(dplyr::across(Temp_celsius:Temp_kelvin, as.numeric)) |&gt;\n    #Slice first 200 rows\n    slice(1:50)\n#Glimpse tibble\ncrop_and_soil_tbl |&gt; dplyr::glimpse()\n\nRows: 50\nColumns: 10\n$ Soil_type    &lt;chr&gt; \"Sandy\", \"Loamy\", \"Black\", \"Red\", \"Clayey\", \"Sandy\", \"Red…\n$ Crop_type    &lt;chr&gt; \"Maize\", \"Sugarcane\", \"Cotton\", \"Tobacco\", \"Paddy\", \"Barl…\n$ Fertiliser   &lt;chr&gt; \"Urea\", \"DAP\", \"14-35-14\", \"28-28\", \"Urea\", \"17-17-17\", \"…\n$ Temp_celsius &lt;dbl&gt; 26, 29, 34, 32, 28, 26, 25, 33, 30, 29, 27, 31, 25, 32, 2…\n$ Temp_kelvin  &lt;dbl&gt; -247, -244, -239, -241, -245, -247, -248, -240, -243, -24…\n$ Humidity     &lt;dbl&gt; 52, 52, 65, 62, 54, 52, 50, 64, 60, 58, 54, 62, 50, 62, 5…\n$ Moisture     &lt;dbl&gt; 38, 45, 62, 34, 46, 35, 64, 50, 42, 33, 28, 48, 65, 41, 3…\n$ Nitrogen     &lt;dbl&gt; 37, 12, 7, 22, 35, 12, 9, 41, 21, 9, 13, 14, 36, 24, 14, …\n$ Potassium    &lt;dbl&gt; 0, 0, 9, 0, 0, 10, 0, 0, 0, 7, 0, 15, 0, 0, 0, 13, 0, 0, …\n$ Phosphorous  &lt;dbl&gt; 0, 36, 30, 20, 0, 13, 10, 0, 18, 30, 40, 12, 0, 22, 41, 1…\n\n\n\n\nWe’ll create a scatterplot for Humidity (x) against Moisture (y). On top of the x and y aesthetics we’ll set the shape to the Crop_type and the colour to the Soil_type to include categorical data in our plot.\n\ncrop_and_soil_tbl |&gt;\nggplot2::ggplot(aes(x = Humidity, y = Moisture, \n                colour = Crop_type, shape = Soil_type)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\nYou’ll notice corresponding legends appear which is handy.\n\n\n\nRather than mapping categorical values to extra aesthetics we can mapp continuous values.\nCreate a reate a scatterplot for Humidity (x) against Moisture (y). Additonally map:\n\nTemp_celsius to color.\nNitrogen to size.\n\n\ncrop_and_soil_tbl |&gt;\nggplot2::ggplot(aes(x = Humidity, y = Moisture, \n                color = Temp_celsius, size = Nitrogen)) +\n    ggplot2::geom_point()",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Aesthetics"
    ]
  },
  {
    "objectID": "ggplot2/aesthetics.html#correct-use-of-aesthetics",
    "href": "ggplot2/aesthetics.html#correct-use-of-aesthetics",
    "title": "Aesthetics",
    "section": "",
    "text": "There are many considerations when choosing which aesthetics to use including:\n\nHow many different aesthetics can be used before the plot is too noisy.\nSome aesthetics can only be used for continuous or categorical whilst others can be used for both.\nHow many categorical gorupings can be effectively used for an aesthetic. Although you could use 100 colours for 100 groups, the colours will be very hard to differentiate between.\nShould you be using colour blind friendly palettes?\n\nSome of these will be touched upon in this website. However, if you want more theory and examples I woudl recommend",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Aesthetics"
    ]
  },
  {
    "objectID": "tibble/add_rows_and_columns.html",
    "href": "tibble/add_rows_and_columns.html",
    "title": "Adding rows and columns",
    "section": "",
    "text": "Data can be added to a tibble by various methods. this includes:",
    "crumbs": [
      "Tibble",
      "Adding rows and columns"
    ]
  },
  {
    "objectID": "tibble/add_rows_and_columns.html#create-example-tibbles",
    "href": "tibble/add_rows_and_columns.html#create-example-tibbles",
    "title": "Adding rows and columns",
    "section": "Create example tibbles",
    "text": "Create example tibbles\nBefore demonstrating various examples we will create a few tibbles.\n\nnum_tbl &lt;- tibble::tibble(x = 1:3, y = 4:6, z = 7:9)\nnum_tbl_2 &lt;- tibble::tibble(aa = 11:13, ab = 14:16, ac = 17:19)\nnum_tbl_3 &lt;- tibble::tibble(x = 4:6, y = 7:9, z = 10:12)\nmixed_tbl &lt;- tibble::tibble(number = 1:3, \n                            word = c(\"one\",\"two\",\"three\"), \n                            logical = c(TRUE,FALSE,TRUE))",
    "crumbs": [
      "Tibble",
      "Adding rows and columns"
    ]
  },
  {
    "objectID": "tibble/add_rows_and_columns.html#adding-one-row-or-column",
    "href": "tibble/add_rows_and_columns.html#adding-one-row-or-column",
    "title": "Adding rows and columns",
    "section": "Adding one row or column",
    "text": "Adding one row or column\nAdding one new column or row can be carried out with the\nintuitively named functions:\n\ntibble::add_column(): Add one or more columns to a tibble\ntibble::add_row(): Add one or more rows to a tibble\n\n\nAdding a column\nWe will add a column to the tibble num_tbl.\n\nnum_tbl\n\n# A tibble: 3 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7\n2     2     5     8\n3     3     6     9\n\n\nTo add a new column you can provide tibble::add_column() with a vector that is the same length as the number of rows. In the below example the new column will have the name aa.\n\nnum_tbl_added_col &lt;- tibble::add_column(num_tbl, aa = 10:12)\nnum_tbl_added_col\n\n# A tibble: 3 × 4\n      x     y     z    aa\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     4     7    10\n2     2     5     8    11\n3     3     6     9    12\n\n\n\n\nAdding a row\nWe will add a row to the tibble mixed_tbl.\n\nmixed_tbl\n\n# A tibble: 3 × 3\n  number word  logical\n   &lt;int&gt; &lt;chr&gt; &lt;lgl&gt;  \n1      1 one   TRUE   \n2      2 two   FALSE  \n3      3 three TRUE   \n\n\nTo add a row you can use tibble::add_row(). Each column of the tibble needs to be specified as an option with its added value. Each value must have the same class as the column it is being added to.\n\nmixed_tbl_add_row &lt;- tibble::add_row(mixed_tbl, \n                                    number = 4,  \n                                    word = \"four\",  \n                                    logical = FALSE)\nmixed_tbl_add_row\n\n# A tibble: 4 × 3\n  number word  logical\n   &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;  \n1      1 one   TRUE   \n2      2 two   FALSE  \n3      3 three TRUE   \n4      4 four  FALSE",
    "crumbs": [
      "Tibble",
      "Adding rows and columns"
    ]
  },
  {
    "objectID": "tibble/add_rows_and_columns.html#binding-a-tibble-to-a-tibble",
    "href": "tibble/add_rows_and_columns.html#binding-a-tibble-to-a-tibble",
    "title": "Adding rows and columns",
    "section": "Binding a tibble to a tibble",
    "text": "Binding a tibble to a tibble\n\n\n  \n\n\n  \n\n\nTibbles can be bound together to create a new tibble with dplyr::bind_cols() and dplyr::bind_rows().\nPlease view the Dplyr bind tibbles page for examples.",
    "crumbs": [
      "Tibble",
      "Adding rows and columns"
    ]
  },
  {
    "objectID": "tibble/printing.html",
    "href": "tibble/printing.html",
    "title": "Printing or viewing",
    "section": "",
    "text": "Tibbles have some unique characteristics when printing and viewing them on a terminal, including the RStudio console window.",
    "crumbs": [
      "Tibble",
      "Printing or viewing"
    ]
  },
  {
    "objectID": "tibble/printing.html#load-and-print-data",
    "href": "tibble/printing.html#load-and-print-data",
    "title": "Printing or viewing",
    "section": "Load and print data",
    "text": "Load and print data\nBelow we load the and_vertebrates data from the lterdatasampler package (hyperlink includes install instructions) and view it.\n\n#Load package\nlibrary(\"lterdatasampler\")\n#subsetted and_vertebrates tibble\ntibble::as_tibble(lterdatasampler::and_vertebrates)[1:10,1:5]\n\n# A tibble: 10 × 5\n    year sitecode section reach  pass\n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;\n 1  1987 MACKCC-L CC      L         1\n 2  1987 MACKCC-L CC      L         1\n 3  1987 MACKCC-L CC      L         1\n 4  1987 MACKCC-L CC      L         1\n 5  1987 MACKCC-L CC      L         1\n 6  1987 MACKCC-L CC      L         1\n 7  1987 MACKCC-L CC      L         1\n 8  1987 MACKCC-L CC      L         1\n 9  1987 MACKCC-L CC      L         1\n10  1987 MACKCC-L CC      L         1\n\n\nInformation on the format of a tibble is within the Tibble structure section",
    "crumbs": [
      "Tibble",
      "Printing or viewing"
    ]
  },
  {
    "objectID": "tibble/printing.html#larger-tibbles",
    "href": "tibble/printing.html#larger-tibbles",
    "title": "Printing or viewing",
    "section": "Larger tibbles",
    "text": "Larger tibbles\nWhen printing out a larger tibble only a part of the tibble will be displayed with info on the undisplayed data below the displayed data.\nBy default only 10 rows of a tibble will be displayed.\nThe number of displayed columns is dynamic. The maximum amount of columns will be displayed based on the width of the viewer and the width of the data in the columns.\nThe info shown below a tibble is:\n\nThe number of rows that are not displayed\nThe number, names, and classes of the variables/columns not displayed\n\n\ntibble::as_tibble(lterdatasampler::and_vertebrates)\n\n# A tibble: 32,209 × 16\n    year sitecode section reach  pass unitnum unittype vert_index pitnumber\n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1  1987 MACKCC-L CC      L         1       1 R                 1        NA\n 2  1987 MACKCC-L CC      L         1       1 R                 2        NA\n 3  1987 MACKCC-L CC      L         1       1 R                 3        NA\n 4  1987 MACKCC-L CC      L         1       1 R                 4        NA\n 5  1987 MACKCC-L CC      L         1       1 R                 5        NA\n 6  1987 MACKCC-L CC      L         1       1 R                 6        NA\n 7  1987 MACKCC-L CC      L         1       1 R                 7        NA\n 8  1987 MACKCC-L CC      L         1       1 R                 8        NA\n 9  1987 MACKCC-L CC      L         1       1 R                 9        NA\n10  1987 MACKCC-L CC      L         1       1 R                10        NA\n# ℹ 32,199 more rows\n# ℹ 7 more variables: species &lt;chr&gt;, length_1_mm &lt;dbl&gt;, length_2_mm &lt;dbl&gt;,\n#   weight_g &lt;dbl&gt;, clip &lt;chr&gt;, sampledate &lt;date&gt;, notes &lt;chr&gt;",
    "crumbs": [
      "Tibble",
      "Printing or viewing"
    ]
  },
  {
    "objectID": "tibble/printing.html#print-more-rows",
    "href": "tibble/printing.html#print-more-rows",
    "title": "Printing or viewing",
    "section": "Print more rows",
    "text": "Print more rows\nMore rows can be printed by using the base R print() function with the n= option.\n\nprint(tibble::as_tibble(lterdatasampler::and_vertebrates), n=20)\n\n# A tibble: 32,209 × 16\n    year sitecode section reach  pass unitnum unittype vert_index pitnumber\n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1  1987 MACKCC-L CC      L         1       1 R                 1        NA\n 2  1987 MACKCC-L CC      L         1       1 R                 2        NA\n 3  1987 MACKCC-L CC      L         1       1 R                 3        NA\n 4  1987 MACKCC-L CC      L         1       1 R                 4        NA\n 5  1987 MACKCC-L CC      L         1       1 R                 5        NA\n 6  1987 MACKCC-L CC      L         1       1 R                 6        NA\n 7  1987 MACKCC-L CC      L         1       1 R                 7        NA\n 8  1987 MACKCC-L CC      L         1       1 R                 8        NA\n 9  1987 MACKCC-L CC      L         1       1 R                 9        NA\n10  1987 MACKCC-L CC      L         1       1 R                10        NA\n11  1987 MACKCC-L CC      L         1       1 R                11        NA\n12  1987 MACKCC-L CC      L         1       1 R                12        NA\n13  1987 MACKCC-L CC      L         1       1 R                13        NA\n14  1987 MACKCC-L CC      L         1       1 R                14        NA\n15  1987 MACKCC-L CC      L         1       1 R                15        NA\n16  1987 MACKCC-L CC      L         1       1 R                16        NA\n17  1987 MACKCC-L CC      L         1       2 C                 1        NA\n18  1987 MACKCC-L CC      L         1       2 C                 2        NA\n19  1987 MACKCC-L CC      L         1       2 C                 3        NA\n20  1987 MACKCC-L CC      L         1       2 C                 4        NA\n# ℹ 32,189 more rows\n# ℹ 7 more variables: species &lt;chr&gt;, length_1_mm &lt;dbl&gt;, length_2_mm &lt;dbl&gt;,\n#   weight_g &lt;dbl&gt;, clip &lt;chr&gt;, sampledate &lt;date&gt;, notes &lt;chr&gt;",
    "crumbs": [
      "Tibble",
      "Printing or viewing"
    ]
  },
  {
    "objectID": "tibble/structure.html",
    "href": "tibble/structure.html",
    "title": "Structure",
    "section": "",
    "text": "Tibbles are formatted like a data.frame but have some extra functions and terminology.\nFor demostration we’ll load and subset the hbr_maples data from the lterdatasampler package (hyperlink includes install instructions) and view it.\n#Load package\nlibrary(\"lterdatasampler\")\n#Subset of hbr_maples tibble\ntibble::as_tibble(lterdatasampler::hbr_maples)[1:10,1:7]\n\n# A tibble: 10 × 7\n    year watershed elevation transect sample stem_length leaf1area\n   &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     &lt;fct&gt;    &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n 1  2003 Reference Low       R1       1             86.9     13.8 \n 2  2003 Reference Low       R1       2            114       14.6 \n 3  2003 Reference Low       R1       3             83.5     12.5 \n 4  2003 Reference Low       R1       4             68.1      9.97\n 5  2003 Reference Low       R1       5             72.1      6.84\n 6  2003 Reference Low       R1       6             77.7      9.66\n 7  2003 Reference Low       R1       7             85.5      8.82\n 8  2003 Reference Low       R1       8             81.6      5.83\n 9  2003 Reference Low       R1       9             92.9      8.11\n10  2003 Reference Low       R1       10            59.6      3.02\nLet’s go over some of its components:",
    "crumbs": [
      "Tibble",
      "Structure"
    ]
  },
  {
    "objectID": "tibble/structure.html#size-info",
    "href": "tibble/structure.html#size-info",
    "title": "Structure",
    "section": "Size info",
    "text": "Size info\nAt the top of the tibble it tells us the size. The first number is the rows and the second is the columns.\nIn the above example we have:\n\n10 rows/observations\n7 columns/variables",
    "crumbs": [
      "Tibble",
      "Structure"
    ]
  },
  {
    "objectID": "tibble/structure.html#rowsobservations",
    "href": "tibble/structure.html#rowsobservations",
    "title": "Structure",
    "section": "Rows/observations",
    "text": "Rows/observations\nAs in a data.frame each observation is within its own row. The contents of an observation/row is determined by your dataset and how you want to analyse or visualise it. There are many ways to manipulate tibbles with the dplyr, tidyr, and other tidyverse packages.\nTibble rows do not have row names and you cannot/should not give them row names. They are numbered/indexxed instead.",
    "crumbs": [
      "Tibble",
      "Structure"
    ]
  },
  {
    "objectID": "tibble/structure.html#variablescolumns",
    "href": "tibble/structure.html#variablescolumns",
    "title": "Structure",
    "section": "Variables/columns",
    "text": "Variables/columns\nA tibble will have a certain number of columns.\nEach column has a name that is at the top. For example:\n\nyear\nwatershed\nelevation\n\nBelow the column/variable names is the data class/type of the column. All the entries within a single column will have the same data class. These include:\n\n&lt;int&gt;: Integer\n&lt;dbl&gt;: Double\n&lt;chr&gt;: Character/String\n&lt;fct&gt;: Factor\n&lt;lgl&gt;: Logical\n&lt;date&gt;: Date (MG ADD LINK TO INFO ABOUT DATE CLASS, MOST LIKELY IN LUBRIDATE SECTION)\n&lt;list&gt;: List\n\nBelow is an example of a tibble with a column for each of these classes.\n\n\n# A tibble: 4 × 7\n  Integers   Doubles Characters Factors Logicals Dates   Lists    \n     &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;fct&gt;   &lt;lgl&gt;    &lt;date&gt;  &lt;list&gt;   \n1      101     0.345 One        A       TRUE     1-01-20 &lt;dbl [3]&gt;\n2       21     3.14  sentence   B       TRUE     2-01-20 &lt;dbl [3]&gt;\n3        3    78.9   is         B       FALSE    3-01-20 &lt;dbl [3]&gt;\n4        0 20001.    enough     A       FALSE    4-01-20 &lt;dbl [3]&gt;\n\n\nAbove you can see that when you view a tibble, by printing it or viewing it in an Rstudio tab, it will align the values in the columns in a easy to read manner. This is especially useful for numeric (integers & doubles) columns where the numbers are aligned by place value. This allows you to easily compare the size of numbers in the same column.",
    "crumbs": [
      "Tibble",
      "Structure"
    ]
  },
  {
    "objectID": "readr/read.html",
    "href": "readr/read.html",
    "title": "Read_delim()",
    "section": "",
    "text": "The readr::read_delim() function allows you to read in delimited rectangular data from a file to a tibble.\nWe will only cover readr::read_delim() but the full list of read functions are below:\nTidyverse reference page",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/read.html#delimiters",
    "href": "readr/read.html#delimiters",
    "title": "Read_delim()",
    "section": "Delimiters",
    "text": "Delimiters\nAlthough there are specific functions for some delimiters this webpage will show you how to read in data with any delimiter using readr::read_delim() and the delim= option.\nThe most common types of delimiters for rectangular data files are:\n\nCommas (,): Files with commas as delimiters are known as CSV files (Comma Separated Values) and commonly end with the suffix .csv.\nTabs (\\t): Files with tabs as delimiters are known as TSV files (Tab Separated Values) and commonly end with the suffix .tsv.\nSpaces (): Spaces are used as delimiters for many files but are generally not recommended in data science.\n\nAdditionally, non-standard delimiters can be specified. Tilde (~), Colon (:), Semi-colon (;), Pipe (|) are commonly used as non-standard delimiters.",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/read.html#csv",
    "href": "readr/read.html#csv",
    "title": "Read_delim()",
    "section": "CSV",
    "text": "CSV\nWe’ll read in the file all_plant_details.csv into R as a tibble.\n\nCSV file contents\nPrior to reading in the CSV file (comma separated value) first print out the first five lines of the file with the base R function readLines(). This shows the contents of the file with the delimiters, in this case commas (,). This step is for demonstration and can be skipped in your own analyses if you know the delimiter of your file.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\", n=5)\n\n[1] \"id,common_name,seeds,drought_tolerant,salt_tolerant,thorny,invasive,tropical,indoor,flowers,cones,fruits,edible_fruit,leaf,edible_leaf,cuisine,medicinal,poisonous_to_humans,poisonous_to_pets,sunlight_part_sun_part_shade,sunlight_full_shade,sunlight_deep_shade,sunlight_part_shade,sunlight_full_sun_only_if_soil_kept_moist,sunlight_full_sun,sunlight_filtered_shade,care_level_encoded,maintenance_encoded,watering_encoded,growth_rate_encoded,cycle_perennial,cycle_herbaceous_perennial,cycle_annual\"\n[2] \"425,flowering-maple,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,2,0,2,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426,flowering-maple,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427,flowering-maple,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428,flowering-maple,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,2,1,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n\n\n\n\nRead in CSV file\nRead in the CSV file with readr::read_delim() setting the delimiter to commas with delim = \",\".\nNote: You can ignore the Lines between “Column specification” and the first 2 lines beginning with ℹ. They are discussed in the column types page.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\",\n    delim = \",\") |&gt;\n    #Slice out the first 5 lines\n    dplyr::slice(1:5)\n\nRows: 155 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 5 × 33\n     id common_name     seeds drought_tolerant salt_tolerant thorny invasive\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1        0\n2   426 flowering-maple     0                1             0      0        0\n3   427 flowering-maple     0                1             0      0        0\n4   428 flowering-maple     0                1             1      0        0\n5   434 Jacob's coat        0                0             0      0        0\n# ℹ 26 more variables: tropical &lt;dbl&gt;, indoor &lt;dbl&gt;, flowers &lt;dbl&gt;,\n#   cones &lt;dbl&gt;, fruits &lt;dbl&gt;, edible_fruit &lt;dbl&gt;, leaf &lt;dbl&gt;,\n#   edible_leaf &lt;dbl&gt;, cuisine &lt;dbl&gt;, medicinal &lt;dbl&gt;,\n#   poisonous_to_humans &lt;dbl&gt;, poisonous_to_pets &lt;dbl&gt;,\n#   sunlight_part_sun_part_shade &lt;dbl&gt;, sunlight_full_shade &lt;dbl&gt;,\n#   sunlight_deep_shade &lt;dbl&gt;, sunlight_part_shade &lt;dbl&gt;,\n#   sunlight_full_sun_only_if_soil_kept_moist &lt;dbl&gt;, sunlight_full_sun &lt;dbl&gt;, …",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/read.html#tsv",
    "href": "readr/read.html#tsv",
    "title": "Read_delim()",
    "section": "TSV",
    "text": "TSV\nWe’ll read in the file all_plant_details.csv into R as a tibble. This tab delimited file was created with the readr::write_delim() and only contains the header line plus the first 5 rows of the all_plant_details.csv file.\n\nTSV file contents\nView the file contents before reading it as a tibble.\nIf you were to open the file in a text editor it would most likely display the \\t characters as tab spaces.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.tsv\")\n\n[1] \"id\\tcommon_name\\tseeds\\tdrought_tolerant\\tsalt_tolerant\\tthorny\\tinvasive\\ttropical\\tindoor\\tflowers\\tcones\\tfruits\\tedible_fruit\\tleaf\\tedible_leaf\\tcuisine\\tmedicinal\\tpoisonous_to_humans\\tpoisonous_to_pets\\tsunlight_part_sun_part_shade\\tsunlight_full_shade\\tsunlight_deep_shade\\tsunlight_part_shade\\tsunlight_full_sun_only_if_soil_kept_moist\\tsunlight_full_sun\\tsunlight_filtered_shade\\tcare_level_encoded\\tmaintenance_encoded\\twatering_encoded\\tgrowth_rate_encoded\\tcycle_perennial\\tcycle_herbaceous_perennial\\tcycle_annual\"\n[2] \"425\\tflowering-maple\\t0\\t1\\t0\\t1\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t2\\t0\\t2\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426\\tflowering-maple\\t0\\t1\\t0\\t0\\t0\\t0\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427\\tflowering-maple\\t0\\t1\\t0\\t0\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428\\tflowering-maple\\t0\\t1\\t1\\t0\\t0\\t1\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t2\\t1\\t1\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434\\tJacob's coat\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\t0\\t1\\t0\\t2\\t0\\t2\\t0\\t1\\t0\\t0\"                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\n\n\n\nRead in TSV file\nRead in the TSV file with readr::read_delim() setting the delimiter to commas with delim = \"\\t\".\nAdditionally, we’ll specify the option show_col_types = FALSE to quiet the column types message (more info covered in the column types page).\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.tsv\",\n    delim = \"\\t\", \n    show_col_types = FALSE)\n\n# A tibble: 5 × 33\n     id common_name     seeds drought_tolerant salt_tolerant thorny invasive\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1        0\n2   426 flowering-maple     0                1             0      0        0\n3   427 flowering-maple     0                1             0      0        0\n4   428 flowering-maple     0                1             1      0        0\n5   434 Jacob's coat        0                0             0      0        0\n# ℹ 26 more variables: tropical &lt;dbl&gt;, indoor &lt;dbl&gt;, flowers &lt;dbl&gt;,\n#   cones &lt;dbl&gt;, fruits &lt;dbl&gt;, edible_fruit &lt;dbl&gt;, leaf &lt;dbl&gt;,\n#   edible_leaf &lt;dbl&gt;, cuisine &lt;dbl&gt;, medicinal &lt;dbl&gt;,\n#   poisonous_to_humans &lt;dbl&gt;, poisonous_to_pets &lt;dbl&gt;,\n#   sunlight_part_sun_part_shade &lt;dbl&gt;, sunlight_full_shade &lt;dbl&gt;,\n#   sunlight_deep_shade &lt;dbl&gt;, sunlight_part_shade &lt;dbl&gt;,\n#   sunlight_full_sun_only_if_soil_kept_moist &lt;dbl&gt;, sunlight_full_sun &lt;dbl&gt;, …",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/read.html#space",
    "href": "readr/read.html#space",
    "title": "Read_delim()",
    "section": "Space",
    "text": "Space\nWe’ll read in the file all_plant_details.txt into R as a tibble. This space delimited file was created with the readr::write_delim() and only contains the header line plus the first 5 rows of the all_plant_details.csv file.\n\nSpace delimited file contents\nView the file contents before reading it as a tibble.\nYou will notice the 6th line has \"Jacob’s coat\". As this value has a space the \\\" are used to indicate that Jacob’s coat is the value within one field.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.txt\")\n\n[1] \"id common_name seeds drought_tolerant salt_tolerant thorny invasive tropical indoor flowers cones fruits edible_fruit leaf edible_leaf cuisine medicinal poisonous_to_humans poisonous_to_pets sunlight_part_sun_part_shade sunlight_full_shade sunlight_deep_shade sunlight_part_shade sunlight_full_sun_only_if_soil_kept_moist sunlight_full_sun sunlight_filtered_shade care_level_encoded maintenance_encoded watering_encoded growth_rate_encoded cycle_perennial cycle_herbaceous_perennial cycle_annual\"\n[2] \"425 flowering-maple 0 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 2 0 2 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426 flowering-maple 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427 flowering-maple 0 1 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428 flowering-maple 0 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 2 1 1 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434 \\\"Jacob's coat\\\" 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 2 0 2 0 1 0 0\"                                                                                                                                                                                                                                                                                                                                                                                                                             \n\n\n\n\nRead in space delimited file file\nRead in the space delimited file with readr::read_delim() setting the delimiter to commas with delim = \" \".\nAdditionally, we’ll specify the option show_col_types = FALSE to quiet the column types message (more info covered in the column types page).\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.txt\",\n    delim = \" \", \n    show_col_types = FALSE)\n\n# A tibble: 5 × 33\n     id common_name     seeds drought_tolerant salt_tolerant thorny invasive\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1        0\n2   426 flowering-maple     0                1             0      0        0\n3   427 flowering-maple     0                1             0      0        0\n4   428 flowering-maple     0                1             1      0        0\n5   434 Jacob's coat        0                0             0      0        0\n# ℹ 26 more variables: tropical &lt;dbl&gt;, indoor &lt;dbl&gt;, flowers &lt;dbl&gt;,\n#   cones &lt;dbl&gt;, fruits &lt;dbl&gt;, edible_fruit &lt;dbl&gt;, leaf &lt;dbl&gt;,\n#   edible_leaf &lt;dbl&gt;, cuisine &lt;dbl&gt;, medicinal &lt;dbl&gt;,\n#   poisonous_to_humans &lt;dbl&gt;, poisonous_to_pets &lt;dbl&gt;,\n#   sunlight_part_sun_part_shade &lt;dbl&gt;, sunlight_full_shade &lt;dbl&gt;,\n#   sunlight_deep_shade &lt;dbl&gt;, sunlight_part_shade &lt;dbl&gt;,\n#   sunlight_full_sun_only_if_soil_kept_moist &lt;dbl&gt;, sunlight_full_sun &lt;dbl&gt;, …",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/read.html#non-standard-delimiter",
    "href": "readr/read.html#non-standard-delimiter",
    "title": "Read_delim()",
    "section": "Non-standard delimiter",
    "text": "Non-standard delimiter\nYou can use many other characters as delimiters when reading files. This can be useful if the data contains the three common delimiters (comm, tab, and space).\nThe most common non-standard delimiters are:\n\nTilde (~)\nColon (:)\nSemi-colon (;)\nPipe (|)\n\nWe’ll read in the file plant_detail_slice.pipe_delimit.text into R as a tibble. This pipe (|) delimited file was created with the readr::write_delim() and only contains the header line plus the first 5 rows of the all_plant_details.csv file.\n\nNon-standard delimited file contents\nView the file contents before reading it as a tibble.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.pipe_delimit.text\")\n\n[1] \"id|common_name|seeds|drought_tolerant|salt_tolerant|thorny|invasive|tropical|indoor|flowers|cones|fruits|edible_fruit|leaf|edible_leaf|cuisine|medicinal|poisonous_to_humans|poisonous_to_pets|sunlight_part_sun_part_shade|sunlight_full_shade|sunlight_deep_shade|sunlight_part_shade|sunlight_full_sun_only_if_soil_kept_moist|sunlight_full_sun|sunlight_filtered_shade|care_level_encoded|maintenance_encoded|watering_encoded|growth_rate_encoded|cycle_perennial|cycle_herbaceous_perennial|cycle_annual\"\n[2] \"425|flowering-maple|0|1|0|1|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|1|0|1|0|2|0|2|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[3] \"426|flowering-maple|0|1|0|0|0|0|1|1|0|0|0|1|0|0|0|0|0|0|0|0|1|0|1|0|1|0|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[4] \"427|flowering-maple|0|1|0|0|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|1|0|1|0|1|0|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[5] \"428|flowering-maple|0|1|1|0|0|1|1|1|0|0|0|1|0|0|1|0|0|0|0|0|0|0|1|0|2|1|1|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"434|Jacob's coat|0|0|0|0|0|0|1|1|0|0|0|1|0|0|0|0|0|0|0|0|1|0|1|0|2|0|2|0|1|0|0\"                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\n\n\n\nRead in non-standard delimited file file\nRead in the pipe (|) delimited file with readr::read_delim() setting the delimiter to commas with delim = \" \".\nAdditionally, we’ll specify the option show_col_types = FALSE to quiet the column types message (more info covered in the column types page).\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/plant_detail_slice.pipe_delimit.text\",\n    delim = \"|\", \n    show_col_types = FALSE)\n\n# A tibble: 5 × 33\n     id common_name     seeds drought_tolerant salt_tolerant thorny invasive\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1        0\n2   426 flowering-maple     0                1             0      0        0\n3   427 flowering-maple     0                1             0      0        0\n4   428 flowering-maple     0                1             1      0        0\n5   434 Jacob's coat        0                0             0      0        0\n# ℹ 26 more variables: tropical &lt;dbl&gt;, indoor &lt;dbl&gt;, flowers &lt;dbl&gt;,\n#   cones &lt;dbl&gt;, fruits &lt;dbl&gt;, edible_fruit &lt;dbl&gt;, leaf &lt;dbl&gt;,\n#   edible_leaf &lt;dbl&gt;, cuisine &lt;dbl&gt;, medicinal &lt;dbl&gt;,\n#   poisonous_to_humans &lt;dbl&gt;, poisonous_to_pets &lt;dbl&gt;,\n#   sunlight_part_sun_part_shade &lt;dbl&gt;, sunlight_full_shade &lt;dbl&gt;,\n#   sunlight_deep_shade &lt;dbl&gt;, sunlight_part_shade &lt;dbl&gt;,\n#   sunlight_full_sun_only_if_soil_kept_moist &lt;dbl&gt;, sunlight_full_sun &lt;dbl&gt;, …",
    "crumbs": [
      "Readr",
      "Read",
      "Read_delim()"
    ]
  },
  {
    "objectID": "readr/column_types.html",
    "href": "readr/column_types.html",
    "title": "Column types",
    "section": "",
    "text": "When reading in a file with readr::delim() the function will try to infer the type/class of data in each column.\nMore info on tibbles and data classes in the tibble structure page.\nInferring the column types is not always correct and you can choose the column types with the col_types= option of the reader::read_delim() function.\nColumn types can be specified with a compact string of single character representations. Each character represents the type of each column, with a number of strings equal to the number of columns (examples below). The characters and their data type are:",
    "crumbs": [
      "Readr",
      "Read",
      "Column types"
    ]
  },
  {
    "objectID": "readr/column_types.html#data",
    "href": "readr/column_types.html#data",
    "title": "Column types",
    "section": "Data",
    "text": "Data\nWe’ll read in a the file simple_example.csv to first specify column types.\n\nCheck file contents\nView the file contents before reading it as a tibble.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/simple_example.csv\")\n\n[1] \"Integers,Doubles,Characters,Factors,Logicals\"\n[2] \"101,0.345,One,A,TRUE\"                        \n[3] \"21,3.14,sentence,B,TRUE\"                     \n[4] \"3,78.9,is,B,FALSE\"                           \n[5] \"0,20000.9,enough,A,FALSE\"",
    "crumbs": [
      "Readr",
      "Read",
      "Column types"
    ]
  },
  {
    "objectID": "readr/column_types.html#specify-column-types",
    "href": "readr/column_types.html#specify-column-types",
    "title": "Column types",
    "section": "Specify column types",
    "text": "Specify column types\nRead in the file specifying the column types.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/simple_example.csv\",\n    delim = \",\", \n    col_types = \"idcfl\")\n\n# A tibble: 4 × 5\n  Integers   Doubles Characters Factors Logicals\n     &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;fct&gt;   &lt;lgl&gt;   \n1      101     0.345 One        A       TRUE    \n2       21     3.14  sentence   B       TRUE    \n3        3    78.9   is         B       FALSE   \n4        0 20001.    enough     A       FALSE",
    "crumbs": [
      "Readr",
      "Read",
      "Column types"
    ]
  },
  {
    "objectID": "readr/column_types.html#default-inference",
    "href": "readr/column_types.html#default-inference",
    "title": "Column types",
    "section": "Default inference",
    "text": "Default inference\nBy default the readr::read_delim() will infer the data types of the columns. If using this method it is always important to ensure the column types are what you want before further analysis.\n\nInference with message\nRead in the file and leave col_types() to the default inference method (i.e. do not specify the option).\nNote there is information on the Column specifications between the Row and Column amounts and the tibble itself.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/simple_example.csv\",\n    delim = \",\")\n\nRows: 4 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Characters, Factors\ndbl (2): Integers, Doubles\nlgl (1): Logicals\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 4 × 5\n  Integers   Doubles Characters Factors Logicals\n     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;   \n1      101     0.345 One        A       TRUE    \n2       21     3.14  sentence   B       TRUE    \n3        3    78.9   is         B       FALSE   \n4        0 20001.    enough     A       FALSE   \n\n\nOverall it is fairly good but it has:\n\nSet the Integers column to doubles. Doubles are a safer option to set numbers to than integers (doubles can have decimal points whilst integers cannot). However, in data science we may work with data that we want in whole numbers and therefore want the column to be an integer column, ie. discrete data. Examples of discrete data include number of individuals, items, or game points.\nSet the Factors column to the characters. Our factors are words which are interpreted as strings.\n\n\n\nInference without message\nI do not find the column specification message to be that useful. You can quiet the message by setting the option show_col_types = FALSE.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/simple_example.csv\",\n    delim = \",\",\n    show_col_types = FALSE)\n\n# A tibble: 4 × 5\n  Integers   Doubles Characters Factors Logicals\n     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;   \n1      101     0.345 One        A       TRUE    \n2       21     3.14  sentence   B       TRUE    \n3        3    78.9   is         B       FALSE   \n4        0 20001.    enough     A       FALSE",
    "crumbs": [
      "Readr",
      "Read",
      "Column types"
    ]
  },
  {
    "objectID": "readr/read_misc.html",
    "href": "readr/read_misc.html",
    "title": "Misc read options",
    "section": "",
    "text": "On top of choosing the delimiter (delim=) and the column types (col_types=) there are other useful options for readr::read_delim().\nThe three covered here are:",
    "crumbs": [
      "Readr",
      "Read",
      "Misc read options"
    ]
  },
  {
    "objectID": "readr/read_misc.html#file-path-column",
    "href": "readr/read_misc.html#file-path-column",
    "title": "Misc read options",
    "section": "File path column",
    "text": "File path column\nThe id= option can be used to add an ID column with the file path of the data. The important features of this are:\n\nThe column’s name is specified as a string e.g. id = \"file_path\".\nThe file path column is added as the first column to the resulting tibble.\nThe string specified as file= is used as the values in the created column.\nThe values of the resulting column are identical.\n\n\nID as file path\nRead in the file https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv setting “file_path” to id=.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\",\n    delim = \",\",\n    id = \"file_path\") |&gt;\n    #Slice and select the first 5 rows and 6 columns\n    dplyr::slice(1:5) |&gt;  dplyr::select(1:6)\n\nRows: 155 Columns: 34\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 5 × 6\n  file_path                  id common_name seeds drought_tolerant salt_tolerant\n  &lt;chr&gt;                   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n1 https://neof-workshops…   425 flowering-…     0                1             0\n2 https://neof-workshops…   426 flowering-…     0                1             0\n3 https://neof-workshops…   427 flowering-…     0                1             0\n4 https://neof-workshops…   428 flowering-…     0                1             1\n5 https://neof-workshops…   434 Jacob's co…     0                0             0\n\n\n\n\nID as file name\nRepeat the above using the functions dplyr::mutate() and basename() to only contain the file name (i.e. remove the entire file path except the file name).\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\",\n    delim = \",\",\n    id = \"file_name\") |&gt;\n    #Mutate to only retain file name in the file_name column\n    dplyr::mutate(file_name = basename(file_name)) |&gt;\n    #Slice and select the first 5 rows and 6 columns\n    dplyr::slice(1:5) |&gt;  dplyr::select(1:6)\n\nRows: 155 Columns: 34\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 5 × 6\n  file_name                id common_name   seeds drought_tolerant salt_tolerant\n  &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n1 all_plant_details.csv   425 flowering-ma…     0                1             0\n2 all_plant_details.csv   426 flowering-ma…     0                1             0\n3 all_plant_details.csv   427 flowering-ma…     0                1             0\n4 all_plant_details.csv   428 flowering-ma…     0                1             1\n5 all_plant_details.csv   434 Jacob's coat      0                0             0",
    "crumbs": [
      "Readr",
      "Read",
      "Misc read options"
    ]
  },
  {
    "objectID": "readr/read_misc.html#skip-lines",
    "href": "readr/read_misc.html#skip-lines",
    "title": "Misc read options",
    "section": "Skip lines",
    "text": "Skip lines\nData files may contain information related to the data that is not part of the table at the top of the file. The skip= option allows the first X lines to be skipped for these data files.\nIf these information lines are not skipped it can confuse the parsing of the data based on the delimiter since the information lines will not have the same amount of the delimiter character as the actual data.\n\nFile contents\nCheck the top 8 lines of the file: https://neof-workshops.github.io/Tidyverse/data/all_plant_details_w_info.csv.\nNotice the first three lines are information and not data lines.\n\nreadLines(\"https://neof-workshops.github.io/Tidyverse/data/all_plant_details_w_info.csv\", n=8)\n\n[1] \"Houseplant environment characteristics\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n[2] \"information about indoor plants, with multiple binary and categorical features.\"                                                                                                                                                                                                                                                                                                                                                                                                                                \n[3] \"Source: https://www.kaggle.com/datasets/noneee/houseplant-environment-characteristics\"                                                                                                                                                                                                                                                                                                                                                                                                                          \n[4] \"id,common_name,seeds,drought_tolerant,salt_tolerant,thorny,invasive,tropical,indoor,flowers,cones,fruits,edible_fruit,leaf,edible_leaf,cuisine,medicinal,poisonous_to_humans,poisonous_to_pets,sunlight_part_sun_part_shade,sunlight_full_shade,sunlight_deep_shade,sunlight_part_shade,sunlight_full_sun_only_if_soil_kept_moist,sunlight_full_sun,sunlight_filtered_shade,care_level_encoded,maintenance_encoded,watering_encoded,growth_rate_encoded,cycle_perennial,cycle_herbaceous_perennial,cycle_annual\"\n[5] \"425,flowering-maple,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,2,0,2,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[6] \"426,flowering-maple,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[7] \"427,flowering-maple,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n[8] \"428,flowering-maple,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,2,1,1,0,1,0,0\"                                                                                                                                                                                                                                                                                                                                                                                                                              \n\n\n\n\nRead in and skip lines\nRead in the data skipping the first 3 lines.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details_w_info.csv\",\n    delim = \",\",\n    skip = 3) |&gt;\n    #Slice and select the first 5 rows and 6 columns\n    dplyr::slice(1:5) |&gt;  dplyr::select(1:6)\n\nRows: 155 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 5 × 6\n     id common_name     seeds drought_tolerant salt_tolerant thorny\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1\n2   426 flowering-maple     0                1             0      0\n3   427 flowering-maple     0                1             0      0\n4   428 flowering-maple     0                1             1      0\n5   434 Jacob's coat        0                0             0      0",
    "crumbs": [
      "Readr",
      "Read",
      "Misc read options"
    ]
  },
  {
    "objectID": "readr/read_misc.html#max-number-of-lines",
    "href": "readr/read_misc.html#max-number-of-lines",
    "title": "Misc read options",
    "section": "Max number of lines",
    "text": "Max number of lines\nIf you have a very large file and only want to read in a specified amount of lines it is best to use n_max=.\nThis is better than piping to dplyr::slice() as it saves the computer from needing to read in the whole file to memory (RAM) only to then slice it.\nRead in the first 8 lines from https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv.\nNote: The header line is not considered for n_max= therefore the header line and first 8 rows ar read in.\n\nreadr::read_delim(\n    file = \"https://neof-workshops.github.io/Tidyverse/data/all_plant_details.csv\",\n    delim = \",\",\n    n_max = 8) |&gt;\n    #Select the first 6 columns to view\n    dplyr::select(1:6)\n\nRows: 8 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): common_name\ndbl (32): id, seeds, drought_tolerant, salt_tolerant, thorny, invasive, trop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 8 × 6\n     id common_name     seeds drought_tolerant salt_tolerant thorny\n  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1   425 flowering-maple     0                1             0      1\n2   426 flowering-maple     0                1             0      0\n3   427 flowering-maple     0                1             0      0\n4   428 flowering-maple     0                1             1      0\n5   434 Jacob's coat        0                0             0      0\n6   502 hot water plant     0                0             0      0\n7   540 desert rose         0                1             1      1\n8   543 maidenhair fern     0                0             0      0",
    "crumbs": [
      "Readr",
      "Read",
      "Misc read options"
    ]
  },
  {
    "objectID": "forcats/cheatsheets.html",
    "href": "forcats/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Forcats",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "tidyr/drop_na.html",
    "href": "tidyr/drop_na.html",
    "title": "Drop NA",
    "section": "",
    "text": "You can remove rows with NAs in various ways with the drop_na() function.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Drop NA"
    ]
  },
  {
    "objectID": "tidyr/drop_na.html#dataset",
    "href": "tidyr/drop_na.html#dataset",
    "title": "Drop NA",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the mammal_sleep_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#mammal_sleep_tbl tibble for demonstration\nmgrtibbles::mammal_sleep_tbl\n\n# A tibble: 62 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6.65e+3   5.71           NA       NA           3.3      38.6\n 2 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 3 ArcticFox        3.38e+0   0.0445         NA       NA          12.5      14  \n 4 Arcticgroundsqu… 9.2 e-1   0.0057         NA       NA          16.5      NA  \n 5 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 6 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 7 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 8 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 9 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n10 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n# ℹ 52 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Drop NA"
    ]
  },
  {
    "objectID": "tidyr/drop_na.html#na-in-any-column",
    "href": "tidyr/drop_na.html#na-in-any-column",
    "title": "Drop NA",
    "section": "Na in any column",
    "text": "Na in any column\nDrop rows with an NA in any column with drop_na().\n\nmammal_sleep_tbl |&gt;\n    tidyr::drop_na()\n\n# A tibble: 42 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 2 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 3 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 4 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 5 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 6 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n 7 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n 8 Chinchilla       4.25e-1   0.0064         11        1.5        12.5       7  \n 9 Cow              4.65e+2   0.423           3.2      0.7         3.9      30  \n10 EasternAmerican… 7.5 e-2   0.0012          6.3      2.1         8.4       3.5\n# ℹ 32 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Drop NA"
    ]
  },
  {
    "objectID": "tidyr/drop_na.html#na-in-one-column",
    "href": "tidyr/drop_na.html#na-in-one-column",
    "title": "Drop NA",
    "section": "NA in one column",
    "text": "NA in one column\nDrop rows with an NA in one specific column.\n\nmammal_sleep_tbl |&gt;\n    tidyr::drop_na(life_span)\n\n# A tibble: 58 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africanelephant  6.65e+3   5.71           NA       NA           3.3      38.6\n 2 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 3 ArcticFox        3.38e+0   0.0445         NA       NA          12.5      14  \n 4 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 5 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 6 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 7 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 8 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n 9 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n10 Chinchilla       4.25e-1   0.0064         11        1.5        12.5       7  \n# ℹ 48 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Drop NA"
    ]
  },
  {
    "objectID": "tidyr/drop_na.html#na-in-multiple-specific-columns",
    "href": "tidyr/drop_na.html#na-in-multiple-specific-columns",
    "title": "Drop NA",
    "section": "NA in multiple specific columns",
    "text": "NA in multiple specific columns\nDrop rows with an NA in at least one of the specified columns.\nBelow a character vector of column names is used c(\"non_dreaming\",\"dreaming\"). The following range of column names would also work in this situation (non_dreaming:dreaming).\nNote: There is an NA in the 10th row of the life_span column as we did not specify it with drop_na().\n\nmammal_sleep_tbl |&gt;\n    tidyr::drop_na(c(\"non_dreaming\",\"dreaming\"))\n\n# A tibble: 48 × 11\n   species          body_wt brain_wt non_dreaming dreaming total_sleep life_span\n   &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Africangiantpou… 1   e+0   0.0066          6.3      2           8.3       4.5\n 2 Asianelephant    2.55e+3   4.60            2.1      1.8         3.9      69  \n 3 Baboon           1.06e+1   0.180           9.1      0.7         9.8      27  \n 4 Bigbrownbat      2.3 e-2   0.0003         15.8      3.9        19.7      19  \n 5 Braziliantapir   1.6 e+2   0.169           5.2      1           6.2      30.4\n 6 Cat              3.3 e+0   0.0256         10.9      3.6        14.5      28  \n 7 Chimpanzee       5.22e+1   0.44            8.3      1.4         9.7      50  \n 8 Chinchilla       4.25e-1   0.0064         11        1.5        12.5       7  \n 9 Cow              4.65e+2   0.423           3.2      0.7         3.9      30  \n10 Deserthedgehog   5.5 e-1   0.0024          7.6      2.7        10.3      NA  \n# ℹ 38 more rows\n# ℹ 4 more variables: gestation &lt;dbl&gt;, predation &lt;fct&gt;, exposure &lt;fct&gt;,\n#   danger &lt;fct&gt;",
    "crumbs": [
      "Tidyr",
      "Missing data",
      "Drop NA"
    ]
  },
  {
    "objectID": "tidyr/cheatsheets.html",
    "href": "tidyr/cheatsheets.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "Source",
    "crumbs": [
      "Tidyr",
      "Cheatsheets"
    ]
  },
  {
    "objectID": "tidyr/pivot_longer.html",
    "href": "tidyr/pivot_longer.html",
    "title": "Pivot longer",
    "section": "",
    "text": "The function pivot_longer() longifys data, converting it from wide to long. Long data is generally the preferred format for Tidyverse, and is especially useful for ggplot2.\nWhen data is longified:\nTo longify data a set of columns are chosen.\nTidyverse reference page",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot longer"
    ]
  },
  {
    "objectID": "tidyr/pivot_longer.html#dataset",
    "href": "tidyr/pivot_longer.html#dataset",
    "title": "Pivot longer",
    "section": "Dataset",
    "text": "Dataset\nFor demonstration we’ll load the fisheries_wide_tbl data from the mgrtibbles package (hyperlink includes install instructions).\n\n#Load package\nlibrary(\"mgrtibbles\")\n#fisheries_wide_tbl tibble for demonstration\nmgrtibbles::fisheries_wide_tbl |&gt;\n    #View first 11 columns with select\n    dplyr::select(1:11)\n\n# A tibble: 264 × 11\n   Entity  `1969` `1970` `1971` `1972` `1973` `1974` `1975` `1976` `1977` `1978`\n   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afgha…     400 4   e2 5   e2 5   e2 5   e2 5   e2 6   e2 6   e2 6   e2 6   e2\n 2 Afric… 3078461 2.48e6 2.36e6 2.63e6 2.78e6 2.74e6 2.49e6 2.20e6 2.16e6 2.12e6\n 3 Afric…  850772 9.61e5 1.13e6 1.20e6 1.20e6 1.24e6 1.28e6 1.26e6 1.29e6 1.31e6\n 4 Alban…    7000 8   e3 8   e3 8   e3 8.00e3 8.45e3 8.41e3 8.38e3 8.34e3 8.81e3\n 5 Alger…   23150 2.42e4 2.37e4 2.83e4 3.12e4 3.58e4 3.77e4 3.51e4 4.35e4 3.41e4\n 6 Ameri…       0 0      0      0      1   e2 8.2 e1 1.36e2 1.13e2 2.02e2 1.93e2\n 7 Andor…      NA 0      0      0      0      0      0      0      0      0     \n 8 Angola  425200 3.75e5 3.24e5 6.07e5 4.79e5 4.00e5 1.61e5 8.15e4 1.20e5 1.26e5\n 9 Antig…     800 9   e2 9   e2 1.2 e3 1.5 e3 1.59e3 1.60e3 1.61e3 1.82e3 1.62e3\n10 Arab …  634609 6.88e5 7.05e5 7.53e5 9.21e5 8.99e5 8.64e5 9.34e5 9.05e5 9.10e5\n# ℹ 254 more rows",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot longer"
    ]
  },
  {
    "objectID": "tidyr/pivot_longer.html#wide-to-long",
    "href": "tidyr/pivot_longer.html#wide-to-long",
    "title": "Pivot longer",
    "section": "Wide to long",
    "text": "Wide to long\nPivot the wide tibble to a long tibble.\nThe three options provided below are:\n\nThe columns to use for longifying.\n\nBelow !Entity is used to longify all but the Entity column.\nString vectors can be used.\n\nnames_to=: New column in long data containing the names of the longified columns.\nvalues_to=: New column in long data containing the values of the longified columns.\n\n\nfisheries_wide_tbl |&gt; \n    tidyr::pivot_longer(!Entity, names_to=\"Year\", values_to = \"Metric_tons\")\n\n# A tibble: 15,576 × 3\n   Entity      Year  Metric_tons\n   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Afghanistan 1969          400\n 2 Afghanistan 1970          400\n 3 Afghanistan 1971          500\n 4 Afghanistan 1972          500\n 5 Afghanistan 1973          500\n 6 Afghanistan 1974          500\n 7 Afghanistan 1975          600\n 8 Afghanistan 1976          600\n 9 Afghanistan 1977          600\n10 Afghanistan 1978          600\n# ℹ 15,566 more rows",
    "crumbs": [
      "Tidyr",
      "Pivot",
      "Pivot longer"
    ]
  },
  {
    "objectID": "tidyr/tidyr.html",
    "href": "tidyr/tidyr.html",
    "title": "Tidyr",
    "section": "",
    "text": "The purpose of tidyr is to create tidy data. Tidy data has three main features:\nThe aim of tidy data is to work within the tidyverse so less time is needed to manipulate data and fight with tools. This allows you to spend your time and effort analysing the data.\ntidyr homepage\nThis website aims to quickly cover the most commonly used tidyr functions and uses. Therefore there are a lot more tidyr functions than those covered here. Please check the below link for the full list.\nFull tidyr reference page",
    "crumbs": [
      "Tidyr"
    ]
  },
  {
    "objectID": "tidyr/tidyr.html#sections",
    "href": "tidyr/tidyr.html#sections",
    "title": "Tidyr",
    "section": "Sections",
    "text": "Sections\nThe sections for tidyr are summarised below.\n\nPivoting\n\n\n  \n\n\n  \n\n\nCertain analyses and tools require data to be in a specific structure. Two rectangular/table data structures are wide and long. The two pivot functions transform data between these two types.\n\npivot_longer(): Lengthens data, transforming it from wide to long. Many Tidyverse packages are built with long data in mind, especially ggplot2.\npivot_wider(): Widens data, transforming it from long to wide.\n\n\n\nCharacter vectors\n\n\n  \n\n\n  \n\n\nA column may contain multiple pieces of character/string data or you may want to create a column by uniting multiple character/string columns. The below functions can be used for these purposes.\n\nseparate_wider_delim(): Splits a string column into multiple columns by a delimiter.\nunite(): Combines/unites multiple string columns into one column.\n\n\n\nMissing values\n\n\n  \n\n\n  \n\n\nIt is common to encounter NAs in tabular data. Dropping columns with NAs or replacing NA values are common approaches to deal with them.\n\ndrop_na(): Remove rows with NAs.\nreplace_na(): Replace NA values.",
    "crumbs": [
      "Tidyr"
    ]
  },
  {
    "objectID": "datasets/lterdatasampler.html",
    "href": "datasets/lterdatasampler.html",
    "title": "Lterdatasampler",
    "section": "",
    "text": "Lterdatasampler is a R package containing various datasets. These datasets were generated by the Long Term Ecological Research program (LTER) Network. They were curated into a R package by Allison Horst and Julien Brun.\nFor full information please see the lterdatasampler website",
    "crumbs": [
      "Datasets",
      "Lterdatasampler"
    ]
  },
  {
    "objectID": "datasets/lterdatasampler.html#install-and-load",
    "href": "datasets/lterdatasampler.html#install-and-load",
    "title": "Lterdatasampler",
    "section": "Install and load",
    "text": "Install and load\nInstallation and loading instruction below:\n\ninstall.packages(\"lterdatasampler\")\nlibrary(\"lterdatasampler\")",
    "crumbs": [
      "Datasets",
      "Lterdatasampler"
    ]
  },
  {
    "objectID": "datasets/lterdatasampler.html#accessing-data",
    "href": "datasets/lterdatasampler.html#accessing-data",
    "title": "Lterdatasampler",
    "section": "Accessing data",
    "text": "Accessing data\nOnce you have installed and loaded the package you can access one of the various datasets as a tibble like below:\n\ntibble::as_tibble(lterdatasampler::and_vertebrates)\n\n# A tibble: 32,209 × 16\n    year sitecode section reach  pass unitnum unittype vert_index pitnumber\n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1  1987 MACKCC-L CC      L         1       1 R                 1        NA\n 2  1987 MACKCC-L CC      L         1       1 R                 2        NA\n 3  1987 MACKCC-L CC      L         1       1 R                 3        NA\n 4  1987 MACKCC-L CC      L         1       1 R                 4        NA\n 5  1987 MACKCC-L CC      L         1       1 R                 5        NA\n 6  1987 MACKCC-L CC      L         1       1 R                 6        NA\n 7  1987 MACKCC-L CC      L         1       1 R                 7        NA\n 8  1987 MACKCC-L CC      L         1       1 R                 8        NA\n 9  1987 MACKCC-L CC      L         1       1 R                 9        NA\n10  1987 MACKCC-L CC      L         1       1 R                10        NA\n# ℹ 32,199 more rows\n# ℹ 7 more variables: species &lt;chr&gt;, length_1_mm &lt;dbl&gt;, length_2_mm &lt;dbl&gt;,\n#   weight_g &lt;dbl&gt;, clip &lt;chr&gt;, sampledate &lt;date&gt;, notes &lt;chr&gt;",
    "crumbs": [
      "Datasets",
      "Lterdatasampler"
    ]
  },
  {
    "objectID": "datasets/lterdatasampler.html#datasets",
    "href": "datasets/lterdatasampler.html#datasets",
    "title": "Lterdatasampler",
    "section": "Datasets",
    "text": "Datasets\nBelow is the infomration on all the datasets within the package (as of 25th April 2025)\n\nand_vertebrates\nRecords for aquatic vertebrates (cutthroat trout and salamanders) in Mack Creek, Andrews Experimental Forest, Oregon (1987 - present)\n\n\nList of variables\n\n\nyear: a number indicating the observation year\nsitecode: a character denoting the coded name of sample area\nsection: a character denoting the section in Mack Creek (CC = clear cut forest, OG = upstream old growth coniferous forest)\nreach: a character denoting the reach sampled from each section; L = lower reach (0 - 50 meters), M = middle reach (50 - 100 meters), U = upper reach (100 150 meters)\npass: a number denoting the electroshocking pass number, either 1 or 2\nunitnum: a number denoting the channel unit number\nunittype: a character denoting the channel unit classification type (C = cascade, I = riffle, IP = isolated pool (not connected to channel), P = pool, R = rapid, S = step (small falls), SC = side channel, NA = not sampled by unit)\nvert_index: a number denoting the unique index for each vertebrate\npitnumber: a number denoting the unique tag number embedded into vertebrate (tagging started in 2007)\nspecies: a character denoting species measured\nlength_1_mm: a number denoting vertebrate length in millimeters; total or snout-fork length for trout, and snout-vent length for salamanders\nlength_2_mm: a number denoting snout-tail length in millimeters (for Coastal giant salamander only)\nweight_g: a number denoting vertebrate mass in grams\nclip: a character denoting the fin clip type for cutthroat trout, ended in 2006 (LV = left ventral fin; LVRV = left and right ventral fins; RV = right ventral fin; NONE = no ventral fin clip)\nsampledate: a date denoting the date of observation\nnotes: a character denoting additional comments\n\n\nWebpage link\n\n\narc_weather\nDaily meteorological (e.g. air temperature, precipitation) records from Toolik Field Station, Alaska (1988 - present)\n\n\nList of variables\n\n\ndate: a date denoting recorded date\nstation: a character denoting the station\nmean_airtemp: a number denoting mean daily air temperature in degrees Celsius\ndaily_precip:a number denoting total daily precipitation in millimeters\nmean_windspeed: a number denoting daily mean windspeed in meters per second\n\n\nWebpage link\n\n\nhbr_maples\nSugar maple seedlings at Hubbard Brook Experimental Forest (New Hampshire) in calcium-treated and reference watersheds in August 2003 and June 2004\n\n\nList of variables\n\n\nyear: a number denoting the year that the sample was taken\nwatershed: a factor denoting the watershed where the sample was collected; W1 = calcium-treated, Reference = reference\nelevation: a factor describing the Elevation of transect; Low = low elevation, Mid = mid elevation\ntransect: a factor denoting the transect number within the watershed\nsample: a factor denoting the sample number within transect. There are twenty samples in each transect\nstem_length: a number denoting the height of the seedling in millimeters\nleaf1area: a number denoting the area of the first sampled leaf in square centimeters\nleaf2area: a number denoting the area of the second sampled leaf in square centimeters\nleaf_dry_mass: a number denoting the dry mass of both sampled leaves in grams\nstem_dry_mass: a number denoting the dry mass of the stem in grams\ncorrected_leaf_area: a number denoting the area of both leaves in addition to the area removed for chlorophyll measurements in square centimeters\n\n\nWebpage link\n\n\nknz_bison\nBison masses recorded for the herd at Konza Prairie Biological Station LTER\n\n\nList of variables\n\n\ndata_code: a character denoting the dataset code\nrec_year: a number denoting the year of observation\nrec_month: a number denoting the month of observation\nrec_day: a number denoting the day of observation\nanimal_code: a character denoting the unique individual bison identification code based on ear tag number\nanimal_sex: a character denoting the sex of bison: M = male, F = female, U = unknown\nanimal_weight: a number denoting bison weight in pounds\nanimal_yob: a number denoting the year animal was born\n\n\nWebpage link\n\n\nluq_streamchem\nStream chemistry data for the Quebrada Sonadora (QS) location part of the Luqillo tropical forest LTER site\n\n\nList of variables\n\n\nSample_ID: a character denoting Watershed or Collector’s location where the sample is taken\nSample_Date: a date denoting the date when the sample was collected\nGage_Ht: a number denoting the height of the water surface above the gage datum (zero point) at sampling time (in meters)\nTemp: a number denoting the temperature of the sample collected\npH: a number pH (Electrometric with combination electrode)\nCond: a number denoting the conductivity (Conductivity bridge in micro siemens/cm)\nCl: a number denoting the concentration of Chloride (up to 1989 by automated colorimetric analysis (thiocyanate); after 1989 by liquid chromatography with conductivity detection) in mg Cl/L\nNO3: a number denoting the concentration of dissolved nitrate in the stream water in ug N/L\nSO4-S: a number denoting the concentration of Sulfate (Liquid chromatography; conductivity detection) in mg/L\nNa: a number denoting the concentration of Sodium (up to 1994 by atomic absorption spectroscopy) in mg/L\nK: a number denoting the concentration of Potassium (up to 1994 by atomic absorption spectroscopy) in mg/L\nMg: a number denoting the concentration of Magnesium (up to 1994 by atomic absorption spectroscopy) in mg/L\nCa: a number denoting the concentration of Calcium (up to 1994 by atomic absorption spectroscopy) in mg/L\nNH4-N: a number denoting the concentration of Ammonium Nitrogen (automated colorimetric analysis (phenolhypochlorite)) in ug N/L\nDOC: a number denoting Dissolved Organic Carbon in the stream water ion milligrams carbon per liter (mg C/L)\nDIC: a number denoting Dissolved Inorganic Carbon (by syringe stripping and infrared spectroscopy (Stainton 1973)) in mg C/L\nSiO2: a number denoting the concentration of Silica (automated colorimetric analysis (molybdate blue)) in mg SiO2/L\nTSS: a number denoting the Total Suspended Sediments in mg/L\n\n\nWebpage link\n\n\nntl_icecover\nIce freeze and thaw dates for Madison, Wisconsin Area lakes (1853 - 2019), North Temperate Lakes LTER\n\n\nList of variables\n\n\nlakeid: a factor denoting the lake name\nice_on: a date denoting the freeze date of each lake\nice_off: a date denoting the ice breakup date of each lake\nice_duration: a number denoting the number of days between the freeze and breakup dates of each lake\nyear: a number denoting the year of observation\n\n\nWebpage link\n\n\nntl_airtemp\nDaily average air temperature data for Madison, Wisconsin (1869 - 2019), North Temperate Lakes LTER\n\n\nList of variables\n\n\nsampledate: a date denoting the day of collection\nyear: a number denoting the year of observation\nave_air_temp_adjusted: a number denoting the air temperature in degrees Celsius, collected in Madison, WI and adjusted for biases\n\n\nWebpage link\n\n\nnwt_pikas\nPika observations for habitat and stress analysis at Niwot Ridge LTER, Colorado\n\n\nList of variables\n\n\ndate: a date denoting the observation date of the fecal sample\nsite: a factor denoting the location where the fecal sample was collected within Niwot Ridge\nstation: a factor denoting the sample station where the fecal sample was collected\nutm_easting: a number denoting the GPS E-W coordinate of the sampling station as Universal Transverse Mercator easting; NAD83, Zone 13. Measured in meters.\nutm_northing: a number denoting the GPS N-S coordinate of the sampling stations as Universal Transverse Mercator northing; NAD83, Zone 13. Measured in meters.\nsex: a factor denoting the sex of the observed pika\nconcentration_pg_m: a number denoting the glucocorticoid metabolite (GCM) concentration in picogram GCM/gram dry pika feces -elev_m: a number denoting the elevation in meters of the sampling station where the fecal sample was collected\n\n\nWebpage link\n\n\npie_crab\nFiddler crab body size recorded summer 2016 in salt marshes from Florida to Massachusetts including Plum Island Ecosystem LTER, Virginia Coast LTER, and NOAA’s National Estuarine Research Reserve System\n\n\nList of variables\n\n\ndate: a date denoting the date crabs were collected\nlatitude: a number denoting the latitude of salt marsh (degree)\nsite: a character denoting the location where crabs were collected (abbreviation of site name); GTM=Guana Tolomoto Matanzas NERR | SI=Sapelo Island NERR |NIB=North Inlet Winyah Bay NERR | ZI=Zeke’s Island NERR | RC=Rachel Carson NERR | VCR=Virginia Coastal Reserve LTER | DB=Delaware Bay NERR |JC=Jacques Cousteau NERR | CT=Sixpenny Island - Connecticut |NB=Narragansett Bay NERR | CC=Cape Cod | BC=Bare Cove Park | PIE=Plum Island Estuary - West Creek\nsize: a number denoting carapace width of a crab (millimeter)\nair_temp: a number denoting mean annual air temperature (Celsius)\nair_temp_sd: a number denoting the standard deviation of mean annual air temperature (Celsius)\nwater_temp: a number denoting mean annual water temperature (Celcius), which is surface temperature (&lt; 1m)\nwater_temp_sd: a number denoting the standard deviation of mean annual water temperature (Celsius)\nname: full name of research site; LTER, Long-Term Ecological Research site; NERR, National Estuarine Research Reserve\n\n\nWebpage link",
    "crumbs": [
      "Datasets",
      "Lterdatasampler"
    ]
  },
  {
    "objectID": "datasets/data_files.html",
    "href": "datasets/data_files.html",
    "title": "Data files",
    "section": "",
    "text": "This website uses various datasets to demonstrate code. Below are explanations to the datasets and their download links.",
    "crumbs": [
      "Datasets",
      "Data files"
    ]
  },
  {
    "objectID": "datasets/data_files.html#suggestions-for-matthew",
    "href": "datasets/data_files.html#suggestions-for-matthew",
    "title": "Data files",
    "section": "Suggestions for Matthew",
    "text": "Suggestions for Matthew\n\nHouseplant environment characteristics\nall_plant_details.csv\nhttps://www.kaggle.com/datasets/noneee/houseplant-environment-characteristics\n\n\nCrab age prediction\nCrabAgePredictions.csv\nhttps://www.kaggle.com/datasets/sidhus/crab-age-prediction\n\n\nShifting Seas: Ocean Climate & Marine Life Dataset\nrealistic_ocean_climate_dataset.csv\nhttps://www.kaggle.com/datasets/atharvasoundankar/shifting-seas-ocean-climate-and-marine-life-dataset\n\n\nPredict age abalone\nabalone.data.csv\nhttps://www.kaggle.com/datasets/farkhod77/abalone-age-predict\n\n\nPenguin Sizes Dataset\npenguins_size.csv\nhttps://www.kaggle.com/datasets/amulyas/penguin-size-dataset\n\n\nFish and Overfishing\ncapture-fisheries-vs-aquaculture.csv\nhttps://www.kaggle.com/datasets/sergegeukjian/fish-and-overfishing?select=capture-fisheries-vs-aquaculture.csv",
    "crumbs": [
      "Datasets",
      "Data files"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#long-data",
    "href": "ggplot2/input_data.html#long-data",
    "title": "Input data",
    "section": "",
    "text": "When using the tidyverse we are primarily working with “tidy” data. This is by design.\nThere is a definite learning curve to using “tidy” data as we have used “messy” data for most of our education. However, the purpose of “tidy” is to make data manipulation and analysis more consistent, and to reduce the overall time spent on cleanign and preparing data. There are many ways to have data formatted in a wide (messy) format but only one way (generally) to have data in a long (tidy) format.\nAlthough hard to give a specific definitions, Tidy/long data have the thre following features:\n\nEach variable is a column; each column is a variable\nEach observation is a row; each row is an observation\nEach value is a cell; each cell is a single value\n\nIn essence you never want column names to be observations, rather having those observations being the row values of a column/variable. To go from wide/messy to long/tidy you can use the function tidyr::pivot_longer(). The link to the function page also contains an example of a wide and long tibble.\nIf long/tidy data is so great why do we not normally use it? Although long data is very useful in R it is not as human readable as wide/messy data. Therefore, when learning maths, stats etc. or displaying tables it is better to use wide data. In other words; messy humans like messy data, tidy computers like tidy data.\nLinks with more infomration:\n\nTidyr tidy data info\nStructure of a tibble",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#longtidy-data",
    "href": "ggplot2/input_data.html#longtidy-data",
    "title": "Input data",
    "section": "",
    "text": "When using the tidyverse we are primarily working with tidy/long data. This is by design.\n\n\nThere is a definite learning curve to using tidy/long data. We humans have used messy/wide data for most of our education and so tend to find it more intuitive. The purpose of tidy/long data is to:\n\nMake data manipulation and analysis more consistent\nReduce the overall time spent on cleaning and preparing data\n\nThere are many ways to have data formatted in a wide/messy format but only a few ways to have data in a long/tidy format.\n\n\n\nAlthough hard to give a specific definition, tidy/long data have the three following features:\n\nEach variable is a column; each column is a variable\nEach observation is a row; each row is an observation\nEach value is a cell; each cell is a single value\n\nIn essence you never want column names to be values, rather having those values inhabit the cells of a column/variable. For example, instead of 10 columns of ten different years (1990, 1991, 1993, etc) where the cell values are the fish metric ton values you would have:\n\nA column/variable called “Year” containing the years as values\nA column/variable called “Metric_tons” containing the fish metric ton values\nEach “Year” value and corresponding “Metric_tons” value would be one observation/row\n\nThe below tibble shows a small slice of this tidy/long tibble.\n\n\n# A tibble: 5 × 2\n   Year Metric_tons\n  &lt;dbl&gt;       &lt;dbl&gt;\n1  1969         400\n2  1970         400\n3  1971         500\n4  1972         500\n5  1973         500\n\n\nTo go from wide/messy to long/tidy you can use the function tidyr::pivot_longer().\n\n\n\nIf long/tidy data is so great why do we still use wide/messy data?\nAlthough long data is very useful in R it is not as human readable as wide/messy data. When learning maths, stats etc., or displaying tables it is better/easier to use wide data. In other words:\n\nMessy humans like messy data. Tidy computers like tidy data.\n\nMatthew R. Gemmell\n\n\nLinks with more information:\n\nTidyr tidy data info\nStructure of a tibble",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  },
  {
    "objectID": "ggplot2/input_data.html#tidylong-data-examples",
    "href": "ggplot2/input_data.html#tidylong-data-examples",
    "title": "Input data",
    "section": "",
    "text": "Below are two examples of tidy/long data.\n\n\nMany common plots require a tibble where all the continuous/numerical values are in one column whilst the other columns contain categorical data (i.e. metadata). An example includes a box plot of weight (kg) against age ranges (teen, adult etc.).\nThe below code blocks creates an example tibble and a box plot with the data.\nNote: set.seed() is used to have consistent randomness for the rep() function. It is good practice to set the seed to its normal operation afterwards with set.seed(NULL).\n\n#Create tibble\nset.seed(6836)\nage_range &lt;- rep(c(\"teen\",\"adult\", \"Middle age adult\", \"Senior adult\"), 25)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nweight_age_tbl &lt;- tibble::tibble(weight, age_range)\nset.seed(NULL)\n#Display top of tibble\nhead(weight_age_tbl)\n\n# A tibble: 6 × 2\n  weight age_range       \n   &lt;int&gt; &lt;chr&gt;           \n1    194 teen            \n2    190 adult           \n3    159 Middle age adult\n4    171 Senior adult    \n5    162 teen            \n6    167 adult           \n\n\n\n#Histogram plot\nggplot2::ggplot(weight_age_tbl, aes(x=age_range,y=weight)) +\n    ggplot2::geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe format of columns in your long tibble is highly dependant on your specific data and the type of plots you will create. For example, you may have a scatterplot comparing 2 continuous measues from 2 different columns (e.g. height vs weight). In this case each row would contain the height and weight of one individual.\nThe below code blocks creates an example tibble and a scatter plot with the data.\n\n#Create tibble\nset.seed(6836)\nweight &lt;- sample(150:195, size = 100, replace=TRUE)\nheight &lt;- sample(50:130, size = 100, replace=TRUE)\nset.seed(NULL)\nweight_height_tbl &lt;- tibble::tibble(weight, height)\n#Display top of tibble\nhead(weight_height_tbl)\n\n# A tibble: 6 × 2\n  weight height\n   &lt;int&gt;  &lt;int&gt;\n1    194    116\n2    190     90\n3    159    130\n4    171    127\n5    162     78\n6    167     58\n\n\n\n#Scatterplot\nggplot2::ggplot(weight_height_tbl, aes(x=weight,y=height)) +\n    ggplot2::geom_point()\n\n\n\n\n\n\n\n\nIn this case there seems to be no linear correlation but that is because we randomly created the dataset in a very niave manner.",
    "crumbs": [
      "Ggplot2",
      "Anatomy",
      "Input data"
    ]
  }
]