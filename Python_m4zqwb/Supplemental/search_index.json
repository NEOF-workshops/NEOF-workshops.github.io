[["index.html", "Python for Bioinformatics - Supplementary Materials 1 Introduction", " Python for Bioinformatics - Supplementary Materials Graeme Fox November, 2022 1 Introduction This supplementary material is focused on working with other types of data that you might typically encounter; specifically comma delimited data tables, and also using Python to generate plots. This material serves as an introduction to two very powerful Python libraries: Pandas and Matplotlib. This additional bookdown is an extension to the ‘main’ material, and expands on the use of loops, reading and writing files, subsetting data, and applying functions that you have already practiced. "],["working-with-other-types-of-data.html", "2 Working with other types of data 2.1 Background info on the example data 2.2 Read a .csv file with pandas 2.3 Make more complex selections 2.4 Select columns by name 2.5 Select records by their properties 2.6 Applying functions and methods to pandas objects", " 2 Working with other types of data ! Often scientists store data in delimited text files which are typically separated by commas or tabs. We can read these into Python, loop through them and manipulate their values using similar, or identical, approaches to those we used with our sequence data previously. We are going to load a further example dataset; a typical table of comma delimited data, and use the Python module ‘pandas’ to filter and manipulate the data. 2.1 Background info on the example data The example data we are working with is a subset of the Atlas1006 dataset, which itself is example data provided with the R package microbiome. It contains information on 1006 western women with no reported health complications. The women had their gut microbiome profiled and several other characteristics records. The data we will be looking at contains the following variables: SampleID, age, gender, nationality, diverity of gut microbiome, and a BMI category. 2.2 Read a .csv file with pandas The Python module pandas specifically for reading delimited text files. It pre-processes text data files and makes them easier to process and use in analysis. Pandas allows us to access certain elements within each row? For example, the gender of each patient. Start a new script called “Script04.py”, add the wd, load pandas and use the pandas method read_csv to input the same input file: import pandas wd = &quot;/pub14/tea/nsc201&quot; patients = pandas.read_csv(wd + &quot;/Python_course_data/patients_gut_data.csv&quot;) Now we have read our data into the object ‘patients’, we can take a look at how pandas has stored the data by looking at the “.dtypes” (data types). print(patients.dtypes) Pandas has automatically used the column headers as the variable names, and assigned each variable a type based on the data; either ‘float64’ (a floating point number) or ‘object’ (a catch all term for string types). We can access a single column of data by it’s variable name assigned by pandas. For example, to access the ‘diversity’ column: #print(patients.dtypes) print(patients.diversity) To access individual records, we need to first tell pandas which column contains the index, or sample names. In the case of the patients_gut_data.csv data file, the identifiers are in the first column, which Python counts as column zero. Modify the command above to the following to add the index information, and print the data associated with sample #21. patients = pandas.read_csv(wd + &quot;/Python_course_data/patients_gut_data.csv&quot;, index_col=0) #print(patients.dtypes) #print(patients.diversity) print(patients.loc[&quot;Sample-21&quot;]) 2.3 Make more complex selections Pandas is very powerful for selecting columns and records from the data by any conditions we want. 2.4 Select columns by name Let’s select the data relating to the age, gut microbiome diversity, and bmi_group and save it as a separate variable. NOTE the double square brackets containing the variable names: [[ ]] (this is because we are choosing columns by index - which is done by passing an argument in square brackets, AND we’re passing a list of the columns to select which is also defined by being within square brackets). Modify the commands above to the following: patients = pandas.read_csv(wd + &quot;/Python_course_data/patients_gut_data.csv&quot;, index_col=0) #print(patients.loc[&quot;Sample-21&quot;]) age_div_bmi = patients[[&quot;age&quot;, &quot;diversity&quot;, &quot;bmi_group&quot;]] print(age_div_bmi) print(type(age_div_bmi)) We can see our new dataframe contains just the columns we selected, and also by checking it with the type() function, this new dataframe is also in the pandas format. 2.5 Select records by their properties Let’s choose records which fit certain criteria. First we’ll choose records from the patients data in which the patient is 25 or more years old AND are overweight. The two statements are linked together by the AND operator; the ampersand character: &amp; You can always refer back to chapters 4 and 5 for a refresher on how selection statements and operators work. Modify the above commands to: #print(age_div_bmi) #print(type(age_div_bmi)) overweight_over25 = patients[(patients[&quot;age&quot;] &gt;= 25) &amp; (patients[&quot;bmi_group&quot;] == &quot;overweight&quot;)] print(overweight_over25) We can also do something similar but using the OR operator instead; the pipe character: | Modify the end of the above commands to: #print(overweight_over25) obese_or_severeobese = patients[(patients[&quot;bmi_group&quot;] == &quot;obese&quot;) | (patients[&quot;bmi_group&quot;] == &quot;severeobese&quot;)] print(obese_or_severeobese) 2.6 Applying functions and methods to pandas objects Pandas provides useful methods for working with data tables, as we have seen. All of the previous approaches that we used in previous chapters still apply to data which has been processed using pandas. For example, we can use pandas to select the age column, and convert the number of years to months: #print(obese_or_severeobese) print(patients.age*12) We can also pass pandas data to functions, as before. Or, we could define a new function and use that with pandas data. Comment out the print statement above, add the following definition for an average function, and pass the diversity column to the new function to find the average microbiome diversity in the dataset. #print(patients.age*12) # define new function to find the average of a list def average(input_list): total = 0 for row in input_list: total = total + row return(total / len(input_list)) print(average(patients.diversity)) "],["plotting-using-python-and-matplotlib.html", "3 Plotting using Python and Matplotlib 3.1 Import Matplotlib 3.2 Produce a Simple Bar Chart 3.3 Use Matplotlib to produce a scatter plot 3.4 Recap", " 3 Plotting using Python and Matplotlib We can also use Python to produce plots of our data. Matplotlib is a library of powerful plotting tools. 3.1 Import Matplotlib Add a new line to the top of the Python script containing the work in pandas (script04.py). We need to import a new library: matplotlib, and specifically the pyplot suite of functions. To save us having to type out “matplotlib.pyplot” repeatedly in our script, we can set it as an abbreviated form “plt”. import matplotlib.pyplot as plt 3.2 Produce a Simple Bar Chart Again, considering the patients.csv dataset, let’s see which is the most common bmi group and generate a bar chart. To the bottom of the script, add the following. We are using the value_counts() method to count how many individuals are in each group. #print(average(patients.diversity)) bmi_counts = (patients[&#39;bmi_group&#39;].value_counts()) print(bmi_counts) We can then use Matplotlib to plot this data in order to visualise these groups. To our bmi_counts data we apply the plot() method, and specify that we would like a bar chart. Once the plot has been generated in the computer, we need to save it to the disk so that we can view it. Add/modify the following: #print(bmi_counts) # generate the plot bmi_counts.plot(kind=&#39;bar&#39;) # automatically adjust borders to fit axis ticks plt.tight_layout() # save the plot to the disk plt.savefig(wd + &#39;/bmi_groups.png&#39;) # close the plotting device plt.close() In terminal window, run the following the view the plot: cd ~ firefox bmi_groups.png 3.3 Use Matplotlib to produce a scatter plot We can also look for relationships between a pair of variables. Consider the age and diversity of gut microbiome of the first 100 patients (for clarity). # generate the scatter plot of the first 100 rows plt.scatter(patients.age[0:99], patients.diversity[0:99]) # write the plot to the disk plt.savefig(wd + &#39;/age_diversity_plot.png&#39;) # close the plotting device plt.close() View the plot by running the following in the terminal window: firefox age_diversity_plot.png 3.4 Recap Madplotlib is a library of very powerful tools to produce plots directly from Python. We have barely scratched the surface of what Matplotlib can do but have seen a couple of examples of how we can produce plots to explore our data. "],["further-reading-and-resources.html", "4 Further Reading and Resources 4.1 Websites of the verious packages used in the workshop 4.2 eBooks", " 4 Further Reading and Resources 4.1 Websites of the verious packages used in the workshop There are plenty of online resources to help you with your analyses and programming. The Biopython website has an extensive set of tutorials and “recipes” for lots of DNA sequence data focused tasks. Pandas also supply many tutorials and demo data sets on which you can try your skills There is a lot more information on Matplotlib, including a great number of tutorials on the website. 4.2 eBooks The Python Data Science Handbook Learn Python the right way "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
