[["01-Python.html", "Python for Bioinformatics 1 Introduction", " Python for Bioinformatics June, 2023 1 Introduction In this practical session we are going to learn Python programming skills. We will be learning the fundamentals of Python scripting and several Python tools focused on data manipulation. Whilst we will be working mostly with DNA sequence data, the methods and approaches can be modified to work with most types of data. During this session we will work through the following sections: Course Introduction Working in the VNC [Scripting in Python][Scripting in Python] [Python Fundamentals][Python Fundamentals] [Data Structures][Data Structures] [Conditions (if and else statements)][Python Conditions: 'if' and 'else' statements] [Loops][Loops] [Working with DNA Sequence Data][Reading sequence data] [Manipulating Sequence Data][Using Conditions to Modify DNA Data] [Reading and Writing Files][Reading and writing files] This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["02-intro.html", "2 Python for bioinformatics 2.1 Materials Covered in the Course 2.2 Inputting Commands 2.3 Pseudocode", " 2 Python for bioinformatics This is a course to explore and learn the fundamentals of programming in the Python language with a specific focus on how this tool can be used in bioinformatics. Python is a high level programming language enabling very rapid development of applications or scripts. It has a simple, easy-to-read syntax and is very accessible as a first or second programming language. Python has many pre-built modules and packages, allowing you to import lots of functionality, and avoid the need to \"re-invent the wheel\". Python is favoured by many programmers for the flexibility it affords and the speed at which it can be written. This course assumes absolutely no Python experience or prior programming experience in any other language. Over the next two days you will: Learn the fundamental components of a Python script Discover how to write, edit and run a Python script Understand and use variables Understand and choose data structures Use control structure (conditions and loops) Learn string manipulation Read and manipulate DNA sequence data Be able to read input files and write output files Have a plan on what to do next to further your knowledge. We will cover the theory behind Python concepts and terminology. Python is designed to be human-readable code and understanding the underlying processes is important. There will be lots of opportunity to practice writing Python. Practice will involve typing and running Python code whilst working through the workshop materials. This will allow you to see the output of Python commands and help you to understand how Python works. 2.1 Materials Covered in the Course After learning some of the basics of Python we will import some DNA sequence data and perform some common types of analyses. The focus is on learning the theory and the ways in which Python can be used, rather than the specifics of the analysis. Hopefully you will take away new skills that can be applied to your own data. In the supplementary material, we import and work with a different form of data often encountered by biologists; the comma delimited file. 2.2 Inputting Commands Commands are in the following font and colour and should be run in the VNC window following the link provided to you by the course coordinators. (Do not try to run the following, however.) This is an example of a command. 2.3 Pseudocode Sometimes to illustrate how a concept works, we will illustrate it with some pseudocode. This is a way of representing a concept in simple terms that can be understood without knowing the correct programming terminology or syntax. Do not try to run the pseudocode as Python will not understand it. "],["03_cluster_introduction.html", "3 Cluster Introduction 3.1 Logon Instructions 3.2 The Terminal Window 3.3 Load workshop data 3.4 Mamba", " 3 Cluster Introduction 3.1 Logon Instructions For this workshop we will be using Virtual Network Computing (VNC). Connect to the VNC with a browser by using the webVNC link you were sent. You will now be in a logged-in Linux VNC desktop with a terminal window visible. You will see something as below. If you do not see something similar please ask for assistance. If the VNC is taking up too much/little space of your browser you can use the zoom of your browser to adjust the size. Ensure you can see one whole terminal. During the first chapters of this session you will be working directly in the terminal window in the VNC. During the latter chapters we will open a plain text editor called Gedit. 3.2 The Terminal Window In our case the terminal window looks like the picture below. We are using the terminal window as our shell to interpret our commands to the kernel. Depending on your system and preferences it may look different. You're now ready to start the workshop! 3.3 Load workshop data Before we get started, we need to copy across some data files to analyse later in the workshop. In the terminal window, issue the following commands to copy the data into your account: cd ~ cp -r /pub14/tea/nsc206/NEOF/Python_course_data . 3.4 Mamba This workshop requires some programs. These can be difficult to install. Instead we have used Mamba forge to install the programs including Jupyter-notebook. To learn more about Mamba-forge and how to create your own environment please see the appendix. To set-up your environment for this workshop please run the following code (you must include the full stop and space at the front of the command). . usepython You will have successfully activated the environment if you now see (python) at the start of your command prompt. This indicates you are now in the mamba environment called python created by the instructor. If you are interested in the use script you can look at its contents. less /usr/local/bin/usepython Tip: press q to quit less. For more about mamba and how to create your own python environment please see the appendix "],["04-Jupyter.html", "4 Jupyter 4.1 Open Jupyter-notebook 4.2 Changing directories 4.3 Create notebook 4.4 Cells and code 4.5 Create new cells 4.6 Running code 4.7 Saving the file 4.8 Title cells with markdown 4.9 Close the notebook 4.10 Video tutorial", " 4 Jupyter Jupyter-notebook is a nice browser based method to write, edit, and run code. It was initially created for Python coding, but has since branched out to many other languages, such as R. We are using it in this workshop for a variety of its properties: It is popular and well maintained. It is lightweight. Other heavier weight programs would struggle in our HPC due to the graphical and CPU load. It is interactive and displays code output. It allows for easier annotation, editing, and debugging than the command line. It provides a graphical interface for changing directories and choosing files. Before carrying out any analysis we will go through a quick tutorial of jupyter-notebook. 4.1 Open Jupyter-notebook The first step is to open jupyter-notebook. Run the below command in your (python) environment. jupyter-notebook This will open jupyter-notebook in firefox. We won't need to access the linux terminal in this book anymore. Leave the terminal running jupyter-notebook and full screen your firefox so you should see something like below. Can't see the whole webVNC window? You may need to zoom out with your browser so you can see the full webVNC window. Chrome: Click on the three dots in vertical line ( ) on the top left for a dropdown menu which includes zoom options. Edge: Click on the three horizontal lines ( ) on the top left for a dropdown menu which includes zoom options. Firefox: Click on the three dots in horizontal line ( ) on the top left for a dropdown menu which includes zoom options. 4.2 Changing directories To move around the directories you can click on directory names. Click on \"Python_course_data\" to move into that directory. You will then see the below showing the files in the directory. 4.3 Create notebook The next step is to create a R notebook. Click on the \"New\" button towards the top right, right of the \"Upload\" button. From the dropdown click \"R\" below \"Python 3 (ipykernel)\". This will open up a new R notebook like below. 4.4 Cells and code Jupyter-notebook uses cells (the gray boxes) to separate code. This is very useful to compartmentalise our code. There will already be one cell. Within the cell, type in the below commands. 1+1 2-3 When pressing enter in cells it will create a new line. To run all commands in a cell press CTRL + enter. Run your current cell and you should see something like below. 4.5 Create new cells You can create new cells by 2 different means. Press the + button on the tool bar (between the floppy disk and scissors ). This will add a cell below your currently selected cell. Click on the Insert button and use the dropdown to add a cell above or below your currently selected cell. Tip: Hover over the toolbar icons to display a text based description of its function. With that knowledge add a second cell below the first cell. Add the following code to your second cell but do not run it. num_1 &lt;- 3 num_2 &lt;- 10 Tip: Notice there are green lines around your selected cell. Insert a third cell and add the following code to it. Do not run the code. num_1 * num_2 4.6 Running code Try to run the code in the third cell. There should be an error as we have not created the objects num_1 &amp; num_2. We have only written the code for these objects but not run them. We can run all the code in a notebook starting from the first cell to the last cell. To run all cells from the start: Click on the \"Cell\" button. Click \"Run All\" from the drop-down options. You should then see something like the below in your notebook. There is no output printed for cell 2 because we are assigning variables. However, the correct output for Cell 3 is below it. This is because the variables were assigned in cell 2 before cell 3 was run. 4.7 Saving the file As with RStudio and other good coding interfaces we can save our notebook. First we should rename the file. Rename the notebook to \"jupyter_tut\": Click on the name of the notebook, currently called \"Untitled\". This is at the very top of the notebook, right of the Jupyter logo. A pop-up called \"Rename Notebook\" will appear. Change the Name to \"jupyter_tut\". Click \"Rename\". Now we can save the file. Two methods to save are: Click the floppy disk on the toolbar. Click on the \"File\" button. Click \"Save and Checkpoint\" from the dropdown options. 4.8 Title cells with markdown We will be using multiple notebooks in this workshop. We will also have multiple sections per notebook. It will be useful to create header cells with markdown to create visual separation of the different sections. To add a header cell to the top of our notebook: Create a new cell at the top of the notebook. Click on the \"Code\" drop down and select \"Markdown\". The \"Heading\" option no longer works. Add the following to the \"Markdown\" cell to create a first level header. Ensure you have a space between the # and header text (\"Tutorial\"). # Tutorial Great, we can now add nice headers in our notebooks. Save the notebook once more before carrying on to the next section. Markdown You won't need to know more about Markdown but if you are interested please see the Markdown guide. 4.9 Close the notebook To close the notebook: Click on \"File\". From the dropdown options click \"Close and Halt\". When you are back in the file explorer page you may not yet set the new file you saved. If so, you will need to refresh the page with the Refresh button towards the top right. With that quick tutorial of jupyter-notebook we can start our community analysis in the next chapter. For more info on jupter-notebook please see the appendix. 4.10 Video tutorial "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
