[["01-Intro.html", "Python for Bioinformatics - Supplementary Materials 1 Introduction", " Python for Bioinformatics - Supplementary Materials Graeme Fox &amp; Matthew R. Gemmell April, 2025 1 Introduction These supplementary materials are focused on working with other types of data and generating plots with Python. We will work with comma delimited data tables and create a bar chart and scatter plot. These material serves as an introduction to two very powerful Python libraries: Pandas Matplotlib This bookdown will also expand on the use of loops, reading and writing files, subsetting data, and applying functions that you have already practiced. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["02_other_data.html", "2 Other types of data 2.1 Background info on the example data 2.2 Read a .csv file with pandas 2.3 Make more complex selections 2.4 Applying functions and methods to pandas objects", " 2 Other types of data Often scientists store data in delimited text files. These are typically separated by commas or tabs. We can read these into Python, loop through them and manipulate their values. We will do this using similar/identical approaches that we used with our sequence data previously. We are going to load a new example dataset; a table of comma delimited data. We will then use the Python module pandas to filter and manipulate the data. Create a new notebook called \"10-Pandas\" for this chapter. 2.1 Background info on the example data The example data we are working with is a subset of the Atlas1006 dataset, which itself is example data provided with the R package microbiome. It contains information on 1006 westerners with no reported health complications. The westerners had their gut microbiome profiled and several other characteristics recorded. The data we will be looking at contains the following variables: SampleID Age Gender Nationality Diversity of gut microbiome A BMI category 2.2 Read a .csv file with pandas The Python library pandas is specifically designed for reading delimited text files. It pre-processes text data files and makes them easier to process and use in analysis. Pandas allows us to access certain elements within each row. For example, the gender of each patient. With pandas let us read in the file \"patients_gut_data.csv\". First we need to load the pandas module. #load pandas import pandas Next we will read in the data with the pandas function read_csv(). #Read in csv file patients = pandas.read_csv(&quot;patients_gut_data.csv&quot;) We have read in a DataFrame. Look at the top of this DataFrame with the .head() method. patients.head() One very useful feature of pandas is that the object created when reading in the file will not dissappear when it is used. This means you can read in the file once and do many tasks with the resulting object. Next, we can take a look at how pandas has stored the data by looking at the \".dtypes\" (data types). print(patients.dtypes) Pandas has automatically used the column headers as the variable names, and assigned each variable a type based on the data: int64: An integer. float64: A floating point number. object: A catch all term for string types We can access a single column of data by it's variable name assigned by pandas. For example, to access the 'diversity' column: print(patients.diversity) To access individual records, we need to first tell pandas which column contains the index, or sample names. We can set the index column when reading in the file with the option index_col. In the case of the \"patients_gut_data.csv\" data file, the identifiers are in the first column, which Python counts as column zero. #Read in file and use 1st column as index patients = pandas.read_csv(&quot;patients_gut_data.csv&quot;, index_col=0) #Print nationality information for Sample-21 print(patients.nationality[&quot;Sample-21&quot;]) 2.3 Make more complex selections Pandas is very powerful for selecting columns and records from the data by any conditions we want. 2.3.1 Select columns by name Let's select the data relating to the age, gut microbiome diversity, and bmi_group and save it as a separate variable. NOTE the double square brackets containing the variable names: [[]]. This is used because: We are choosing columns from the patients data frame by indexing, carried out by the outer square brackets ([[]]). We're using a list of the column names to select columns to index. This is carried out by the inner square brackets ([[]]). #Subset patients info age_div_bmi = patients[[&quot;age&quot;, &quot;diversity&quot;, &quot;bmi_group&quot;]] #Print print(age_div_bmi) print(type(age_div_bmi)) The below code carries out the same task but demonstrates the usage of the inner square brackets. #List of column names to extract column_names = [&quot;age&quot;, &quot;diversity&quot;, &quot;bmi_group&quot;] #Subset patients info age_div_bmi = patients[column_names] #Print print(age_div_bmi) print(type(age_div_bmi)) We can see our new dataframe contains just the columns we selected. By checking it with the type() function, we know this new dataframe is in the pandas format. 2.3.2 Select records by their properties Let's choose records which fit certain criteria. First we'll choose records from the patients data in which the patient is aged 25 years or more AND are overweight. The two statements are linked together by the AND operator (&amp;). #Select 25 or older and overweight overweight_over25 = patients[(patients[&quot;age&quot;] &gt;= 25) &amp; (patients[&quot;bmi_group&quot;] == &quot;overweight&quot;)] #print print(overweight_over25) We can also do something similar but using the OR operator (|). #Select entries who are overweight or severeobese obese_or_severeobese = patients[(patients[&quot;bmi_group&quot;] == &quot;obese&quot;) | (patients[&quot;bmi_group&quot;] == &quot;severeobese&quot;)] #print print(obese_or_severeobese) 2.4 Applying functions and methods to pandas objects Pandas provides useful methods for working with data tables, as we have seen. All of the previous approaches that we used in the main book still apply to data which has been processed using pandas. For example, we can use pandas to select the age column, and convert the number of years to months: print(patients.age*12) We can also pass pandas data to functions, as before. Or, we could define a new function and use that with pandas data. The below code calculates the average diversity. #Set variable for total diversity div_total = 0 #Loop through diversity values in patients for div in patients.diversity: #Add value to div_total div_total = div_total + div #Print average diversity print(div_total / len(patients.diversity)) "],["03_plotting_data.html", "3 Plotting using Python and Matplotlib 3.1 Import Matplotlib 3.2 Bar Chart 3.3 Scatter plot 3.4 Recap", " 3 Plotting using Python and Matplotlib We can also use Python to produce plots of our data. Matplotlib is a library of powerful plotting tools. 3.1 Import Matplotlib Add a new line to the top of your notebook (\"10-Pandas\"). We need to import a new library: matplotlib, and specifically the pyplot suite of functions. import matplotlib.pyplot as plt 3.2 Bar Chart Again, considering the \"patients.csv\" dataset, let's see which is the most common bmi group and generate a bar chart. At the bottom of the notebook, add and run the following. We are using the .value_counts() method to count how many individuals are in each group. #Calculate number in each bmi group bmi_counts = (patients[&#39;bmi_group&#39;].value_counts()) print(bmi_counts) We can then use Matplotlib to plot this data in order to visualise these groups. To our bmi_counts data we apply the .plot() method, and specify that we would like a bar chart (kind='bar'). #Generate the plot bmi_counts.plot(kind=&#39;bar&#39;) #Automatically adjust borders to fit axis ticks plt.tight_layout() We can also save the plot as a PNG file. #Generate the plot bmi_counts.plot(kind=&#39;bar&#39;) #Automatically adjust borders to fit axis ticks plt.tight_layout() #Save the plot to a png file plt.savefig(&#39;bmi_groups.png&#39;) #Close the plotting device plt.close() You can then open the file in your jupyter-notebook explorer tab. 3.3 Scatter plot We can also look for relationships between a pair of variables. Consider the age and diversity of gut microbiome of the first 100 patients (for clarity). #Generate the scatter plot of the first 100 rows plt.scatter(patients.age[0:99], patients.diversity[0:99]) #Write the plot to the disk plt.savefig(&#39;age_diversity_plot.png&#39;) #Close the plotting device plt.close() View the plot file and you should see the below. 3.4 Recap Matplotlib is a library of very powerful tools to produce plots directly from Python. We have barely scratched the surface of what Matplotlib can do but you have seen a couple of examples of how we can produce plots to explore our data. "],["04_further_reading.html", "4 Further Reading and Resources 4.1 Websites of the various packages used in the workshop 4.2 eBooks", " 4 Further Reading and Resources 4.1 Websites of the various packages used in the workshop There are plenty of online resources to help you with your analyses and programming. The Biopython website has an extensive set of tutorials and \"recipes\" for lots of DNA sequence data focused tasks. Pandas also supply many tutorials and demo data sets on which you can try your skills There is a lot more information on Matplotlib, including a great number of tutorials on the website. 4.2 eBooks The Python Data Science Handbook Learn Python the right way "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
